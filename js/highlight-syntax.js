!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r,i={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],o=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function l(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=i[r.id],o=0;if(a){for(a.refs++;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(m(r.parts[o],t))}else{for(var s=[];o<r.parts.length;o++)s.push(m(r.parts[o],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function c(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i&&e.setAttribute("media",i),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,g=0;function m(e,t){var n,r,i;if(t.singleton){var a=g++;n=h||(h=c(t)),r=f.bind(null,n,a,!1),i=f.bind(null,n,a,!0)}else n=c(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=s(e,t);return l(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var o=n[a],c=i[o.id];c&&(c.refs--,r.push(c))}e&&l(s(e,t),t);for(var u=0;u<r.length;u++){var d=r[u];if(0===d.refs){for(var f=0;f<d.parts.length;f++)d.parts[f]();delete i[d.id]}}}}},function(e,t,n){n(2),n(3),n(5),n(6),n(7),n(8),n(10),n(12),n(14),n(15),n(17),e.exports=n(19)},function(e,t,n){
/*!
 * clipboard.js v2.0.4
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT Â© Zeno Rocha
 */
e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(1)),o=l(n(3)),s=l(n(4));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.resolveOptions(n),r.listenClick(e),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default),i(t,[{key:"resolveOptions",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===r(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,s.default)(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return u("action",e)}},{key:"defaultTarget",value:function(e){var t=u("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return u("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach((function(e){n=n&&!!document.queryCommandSupported(e)})),n}}]),t}();function u(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}e.exports=c},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=(r=n(2))&&r.__esModule?r:{default:r},s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return a(e,[{key:"resolveOptions",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,o.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,o.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=s},function(e,t){e.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var r=window.getSelection(),i=document.createRange();i.selectNodeContents(e),r.removeAllRanges(),r.addRange(i),t=r.toString()}return t}},function(e,t){function n(){}n.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function i(){r.off(e,i),t.apply(n,arguments)}return i._=t,this.on(e,i,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var a=0,o=r.length;a<o;a++)r[a].fn!==t&&r[a].fn._!==t&&i.push(r[a]);return i.length?n[e]=i:delete n[e],this}},e.exports=n},function(e,t,n){var r=n(5),i=n(6);e.exports=function(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!r.string(t))throw new TypeError("Second argument must be a String");if(!r.fn(n))throw new TypeError("Third argument must be a Function");if(r.node(e))return f=t,p=n,(d=e).addEventListener(f,p),{destroy:function(){d.removeEventListener(f,p)}};if(r.nodeList(e))return l=e,c=t,u=n,Array.prototype.forEach.call(l,(function(e){e.addEventListener(c,u)})),{destroy:function(){Array.prototype.forEach.call(l,(function(e){e.removeEventListener(c,u)}))}};if(r.string(e))return a=e,o=t,s=n,i(document.body,a,o,s);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");var a,o,s,l,c,u,d,f,p}},function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},function(e,t,n){var r=n(7);function i(e,t,n,i,a){var o=function(e,t,n,i){return function(n){n.delegateTarget=r(n.target,t),n.delegateTarget&&i.call(e,n)}}.apply(this,arguments);return e.addEventListener(n,o,a),{destroy:function(){e.removeEventListener(n,o,a)}}}e.exports=function(e,t,n,r,a){return"function"==typeof e.addEventListener?i.apply(null,arguments):"function"==typeof n?i.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return i(e,t,n,r,a)})))}},function(e,t){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}e.exports=function(e,t){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}}])},function(e,t,n){(function(t){var n=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,n=0,r={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof i?new i(e.type,r.util.encode(e.content),e.alias):Array.isArray(e)?e.map(r.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function e(t,n){var i,a,o=r.util.type(t);switch(n=n||{},o){case"Object":if(a=r.util.objId(t),n[a])return n[a];for(var s in i={},n[a]=i,t)t.hasOwnProperty(s)&&(i[s]=e(t[s],n));return i;case"Array":return a=r.util.objId(t),n[a]?n[a]:(i=[],n[a]=i,t.forEach((function(t,r){i[r]=e(t,n)})),i);default:return t}},getLanguage:function(e){for(;e&&!t.test(e.className);)e=e.parentElement;return e?(e.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if("undefined"==typeof document)return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var e=(/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(r.stack)||[])[1];if(e){var t=document.getElementsByTagName("script");for(var n in t)if(t[n].src==e)return t[n]}return null}}},languages:{extend:function(e,t){var n=r.util.clone(r.languages[e]);for(var i in t)n[i]=t[i];return n},insertBefore:function(e,t,n,i){var a=(i=i||r.languages)[e],o={};for(var s in a)if(a.hasOwnProperty(s)){if(s==t)for(var l in n)n.hasOwnProperty(l)&&(o[l]=n[l]);n.hasOwnProperty(s)||(o[s]=a[s])}var c=i[e];return i[e]=o,r.languages.DFS(r.languages,(function(t,n){n===c&&t!=e&&(this[t]=o)})),o},DFS:function e(t,n,i,a){a=a||{};var o=r.util.objId;for(var s in t)if(t.hasOwnProperty(s)){n.call(t,s,t[s],i||s);var l=t[s],c=r.util.type(l);"Object"!==c||a[o(l)]?"Array"!==c||a[o(l)]||(a[o(l)]=!0,e(l,n,s,a)):(a[o(l)]=!0,e(l,n,null,a))}}},plugins:{},highlightAll:function(e,t){r.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var i={callback:n,container:e,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};r.hooks.run("before-highlightall",i),i.elements=Array.prototype.slice.apply(i.container.querySelectorAll(i.selector)),r.hooks.run("before-all-elements-highlight",i);for(var a,o=0;a=i.elements[o++];)r.highlightElement(a,!0===t,i.callback)},highlightElement:function(n,i,a){var o=r.util.getLanguage(n),s=r.languages[o];n.className=n.className.replace(t,"").replace(/\s+/g," ")+" language-"+o;var l=n.parentNode;l&&"pre"===l.nodeName.toLowerCase()&&(l.className=l.className.replace(t,"").replace(/\s+/g," ")+" language-"+o);var c={element:n,language:o,grammar:s,code:n.textContent};function u(e){c.highlightedCode=e,r.hooks.run("before-insert",c),c.element.innerHTML=c.highlightedCode,r.hooks.run("after-highlight",c),r.hooks.run("complete",c),a&&a.call(c.element)}if(r.hooks.run("before-sanity-check",c),!c.code)return r.hooks.run("complete",c),void(a&&a.call(c.element));if(r.hooks.run("before-highlight",c),c.grammar)if(i&&e.Worker){var d=new Worker(r.filename);d.onmessage=function(e){u(e.data)},d.postMessage(JSON.stringify({language:c.language,code:c.code,immediateClose:!0}))}else u(r.highlight(c.code,c.grammar,c.language));else u(r.util.encode(c.code))},highlight:function(e,t,n){var a={code:e,grammar:t,language:n};return r.hooks.run("before-tokenize",a),a.tokens=r.tokenize(a.code,a.grammar),r.hooks.run("after-tokenize",a),i.stringify(r.util.encode(a.tokens),a.language)},matchGrammar:function(e,t,n,a,o,s,l){for(var c in n)if(n.hasOwnProperty(c)&&n[c]){var u=n[c];u=Array.isArray(u)?u:[u];for(var d=0;d<u.length;++d){if(l&&l==c+","+d)return;var f=u[d],p=f.inside,h=!!f.lookbehind,g=!!f.greedy,m=0,y=f.alias;if(g&&!f.pattern.global){var b=f.pattern.toString().match(/[imsuy]*$/)[0];f.pattern=RegExp(f.pattern.source,b+"g")}f=f.pattern||f;for(var v=a,k=o;v<t.length;k+=t[v].length,++v){var w=t[v];if(t.length>e.length)return;if(!(w instanceof i)){if(g&&v!=t.length-1){if(f.lastIndex=k,!(T=f.exec(e)))break;for(var x=T.index+(h&&T[1]?T[1].length:0),E=T.index+T[0].length,S=v,A=k,_=t.length;S<_&&(A<E||!t[S].type&&!t[S-1].greedy);++S)x>=(A+=t[S].length)&&(++v,k=A);if(t[v]instanceof i)continue;F=S-v,w=e.slice(k,A),T.index-=k}else{f.lastIndex=0;var T=f.exec(w),F=1}if(T){h&&(m=T[1]?T[1].length:0);E=(x=T.index+m)+(T=T[0].slice(m)).length;var C=w.slice(0,x),j=w.slice(E),O=[v,F];C&&(++v,k+=C.length,O.push(C));var P=new i(c,p?r.tokenize(T,p):T,y,T,g);if(O.push(P),j&&O.push(j),Array.prototype.splice.apply(t,O),1!=F&&r.matchGrammar(e,t,n,v,k,!0,c+","+d),s)break}else if(s)break}}}}},tokenize:function(e,t){var n=[e],i=t.rest;if(i){for(var a in i)t[a]=i[a];delete t.rest}return r.matchGrammar(e,n,t,0,0,!1),n},hooks:{all:{},add:function(e,t){var n=r.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=r.hooks.all[e];if(n&&n.length)for(var i,a=0;i=n[a++];)i(t)}},Token:i};function i(e,t,n,r,i){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length,this.greedy=!!i}if(e.Prism=r,i.stringify=function(e,t){if("string"==typeof e)return e;if(Array.isArray(e))return e.map((function(e){return i.stringify(e,t)})).join("");var n={type:e.type,content:i.stringify(e.content,t),tag:"span",classes:["token",e.type],attributes:{},language:t};if(e.alias){var a=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(n.classes,a)}r.hooks.run("wrap",n);var o=Object.keys(n.attributes).map((function(e){return e+'="'+(n.attributes[e]||"").replace(/"/g,"&quot;")+'"'})).join(" ");return"<"+n.tag+' class="'+n.classes.join(" ")+'"'+(o?" "+o:"")+">"+n.content+"</"+n.tag+">"},!e.document)return e.addEventListener?(r.disableWorkerMessageHandler||e.addEventListener("message",(function(t){var n=JSON.parse(t.data),i=n.language,a=n.code,o=n.immediateClose;e.postMessage(r.highlight(a,r.languages[i],i)),o&&e.close()}),!1),r):r;var a=r.util.currentScript();if(a&&(r.filename=a.src,a.hasAttribute("data-manual")&&(r.manual=!0)),!r.manual){function o(){r.manual||r.highlightAll()}var s=document.readyState;"loading"===s||"interactive"===s&&a&&a.defer?document.addEventListener("DOMContentLoaded",o):window.requestAnimationFrame?window.requestAnimationFrame(o):window.setTimeout(o,16)}return r}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});e.exports&&(e.exports=n),void 0!==t&&(t.Prism=n),n.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:(?!<!--)[^"'\]]|"[^"]*"|'[^']*'|<!--[\s\S]*?-->)*\]\s*)?>/i,greedy:!0},cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},n.languages.markup.tag.inside["attr-value"].inside.entity=n.languages.markup.entity,n.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(n.languages.markup.tag,"addInlined",{value:function(e,t){var r={};r["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:n.languages[t]},r.cdata=/^<!\[CDATA\[|\]\]>$/i;var i={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:r}};i["language-"+t]={pattern:/[\s\S]+/,inside:n.languages[t]};var a={};a[e]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,e),"i"),lookbehind:!0,greedy:!0,inside:i},n.languages.insertBefore("markup","cdata",a)}}),n.languages.xml=n.languages.extend("markup",{}),n.languages.html=n.languages.markup,n.languages.mathml=n.languages.markup,n.languages.svg=n.languages.markup,function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+[\s\S]*?(?:;|(?=\s*\{))/,inside:{rule:/@[\w-]+/}},url:{pattern:RegExp("url\\((?:"+t.source+"|[^\n\r()]*)\\)","i"),inside:{function:/^url/i,punctuation:/^\(|\)$/}},selector:RegExp("[^{}\\s](?:[^{};\"']|"+t.source+")*?(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),e.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:n.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:e.languages.css}},alias:"language-css"}},n.tag))}(n),n.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},n.languages.javascript=n.languages.extend("clike",{"class-name":[n.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,function:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/--|\+\+|\*\*=?|=>|&&|\|\||[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?[.?]?|[~:]/}),n.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,n.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*(?:$|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:n.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:n.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:n.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:n.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),n.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:n.languages.javascript}},string:/[\s\S]+/}}}),n.languages.markup&&n.languages.markup.tag.addInlined("script","javascript"),n.languages.js=n.languages.javascript,"undefined"!=typeof self&&self.Prism&&self.document&&document.querySelector&&(self.Prism.fileHighlight=function(e){e=e||document;var t={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"};Array.prototype.slice.call(e.querySelectorAll("pre[data-src]")).forEach((function(e){if(!e.hasAttribute("data-src-loaded")){for(var r,i=e.getAttribute("data-src"),a=e,o=/\blang(?:uage)?-([\w-]+)\b/i;a&&!o.test(a.className);)a=a.parentNode;if(a&&(r=(e.className.match(o)||[,""])[1]),!r){var s=(i.match(/\.(\w+)$/)||[,""])[1];r=t[s]||s}var l=document.createElement("code");l.className="language-"+r,e.textContent="",l.textContent="Loadingâ¦",e.appendChild(l);var c=new XMLHttpRequest;c.open("GET",i,!0),c.onreadystatechange=function(){4==c.readyState&&(c.status<400&&c.responseText?(l.textContent=c.responseText,n.highlightElement(l),e.setAttribute("data-src-loaded","")):c.status>=400?l.textContent="â Error "+c.status+" while fetching file: "+c.statusText:l.textContent="â Error: File does not exist or is empty")},c.send(null)}}))},document.addEventListener("DOMContentLoaded",(function(){self.Prism.fileHighlight()})))}).call(this,n(4))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){!function(e){function t(e,t){return e=e.replace(/<inner>/g,"(?:\\\\.|[^\\\\\\n\r]|(?:\r?\n|\r)(?!\r?\n|\r))"),t&&(e=e+"|"+e.replace(/_/g,"\\*")),RegExp("((?:^|[^\\\\])(?:\\\\{2})*)(?:"+e+")")}var n="(?:\\\\.|``.+?``|`[^`\r\\n]+`|[^\\\\|\r\\n`])+",r="\\|?__(?:\\|__)+\\|?(?:(?:\r?\n|\r)|$)".replace(/__/g,n),i="\\|?[ \t]*:?-{3,}:?[ \t]*(?:\\|[ \t]*:?-{3,}:?[ \t]*)+\\|?(?:\r?\n|\r)";e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+r+i+"(?:"+r+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+r+i+")(?:"+r+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(n),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+r+")"+i+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+r+"$"),inside:{"table-header":{pattern:RegExp(n),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/(^[ \t]*(?:\r?\n|\r))(?: {4}|\t).+(?:(?:\r?\n|\r)(?: {4}|\t).+)*/m,lookbehind:!0,alias:"keyword"},{pattern:/``.+?``|`[^`\r\n]+`/,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\r?\n|\r))[\s\S]+?(?=(?:\r?\n|\r)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\r?\n|\r)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#+.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:t("__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:t("_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:t("(~~?)(?:(?!~)<inner>)+?\\2",!1),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},url:{pattern:t('!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\t ]+"(?:\\\\.|[^"\\\\])*")?\\)| ?\\[(?:(?!\\])<inner>)+\\])',!1),lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(\[)[^\]]+(?=\]$)/,lookbehind:!0},content:{pattern:/(^!?\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},string:{pattern:/"(?:\\.|[^"\\])*"(?=\)$)/}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,r=t.length;n<r;n++){var i=t[n];if("code"===i.type){var a=i.content[1],o=i.content[3];if(a&&o&&"code-language"===a.type&&"code-block"===o.type&&"string"==typeof a.content){var s="language-"+a.content.trim().split(/\s+/)[0].toLowerCase();o.alias?"string"==typeof o.alias?o.alias=[o.alias,s]:o.alias.push(s):o.alias=[s]}}else e(i.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",r=0,i=t.classes.length;r<i;r++){var a=t.classes[r],o=/language-(.+)/.exec(a);if(o){n=o[1];break}}var s=e.languages[n];if(s){var l=t.content.replace(/&lt;/g,"<").replace(/&amp;/g,"&");t.content=e.highlight(l,s,n)}else if(n&&"none"!==n&&e.plugins.autoloader){var c="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=c,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(c);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}})),e.languages.md=e.languages.markdown}(Prism)},function(e,t){Prism.languages.wiki=Prism.languages.extend("markup",{"block-comment":{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0,alias:"comment"},heading:{pattern:/^(=+).+?\1/m,inside:{punctuation:/^=+|=+$/,important:/.+/}},emphasis:{pattern:/('{2,5}).+?\1/,inside:{"bold-italic":{pattern:/(''''').+?(?=\1)/,lookbehind:!0,alias:["bold","italic"]},bold:{pattern:/(''')[^'](?:.*?[^'])?(?=\1)/,lookbehind:!0},italic:{pattern:/('')[^'](?:.*?[^'])?(?=\1)/,lookbehind:!0},punctuation:/^''+|''+$/}},hr:{pattern:/^-{4,}/m,alias:"punctuation"},url:[/ISBN +(?:97[89][ -]?)?(?:\d[ -]?){9}[\dx]\b|(?:RFC|PMID) +\d+/i,/\[\[.+?\]\]|\[.+?\]/],variable:[/__[A-Z]+__/,/\{{3}.+?\}{3}/,/\{\{.+?\}\}/],symbol:[/^#redirect/im,/~{3,5}/],"table-tag":{pattern:/((?:^|[|!])[|!])[^|\r\n]+\|(?!\|)/m,lookbehind:!0,inside:{"table-bar":{pattern:/\|$/,alias:"punctuation"},rest:Prism.languages.markup.tag.inside}},punctuation:/^(?:\{\||\|\}|\|-|[*#:;!|])|\|\||!!/m}),Prism.languages.insertBefore("wiki","tag",{nowiki:{pattern:/<(nowiki|pre|source)\b[\s\S]*?>[\s\S]*?<\/\1>/i,inside:{tag:{pattern:/<(?:nowiki|pre|source)\b[\s\S]*?>|<\/(?:nowiki|pre|source)>/i,inside:Prism.languages.markup.tag.inside}}}})},function(e,t){"undefined"!=typeof self&&self.Prism&&self.document&&Prism.languages.markup&&(Prism.plugins.UnescapedMarkup=!0,Prism.hooks.add("before-highlightall",(function(e){e.selector+=", [class*='lang-'] script[type='text/plain'], [class*='language-'] script[type='text/plain'], script[type='text/plain'][class*='lang-'], script[type='text/plain'][class*='language-']"})),Prism.hooks.add("before-sanity-check",(function(e){if((e.element.matches||e.element.msMatchesSelector).call(e.element,"script[type='text/plain']")){var t=document.createElement("code");return(n=document.createElement("pre")).className=t.className=e.element.className,e.element.dataset&&Object.keys(e.element.dataset).forEach((function(t){Object.prototype.hasOwnProperty.call(e.element.dataset,t)&&(n.dataset[t]=e.element.dataset[t])})),e.code=e.code.replace(/&lt;\/script(>|&gt;)/gi,"<\/script>"),t.textContent=e.code,n.appendChild(t),e.element.parentNode.replaceChild(n,e.element),void(e.element=t)}var n=e.element.parentNode;!e.code&&n&&"pre"==n.nodeName.toLowerCase()&&e.element.childNodes.length&&"#comment"==e.element.childNodes[0].nodeName&&(e.element.textContent=e.code=e.element.childNodes[0].textContent)})))},function(e,t,n){var r=n(9);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(0)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(0)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){var r=n(13);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(0)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t){!function(){if("undefined"!=typeof self&&self.Prism&&self.document){var e=[],t={},n=function(){};Prism.plugins.toolbar={};var r=Prism.plugins.toolbar.registerButton=function(n,r){var i;i="function"==typeof r?r:function(e){var t;return"function"==typeof r.onClick?((t=document.createElement("button")).type="button",t.addEventListener("click",(function(){r.onClick.call(this,e)}))):"string"==typeof r.url?(t=document.createElement("a")).href=r.url:t=document.createElement("span"),r.className&&t.classList.add(r.className),t.textContent=r.text,t},n in t?console.warn('There is a button with the key "'+n+'" registered already.'):e.push(t[n]=i)},i=Prism.plugins.toolbar.hook=function(r){var i=r.element.parentNode;if(i&&/pre/i.test(i.nodeName)&&!i.parentNode.classList.contains("code-toolbar")){var a=document.createElement("div");a.classList.add("code-toolbar"),i.parentNode.insertBefore(a,i),a.appendChild(i);var o=document.createElement("div");o.classList.add("toolbar"),document.body.hasAttribute("data-toolbar-order")&&(e=document.body.getAttribute("data-toolbar-order").split(",").map((function(e){return t[e]||n}))),e.forEach((function(e){var t=e(r);if(t){var n=document.createElement("div");n.classList.add("toolbar-item"),n.appendChild(t),o.appendChild(n)}})),a.appendChild(o)}};r("label",(function(e){var t=e.element.parentNode;if(t&&/pre/i.test(t.nodeName)&&t.hasAttribute("data-label")){var n,r,i=t.getAttribute("data-label");try{r=document.querySelector("template#"+i)}catch(e){}return r?n=r.content:(t.hasAttribute("data-url")?(n=document.createElement("a")).href=t.getAttribute("data-url"):n=document.createElement("span"),n.textContent=i),n}})),Prism.hooks.add("complete",i)}}()},function(e,t,n){var r=n(16);"string"==typeof r&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};n(0)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){},function(e,t,n){!function(){if("undefined"!=typeof self&&self.Prism&&self.document)if(Prism.plugins.toolbar){var e=window.ClipboardJS||void 0;e||(e=n(18));var t=[];if(!e){var r=document.createElement("script"),i=document.querySelector("head");r.onload=function(){if(e=window.ClipboardJS)for(;t.length;)t.pop()()},r.src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js",i.appendChild(r)}Prism.plugins.toolbar.registerButton("copy-to-clipboard",(function(n){var r=document.createElement("button");return r.textContent="Copy",e?i():t.push(i),r;function i(){var t=new e(r,{text:function(){return n.code}});t.on("success",(function(){r.textContent="Copied!",a()})),t.on("error",(function(){r.textContent="Press Ctrl+C to copy",a()}))}function a(){setTimeout((function(){r.textContent="Copy"}),5e3)}}))}else console.warn("Copy to Clipboard plugin loaded before Toolbar plugin.")}()},function(e,t,n){
/*!
 * clipboard.js v2.0.4
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT Â© Zeno Rocha
 */
var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(1)),o=l(n(3)),s=l(n(4));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.resolveOptions(n),r.listenClick(e),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===r(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,s.default)(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return u("action",e)}},{key:"defaultTarget",value:function(e){var t=u("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return u("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach((function(e){n=n&&!!document.queryCommandSupported(e)})),n}}]),t}(o.default);function u(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}e.exports=c},function(e,t,n){"use strict";var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(2),s=(r=o)&&r.__esModule?r:{default:r},l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return a(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=(0,s.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,s.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=l},function(e,t){e.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var r=window.getSelection(),i=document.createRange();i.selectNodeContents(e),r.removeAllRanges(),r.addRange(i),t=r.toString()}return t}},function(e,t){function n(){}n.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function i(){r.off(e,i),t.apply(n,arguments)}return i._=t,this.on(e,i,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var a=0,o=r.length;a<o;a++)r[a].fn!==t&&r[a].fn._!==t&&i.push(r[a]);return i.length?n[e]=i:delete n[e],this}},e.exports=n},function(e,t,n){var r=n(5),i=n(6);e.exports=function(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!r.string(t))throw new TypeError("Second argument must be a String");if(!r.fn(n))throw new TypeError("Third argument must be a Function");if(r.node(e))return function(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}(e,t,n);if(r.nodeList(e))return function(e,t,n){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,n)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,n)}))}}}(e,t,n);if(r.string(e))return function(e,t,n){return i(document.body,e,t,n)}(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},function(e,t,n){var r=n(7);function i(e,t,n,r,i){var o=a.apply(this,arguments);return e.addEventListener(n,o,i),{destroy:function(){e.removeEventListener(n,o,i)}}}function a(e,t,n,i){return function(n){n.delegateTarget=r(n.target,t),n.delegateTarget&&i.call(e,n)}}e.exports=function(e,t,n,r,a){return"function"==typeof e.addEventListener?i.apply(null,arguments):"function"==typeof n?i.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return i(e,t,n,r,a)})))}},function(e,t){var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}e.exports=function(e,t){for(;e&&e.nodeType!==n;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}}])},e.exports=r()},function(e,t,n){!function(){var t=Object.assign||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e};function n(e){this.defaults=t({},e)}function r(e){for(var t=0,n=0;n<e.length;++n)e.charCodeAt(n)=="\t".charCodeAt(0)&&(t+=3);return e.length+t}n.prototype={setDefaults:function(e){this.defaults=t(this.defaults,e)},normalize:function(e,n){for(var r in n=t(this.defaults,n)){var i=r.replace(/-(\w)/g,(function(e,t){return t.toUpperCase()}));"normalize"!==r&&"setDefaults"!==i&&n[r]&&this[i]&&(e=this[i].call(this,e,n[r]))}return e},leftTrim:function(e){return e.replace(/^\s+/,"")},rightTrim:function(e){return e.replace(/\s+$/,"")},tabsToSpaces:function(e,t){return t=0|t||4,e.replace(/\t/g,new Array(++t).join(" "))},spacesToTabs:function(e,t){return t=0|t||4,e.replace(RegExp(" {"+t+"}","g"),"\t")},removeTrailing:function(e){return e.replace(/\s*?$/gm,"")},removeInitialLineFeed:function(e){return e.replace(/^(?:\r?\n|\r)/,"")},removeIndent:function(e){var t=e.match(/^[^\S\n\r]*(?=\S)/gm);return t&&t[0].length?(t.sort((function(e,t){return e.length-t.length})),t[0].length?e.replace(RegExp("^"+t[0],"gm"),""):e):e},indent:function(e,t){return e.replace(/^[^\S\n\r]*(?=\S)/gm,new Array(++t).join("\t")+"$&")},breakLines:function(e,t){t=!0===t?80:0|t||80;for(var n=e.split("\n"),i=0;i<n.length;++i)if(!(r(n[i])<=t)){for(var a=n[i].split(/(\s+)/g),o=0,s=0;s<a.length;++s){var l=r(a[s]);t<(o+=l)&&(a[s]="\n"+a[s],o=l)}n[i]=a.join("")}return n.join("\n")}},e.exports&&(e.exports=n),"undefined"!=typeof Prism&&(Prism.plugins.NormalizeWhitespace=new n({"remove-trailing":!0,"remove-indent":!0,"left-trim":!0,"right-trim":!0}),Prism.hooks.add("before-sanity-check",(function(e){var t=Prism.plugins.NormalizeWhitespace;if(!e.settings||!1!==e.settings["whitespace-normalization"])if(e.element&&e.element.parentNode||!e.code){var n=e.element.parentNode,r=/(?:^|\s)no-whitespace-normalization(?:\s|$)/;if(e.code&&n&&"pre"===n.nodeName.toLowerCase()&&!r.test(n.className)&&!r.test(e.element.className)){for(var i=n.childNodes,a="",o="",s=!1,l=0;l<i.length;++l){var c=i[l];c==e.element?s=!0:"#text"===c.nodeName&&(s?o+=c.nodeValue:a+=c.nodeValue,n.removeChild(c),--l)}if(e.element.children.length&&Prism.plugins.KeepMarkup){var u=a+e.element.innerHTML+o;e.element.innerHTML=t.normalize(u,e.settings),e.code=e.element.textContent}else e.code=a+e.code+o,e.code=t.normalize(e.code,e.settings)}}else e.code=t.normalize(e.code,e.settings)})))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGlwYm9hcmQvZGlzdC9jbGlwYm9hcmQubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL3ByaXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1tYXJrZG93bi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS13aWtpLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9wbHVnaW5zL3VuZXNjYXBlZC1tYXJrdXAvcHJpc20tdW5lc2NhcGVkLW1hcmt1cC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvcGx1Z2lucy91bmVzY2FwZWQtbWFya3VwL3ByaXNtLXVuZXNjYXBlZC1tYXJrdXAuY3NzPzU5YTAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvdGhlbWVzL3ByaXNtLmNzcz85ZDE1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL3RoZW1lcy9wcmlzbS1va2FpZGlhLmNzcz9lMmViIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL3BsdWdpbnMvdG9vbGJhci9wcmlzbS10b29sYmFyLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9wbHVnaW5zL3Rvb2xiYXIvcHJpc20tdG9vbGJhci5jc3M/NmNlYyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc21qcy9wbHVnaW5zL2NvcHktdG8tY2xpcGJvYXJkL3ByaXNtLWNvcHktdG8tY2xpcGJvYXJkLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xpcGJvYXJkL2Rpc3QvY2xpcGJvYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcmlzbWpzL3BsdWdpbnMvbm9ybWFsaXplLXdoaXRlc3BhY2UvcHJpc20tbm9ybWFsaXplLXdoaXRlc3BhY2UubWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm9wdGlvbnMiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJsZW5ndGgiLCJpdGVtIiwiaWQiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImoiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsIm9iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsImJ0b2EiLCJjb25jYXQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsIl9pIiwiX2RvbVN0eWxlIiwiZGVmYXVsdCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImEiLCJ1IiwiVHlwZUVycm9yIiwidGhpcyIsIlJlZmVyZW5jZUVycm9yIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJyZXNvbHZlT3B0aW9ucyIsImxpc3RlbkNsaWNrIiwic2V0UHJvdG90eXBlT2YiLCJhcmd1bWVudHMiLCJhY3Rpb24iLCJkZWZhdWx0QWN0aW9uIiwiZGVmYXVsdFRhcmdldCIsInRleHQiLCJkZWZhdWx0VGV4dCIsImNvbnRhaW5lciIsImJvZHkiLCJsaXN0ZW5lciIsIm9uQ2xpY2siLCJkZWxlZ2F0ZVRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJjbGlwYm9hcmRBY3Rpb24iLCJ0cmlnZ2VyIiwiZW1pdHRlciIsImRlc3Ryb3kiLCJxdWVyeUNvbW1hbmRTdXBwb3J0ZWQiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJpbml0U2VsZWN0aW9uIiwic2VsZWN0ZWRUZXh0Iiwic2VsZWN0RmFrZSIsInNlbGVjdFRhcmdldCIsImRvY3VtZW50RWxlbWVudCIsInJlbW92ZUZha2UiLCJmYWtlSGFuZGxlckNhbGxiYWNrIiwiZmFrZUhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZmFrZUVsZW0iLCJmb250U2l6ZSIsImJvcmRlciIsInBhZGRpbmciLCJtYXJnaW4iLCJwb3NpdGlvbiIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwidG9wIiwiY29weVRleHQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXhlY0NvbW1hbmQiLCJoYW5kbGVSZXN1bHQiLCJlbWl0IiwiY2xlYXJTZWxlY3Rpb24iLCJmb2N1cyIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsInNldCIsIl9hY3Rpb24iLCJub2RlVHlwZSIsIl90YXJnZXQiLCJub2RlTmFtZSIsInNlbGVjdCIsInNldFNlbGVjdGlvblJhbmdlIiwicmVtb3ZlQXR0cmlidXRlIiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJhZGRSYW5nZSIsInRvU3RyaW5nIiwib24iLCJmbiIsImN0eCIsIm9uY2UiLCJvZmYiLCJhcHBseSIsIl8iLCJzbGljZSIsImgiLCJzdHJpbmciLCJub2RlIiwiZiIsIm5vZGVMaXN0IiwiQXJyYXkiLCJIVE1MRWxlbWVudCIsIlN0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXAiLCJFbGVtZW50IiwibWF0Y2hlcyIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIlByaXNtIiwiX3NlbGYiLCJsYW5nIiwidW5pcXVlSWQiLCJtYW51YWwiLCJkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ1dGlsIiwiZW5jb2RlIiwidG9rZW5zIiwiVG9rZW4iLCJ0eXBlIiwiY29udGVudCIsImFsaWFzIiwiaXNBcnJheSIsInJlcGxhY2UiLCJvYmpJZCIsImNsb25lIiwiZGVlcENsb25lIiwidmlzaXRlZCIsInYiLCJnZXRMYW5ndWFnZSIsImVsZW1lbnQiLCJ0ZXN0IiwiY2xhc3NOYW1lIiwicGFyZW50RWxlbWVudCIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJjdXJyZW50U2NyaXB0IiwiZXJyIiwic3JjIiwiZXhlYyIsInN0YWNrIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicmVkZWYiLCJpbnNpZGUiLCJiZWZvcmUiLCJyb290IiwiZ3JhbW1hciIsInJldCIsInRva2VuIiwibmV3VG9rZW4iLCJvbGQiLCJERlMiLCJjYWxsYmFjayIsInByb3BlcnR5VHlwZSIsInBsdWdpbnMiLCJoaWdobGlnaHRBbGwiLCJhc3luYyIsImhpZ2hsaWdodEFsbFVuZGVyIiwiZW52Iiwic2VsZWN0b3IiLCJob29rcyIsInJ1biIsImVsZW1lbnRzIiwiaGlnaGxpZ2h0RWxlbWVudCIsImxhbmd1YWdlIiwicGFyZW50IiwiY29kZSIsInRleHRDb250ZW50IiwiaW5zZXJ0SGlnaGxpZ2h0ZWRDb2RlIiwiaGlnaGxpZ2h0ZWRDb2RlIiwiaW5uZXJIVE1MIiwiV29ya2VyIiwid29ya2VyIiwiZmlsZW5hbWUiLCJvbm1lc3NhZ2UiLCJldnQiLCJkYXRhIiwicG9zdE1lc3NhZ2UiLCJpbW1lZGlhdGVDbG9zZSIsImhpZ2hsaWdodCIsInRva2VuaXplIiwibWF0Y2hHcmFtbWFyIiwic3RyYXJyIiwic3RhcnRQb3MiLCJvbmVzaG90IiwicGF0dGVybnMiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsImxvb2tiZWhpbmRMZW5ndGgiLCJnbG9iYWwiLCJmbGFncyIsIlJlZ0V4cCIsInNvdXJjZSIsInBvcyIsInN0ciIsImxhc3RJbmRleCIsImZyb20iLCJ0byIsImsiLCJsZW4iLCJkZWxOdW0iLCJhZnRlciIsImFyZ3MiLCJ3cmFwcGVkIiwic3BsaWNlIiwicmVzdCIsImFkZCIsImNhbGxiYWNrcyIsIm1hdGNoZWRTdHIiLCJ0YWciLCJjbGFzc2VzIiwiYWxpYXNlcyIsIm1lc3NhZ2UiLCJwYXJzZSIsImNsb3NlIiwic2NyaXB0IiwiaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrIiwicmVhZHlTdGF0ZSIsImRlZmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIldvcmtlckdsb2JhbFNjb3BlIiwic2VsZiIsIm1hcmt1cCIsInRhZ05hbWUiLCJpbmNsdWRlZENkYXRhSW5zaWRlIiwiZGVmIiwieG1sIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsImFkZElubGluZWQiLCJjbGlrZSIsImphdmFzY3JpcHQiLCJqcyIsImZpbGVIaWdobGlnaHQiLCJFeHRlbnNpb25zIiwicHJlIiwiZXh0ZW5zaW9uIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsInNlbmQiLCJnIiwiRnVuY3Rpb24iLCJtYXJrZG93biIsImJsb2NrcXVvdGUiLCJ0YWJsZSIsInB1bmN0dWF0aW9uIiwidGl0bGUiLCJociIsInZhcmlhYmxlIiwiYm9sZCIsIml0YWxpYyIsInN0cmlrZSIsInVybCIsInRyaW0iLCJzcGxpdCIsImF1dG9sb2FkZXIiLCJEYXRlIiwidmFsdWVPZiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxvYWRMYW5ndWFnZXMiLCJnZXRFbGVtZW50QnlJZCIsIm1kIiwid2lraSIsImhlYWRpbmciLCJpbXBvcnRhbnQiLCJlbXBoYXNpcyIsInN5bWJvbCIsIm5vd2lraSIsIlVuZXNjYXBlZE1hcmt1cCIsImRhdGFzZXQiLCJyZXBsYWNlQ2hpbGQiLCJsb2NhbHMiLCJ0b29sYmFyIiwicmVnaXN0ZXJCdXR0b24iLCJocmVmIiwiY2xhc3NMaXN0IiwiY29uc29sZSIsIndhcm4iLCJob29rIiwiY29udGFpbnMiLCJDbGlwYm9hcmRKUyIsIm9ubG9hZCIsInBvcCIsImZhY3RvcnkiLCJfdHlwZW9mIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2NsaXBib2FyZEFjdGlvbjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3RpbnlFbWl0dGVyMiIsIl9nb29kTGlzdGVuZXIyIiwiQ2xpcGJvYXJkIiwiX0VtaXR0ZXIiLCJpbnN0YW5jZSIsIl9jbGFzc0NhbGxDaGVjayIsIl90aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfaW5oZXJpdHMiLCJ1bmRlZmluZWQiLCJfdGhpczIiLCJnZXRBdHRyaWJ1dGVWYWx1ZSIsImFjdGlvbnMiLCJzdXBwb3J0Iiwic3VmZml4IiwiYXR0cmlidXRlIiwiX3NlbGVjdCIsIl9zZWxlY3QyIiwiQ2xpcGJvYXJkQWN0aW9uIiwiaXNSVEwiLCJ5UG9zaXRpb24iLCJzdWNjZWVkZWQiLCJpc1JlYWRPbmx5Iiwic2VsZWN0aW9uIiwicmFuZ2UiLCJFIiwiZXZ0QXJyIiwiZXZ0cyIsImxpdmVFdmVudHMiLCJpcyIsImRlbGVnYXRlIiwibGlzdGVuTm9kZSIsImxpc3Rlbk5vZGVMaXN0IiwibGlzdGVuU2VsZWN0b3IiLCJjbG9zZXN0IiwiX2RlbGVnYXRlIiwidXNlQ2FwdHVyZSIsImxpc3RlbmVyRm4iLCJET0NVTUVOVF9OT0RFX1RZUEUiLCJwcm90byIsImFzc2lnbiIsImRlZmF1bHRzIiwiY2hhckNvZGVBdCIsInNldERlZmF1bHRzIiwibm9ybWFsaXplIiwidG9VcHBlckNhc2UiLCJsZWZ0VHJpbSIsInJpZ2h0VHJpbSIsInRhYnNUb1NwYWNlcyIsInNwYWNlc1RvVGFicyIsInJlbW92ZVRyYWlsaW5nIiwicmVtb3ZlSW5pdGlhbExpbmVGZWVkIiwicmVtb3ZlSW5kZW50Iiwic29ydCIsImluZGVudCIsImJyZWFrTGluZXMiLCJOb3JtYWxpemVXaGl0ZXNwYWNlIiwic2V0dGluZ3MiLCJub2RlVmFsdWUiLCJjaGlsZHJlbiIsIktlZXBNYXJrdXAiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZB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YUFBYTdOLEVBQUU0TixLQUFLM0wsRUFBRTBMLFFBQVFFLFdBQVcsQ0FBQyxJQUFJLElBQUkzTyxFQUFFa0IsRUFBRTBFLFdBQVduRixFQUFFLEdBQUc4RyxFQUFFLEdBQUd4RixHQUFFLEVBQUc5QixFQUFFLEVBQUVBLEVBQUVELEVBQUVxRCxTQUFTcEQsRUFBRSxDQUFDLElBQUlJLEVBQUVMLEVBQUVDLEdBQUdJLEdBQUcwQyxFQUFFMEwsUUFBUTFNLEdBQUUsRUFBRyxVQUFVMUIsRUFBRThLLFdBQVdwSixFQUFFd0YsR0FBR2xILEVBQUVpZCxVQUFVN2MsR0FBR0osRUFBRWlkLFVBQVVwYyxFQUFFMkUsWUFBWXhGLEtBQUtKLEdBQUcsR0FBRzhDLEVBQUUwTCxRQUFROE8sU0FBU2xhLFFBQVErSixNQUFNZ0QsUUFBUW9OLFdBQVcsQ0FBQyxJQUFJaFcsRUFBRS9HLEVBQUVzQyxFQUFFMEwsUUFBUTJDLFVBQVU3SixFQUFFeEUsRUFBRTBMLFFBQVEyQyxVQUFVM1AsRUFBRSthLFVBQVVoVixFQUFFekUsRUFBRXNhLFVBQVV0YSxFQUFFaU8sS0FBS2pPLEVBQUUwTCxRQUFRd0MsaUJBQWlCbE8sRUFBRWlPLEtBQUt2USxFQUFFc0MsRUFBRWlPLEtBQUt6SixFQUFFeEUsRUFBRWlPLEtBQUt2UCxFQUFFK2EsVUFBVXpaLEVBQUVpTyxLQUFLak8sRUFBRXNhLGdCQUFnQnRhLEVBQUVpTyxLQUFLdlAsRUFBRSthLFVBQVV6WixFQUFFaU8sS0FBS2pPLEVBQUVzYSxjQUFwNUUiLCJmaWxlIjoianMvaGlnaGxpZ2h0LXN5bnRheC5qcz85MDBkYTZlZWY0NTJkMjM1OGVlOCIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZXMgPSBbXTtcbiAgdmFyIG5ld1N0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY3NzID0gaXRlbVsxXTtcbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdO1xuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH07XG5cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcGFydHM6IFtwYXJ0XVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrKztcblxuICAgICAgZm9yICg7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHJlZnM6IDEsXG4gICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG4gICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgZG9tU3R5bGUucmVmcy0tO1xuICAgICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgICBhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtYXlSZW1vdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2RvbVN0eWxlID0gbWF5UmVtb3ZlW19pXTtcblxuICAgICAgaWYgKF9kb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgX2RvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bX2RvbVN0eWxlLmlkXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59OyIsIi8qIVxuICogY2xpcGJvYXJkLmpzIHYyLjAuNFxuICogaHR0cHM6Ly96ZW5vcm9jaGEuZ2l0aHViLmlvL2NsaXBib2FyZC5qc1xuICogXG4gKiBMaWNlbnNlZCBNSVQgwqkgWmVubyBSb2NoYVxuICovXG4hZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkNsaXBib2FyZEpTPWUoKTp0LkNsaXBib2FyZEpTPWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihuKXt2YXIgbz17fTtmdW5jdGlvbiByKHQpe2lmKG9bdF0pcmV0dXJuIG9bdF0uZXhwb3J0czt2YXIgZT1vW3RdPXtpOnQsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gblt0XS5jYWxsKGUuZXhwb3J0cyxlLGUuZXhwb3J0cyxyKSxlLmw9ITAsZS5leHBvcnRzfXJldHVybiByLm09bixyLmM9byxyLmQ9ZnVuY3Rpb24odCxlLG4pe3Iubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LHIucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxyLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPXIoZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihyLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpci5kKG4sbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gbn0sci5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiByLmQoZSxcImFcIixlKSxlfSxyLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LHIucD1cIlwiLHIoci5zPTApfShbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZvKHQucHJvdG90eXBlLGUpLG4mJm8odCxuKSx0fX0oKSxhPW8obigxKSksYz1vKG4oMykpLHU9byhuKDQpKTtmdW5jdGlvbiBvKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX12YXIgbD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKHQsZSl7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxvKTt2YXIgbj1mdW5jdGlvbih0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hZXx8XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDplfSh0aGlzLChvLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pKS5jYWxsKHRoaXMpKTtyZXR1cm4gbi5yZXNvbHZlT3B0aW9ucyhlKSxuLmxpc3RlbkNsaWNrKHQpLG59cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIGUpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSk6dC5fX3Byb3RvX189ZSl9KG8sYy5kZWZhdWx0KSxpKG8sW3trZXk6XCJyZXNvbHZlT3B0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3RoaXMuYWN0aW9uPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQuYWN0aW9uP3QuYWN0aW9uOnRoaXMuZGVmYXVsdEFjdGlvbix0aGlzLnRhcmdldD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRhcmdldD90LnRhcmdldDp0aGlzLmRlZmF1bHRUYXJnZXQsdGhpcy50ZXh0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGV4dD90LnRleHQ6dGhpcy5kZWZhdWx0VGV4dCx0aGlzLmNvbnRhaW5lcj1cIm9iamVjdFwiPT09cih0LmNvbnRhaW5lcik/dC5jb250YWluZXI6ZG9jdW1lbnQuYm9keX19LHtrZXk6XCJsaXN0ZW5DbGlja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5saXN0ZW5lcj0oMCx1LmRlZmF1bHQpKHQsXCJjbGlja1wiLGZ1bmN0aW9uKHQpe3JldHVybiBlLm9uQ2xpY2sodCl9KX19LHtrZXk6XCJvbkNsaWNrXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5kZWxlZ2F0ZVRhcmdldHx8dC5jdXJyZW50VGFyZ2V0O3RoaXMuY2xpcGJvYXJkQWN0aW9uJiYodGhpcy5jbGlwYm9hcmRBY3Rpb249bnVsbCksdGhpcy5jbGlwYm9hcmRBY3Rpb249bmV3IGEuZGVmYXVsdCh7YWN0aW9uOnRoaXMuYWN0aW9uKGUpLHRhcmdldDp0aGlzLnRhcmdldChlKSx0ZXh0OnRoaXMudGV4dChlKSxjb250YWluZXI6dGhpcy5jb250YWluZXIsdHJpZ2dlcjplLGVtaXR0ZXI6dGhpc30pfX0se2tleTpcImRlZmF1bHRBY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gcyhcImFjdGlvblwiLHQpfX0se2tleTpcImRlZmF1bHRUYXJnZXRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1zKFwidGFyZ2V0XCIsdCk7aWYoZSlyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX19LHtrZXk6XCJkZWZhdWx0VGV4dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBzKFwidGV4dFwiLHQpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubGlzdGVuZXIuZGVzdHJveSgpLHRoaXMuY2xpcGJvYXJkQWN0aW9uJiYodGhpcy5jbGlwYm9hcmRBY3Rpb24uZGVzdHJveSgpLHRoaXMuY2xpcGJvYXJkQWN0aW9uPW51bGwpfX1dLFt7a2V5OlwiaXNTdXBwb3J0ZWRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpbXCJjb3B5XCIsXCJjdXRcIl0sZT1cInN0cmluZ1wiPT10eXBlb2YgdD9bdF06dCxuPSEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24odCl7bj1uJiYhIWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCh0KX0pLG59fV0pLG99KCk7ZnVuY3Rpb24gcyh0LGUpe3ZhciBuPVwiZGF0YS1jbGlwYm9hcmQtXCIrdDtpZihlLmhhc0F0dHJpYnV0ZShuKSlyZXR1cm4gZS5nZXRBdHRyaWJ1dGUobil9dC5leHBvcnRzPWx9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9LGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZvKHQucHJvdG90eXBlLGUpLG4mJm8odCxuKSx0fX0oKSxhPW4oMiksYz0obz1hKSYmby5fX2VzTW9kdWxlP286e2RlZmF1bHQ6b307dmFyIHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5yZXNvbHZlT3B0aW9ucyh0KSx0aGlzLmluaXRTZWxlY3Rpb24oKX1yZXR1cm4gaShlLFt7a2V5OlwicmVzb2x2ZU9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTt0aGlzLmFjdGlvbj10LmFjdGlvbix0aGlzLmNvbnRhaW5lcj10LmNvbnRhaW5lcix0aGlzLmVtaXR0ZXI9dC5lbWl0dGVyLHRoaXMudGFyZ2V0PXQudGFyZ2V0LHRoaXMudGV4dD10LnRleHQsdGhpcy50cmlnZ2VyPXQudHJpZ2dlcix0aGlzLnNlbGVjdGVkVGV4dD1cIlwifX0se2tleTpcImluaXRTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudGV4dD90aGlzLnNlbGVjdEZha2UoKTp0aGlzLnRhcmdldCYmdGhpcy5zZWxlY3RUYXJnZXQoKX19LHtrZXk6XCJzZWxlY3RGYWtlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9XCJydGxcIj09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRpclwiKTt0aGlzLnJlbW92ZUZha2UoKSx0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2s9ZnVuY3Rpb24oKXtyZXR1cm4gdC5yZW1vdmVGYWtlKCl9LHRoaXMuZmFrZUhhbmRsZXI9dGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKXx8ITAsdGhpcy5mYWtlRWxlbT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiksdGhpcy5mYWtlRWxlbS5zdHlsZS5mb250U2l6ZT1cIjEycHRcIix0aGlzLmZha2VFbGVtLnN0eWxlLmJvcmRlcj1cIjBcIix0aGlzLmZha2VFbGVtLnN0eWxlLnBhZGRpbmc9XCIwXCIsdGhpcy5mYWtlRWxlbS5zdHlsZS5tYXJnaW49XCIwXCIsdGhpcy5mYWtlRWxlbS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsdGhpcy5mYWtlRWxlbS5zdHlsZVtlP1wicmlnaHRcIjpcImxlZnRcIl09XCItOTk5OXB4XCI7dmFyIG49d2luZG93LnBhZ2VZT2Zmc2V0fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO3RoaXMuZmFrZUVsZW0uc3R5bGUudG9wPW4rXCJweFwiLHRoaXMuZmFrZUVsZW0uc2V0QXR0cmlidXRlKFwicmVhZG9ubHlcIixcIlwiKSx0aGlzLmZha2VFbGVtLnZhbHVlPXRoaXMudGV4dCx0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmZha2VFbGVtKSx0aGlzLnNlbGVjdGVkVGV4dD0oMCxjLmRlZmF1bHQpKHRoaXMuZmFrZUVsZW0pLHRoaXMuY29weVRleHQoKX19LHtrZXk6XCJyZW1vdmVGYWtlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZha2VIYW5kbGVyJiYodGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKSx0aGlzLmZha2VIYW5kbGVyPW51bGwsdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrPW51bGwpLHRoaXMuZmFrZUVsZW0mJih0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmZha2VFbGVtKSx0aGlzLmZha2VFbGVtPW51bGwpfX0se2tleTpcInNlbGVjdFRhcmdldFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZFRleHQ9KDAsYy5kZWZhdWx0KSh0aGlzLnRhcmdldCksdGhpcy5jb3B5VGV4dCgpfX0se2tleTpcImNvcHlUZXh0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT12b2lkIDA7dHJ5e2U9ZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5hY3Rpb24pfWNhdGNoKHQpe2U9ITF9dGhpcy5oYW5kbGVSZXN1bHQoZSl9fSx7a2V5OlwiaGFuZGxlUmVzdWx0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5lbWl0dGVyLmVtaXQodD9cInN1Y2Nlc3NcIjpcImVycm9yXCIse2FjdGlvbjp0aGlzLmFjdGlvbix0ZXh0OnRoaXMuc2VsZWN0ZWRUZXh0LHRyaWdnZXI6dGhpcy50cmlnZ2VyLGNsZWFyU2VsZWN0aW9uOnRoaXMuY2xlYXJTZWxlY3Rpb24uYmluZCh0aGlzKX0pfX0se2tleTpcImNsZWFyU2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXImJnRoaXMudHJpZ2dlci5mb2N1cygpLHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUZha2UoKX19LHtrZXk6XCJhY3Rpb25cIixzZXQ6ZnVuY3Rpb24oKXt2YXIgdD0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJjb3B5XCI7aWYodGhpcy5fYWN0aW9uPXQsXCJjb3B5XCIhPT10aGlzLl9hY3Rpb24mJlwiY3V0XCIhPT10aGlzLl9hY3Rpb24pdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwiYWN0aW9uXCIgdmFsdWUsIHVzZSBlaXRoZXIgXCJjb3B5XCIgb3IgXCJjdXRcIicpfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWN0aW9ufX0se2tleTpcInRhcmdldFwiLHNldDpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10KXtpZighdHx8XCJvYmplY3RcIiE9PSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6cih0KSl8fDEhPT10Lm5vZGVUeXBlKXRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIHZhbHVlLCB1c2UgYSB2YWxpZCBFbGVtZW50Jyk7aWYoXCJjb3B5XCI9PT10aGlzLmFjdGlvbiYmdC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiBhdHRyaWJ1dGUuIFBsZWFzZSB1c2UgXCJyZWFkb25seVwiIGluc3RlYWQgb2YgXCJkaXNhYmxlZFwiIGF0dHJpYnV0ZScpO2lmKFwiY3V0XCI9PT10aGlzLmFjdGlvbiYmKHQuaGFzQXR0cmlidXRlKFwicmVhZG9ubHlcIil8fHQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpKXRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gWW91IGNhblxcJ3QgY3V0IHRleHQgZnJvbSBlbGVtZW50cyB3aXRoIFwicmVhZG9ubHlcIiBvciBcImRpc2FibGVkXCIgYXR0cmlidXRlcycpO3RoaXMuX3RhcmdldD10fX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RhcmdldH19XSksZX0oKTt0LmV4cG9ydHM9dX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU7aWYoXCJTRUxFQ1RcIj09PXQubm9kZU5hbWUpdC5mb2N1cygpLGU9dC52YWx1ZTtlbHNlIGlmKFwiSU5QVVRcIj09PXQubm9kZU5hbWV8fFwiVEVYVEFSRUFcIj09PXQubm9kZU5hbWUpe3ZhciBuPXQuaGFzQXR0cmlidXRlKFwicmVhZG9ubHlcIik7bnx8dC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLFwiXCIpLHQuc2VsZWN0KCksdC5zZXRTZWxlY3Rpb25SYW5nZSgwLHQudmFsdWUubGVuZ3RoKSxufHx0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpLGU9dC52YWx1ZX1lbHNle3QuaGFzQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpJiZ0LmZvY3VzKCk7dmFyIG89d2luZG93LmdldFNlbGVjdGlvbigpLHI9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtyLnNlbGVjdE5vZGVDb250ZW50cyh0KSxvLnJlbW92ZUFsbFJhbmdlcygpLG8uYWRkUmFuZ2UociksZT1vLnRvU3RyaW5nKCl9cmV0dXJuIGV9fSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXt9bi5wcm90b3R5cGU9e29uOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz10aGlzLmV8fCh0aGlzLmU9e30pO3JldHVybihvW3RdfHwob1t0XT1bXSkpLnB1c2goe2ZuOmUsY3R4Om59KSx0aGlzfSxvbmNlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz10aGlzO2Z1bmN0aW9uIHIoKXtvLm9mZih0LHIpLGUuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiByLl89ZSx0aGlzLm9uKHQscixuKX0sZW1pdDpmdW5jdGlvbih0KXtmb3IodmFyIGU9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksbj0oKHRoaXMuZXx8KHRoaXMuZT17fSkpW3RdfHxbXSkuc2xpY2UoKSxvPTAscj1uLmxlbmd0aDtvPHI7bysrKW5bb10uZm4uYXBwbHkobltvXS5jdHgsZSk7cmV0dXJuIHRoaXN9LG9mZjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZXx8KHRoaXMuZT17fSksbz1uW3RdLHI9W107aWYobyYmZSlmb3IodmFyIGk9MCxhPW8ubGVuZ3RoO2k8YTtpKyspb1tpXS5mbiE9PWUmJm9baV0uZm4uXyE9PWUmJnIucHVzaChvW2ldKTtyZXR1cm4gci5sZW5ndGg/blt0XT1yOmRlbGV0ZSBuW3RdLHRoaXN9fSx0LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlLG4pe3ZhciBkPW4oNSksaD1uKDYpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7aWYoIXQmJiFlJiYhbil0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50c1wiKTtpZighZC5zdHJpbmcoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nXCIpO2lmKCFkLmZuKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlyZCBhcmd1bWVudCBtdXN0IGJlIGEgRnVuY3Rpb25cIik7aWYoZC5ub2RlKHQpKXJldHVybiBzPWUsZj1uLChsPXQpLmFkZEV2ZW50TGlzdGVuZXIocyxmKSx7ZGVzdHJveTpmdW5jdGlvbigpe2wucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLGYpfX07aWYoZC5ub2RlTGlzdCh0KSlyZXR1cm4gYT10LGM9ZSx1PW4sQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGZ1bmN0aW9uKHQpe3QuYWRkRXZlbnRMaXN0ZW5lcihjLHUpfSkse2Rlc3Ryb3k6ZnVuY3Rpb24oKXtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGEsZnVuY3Rpb24odCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKGMsdSl9KX19O2lmKGQuc3RyaW5nKHQpKXJldHVybiBvPXQscj1lLGk9bixoKGRvY3VtZW50LmJvZHksbyxyLGkpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nLCBIVE1MRWxlbWVudCwgSFRNTENvbGxlY3Rpb24sIG9yIE5vZGVMaXN0XCIpO3ZhciBvLHIsaSxhLGMsdSxsLHMsZn19LGZ1bmN0aW9uKHQsbil7bi5ub2RlPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiZ0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJjE9PT10Lm5vZGVUeXBlfSxuLm5vZGVMaXN0PWZ1bmN0aW9uKHQpe3ZhciBlPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KTtyZXR1cm4gdm9pZCAwIT09dCYmKFwiW29iamVjdCBOb2RlTGlzdF1cIj09PWV8fFwiW29iamVjdCBIVE1MQ29sbGVjdGlvbl1cIj09PWUpJiZcImxlbmd0aFwiaW4gdCYmKDA9PT10Lmxlbmd0aHx8bi5ub2RlKHRbMF0pKX0sbi5zdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmd9LG4uZm49ZnVuY3Rpb24odCl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBhPW4oNyk7ZnVuY3Rpb24gaSh0LGUsbixvLHIpe3ZhciBpPWZ1bmN0aW9uKGUsbix0LG8pe3JldHVybiBmdW5jdGlvbih0KXt0LmRlbGVnYXRlVGFyZ2V0PWEodC50YXJnZXQsbiksdC5kZWxlZ2F0ZVRhcmdldCYmby5jYWxsKGUsdCl9fS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lcihuLGkscikse2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0LnJlbW92ZUV2ZW50TGlzdGVuZXIobixpLHIpfX19dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLG8scil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdC5hZGRFdmVudExpc3RlbmVyP2kuYXBwbHkobnVsbCxhcmd1bWVudHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/aS5iaW5kKG51bGwsZG9jdW1lbnQpLmFwcGx5KG51bGwsYXJndW1lbnRzKTooXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCkpLEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbCh0LGZ1bmN0aW9uKHQpe3JldHVybiBpKHQsZSxuLG8scil9KSl9fSxmdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBFbGVtZW50JiYhRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyl7dmFyIG49RWxlbWVudC5wcm90b3R5cGU7bi5tYXRjaGVzPW4ubWF0Y2hlc1NlbGVjdG9yfHxuLm1vek1hdGNoZXNTZWxlY3Rvcnx8bi5tc01hdGNoZXNTZWxlY3Rvcnx8bi5vTWF0Y2hlc1NlbGVjdG9yfHxuLndlYmtpdE1hdGNoZXNTZWxlY3Rvcn10LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtmb3IoO3QmJjkhPT10Lm5vZGVUeXBlOyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5tYXRjaGVzJiZ0Lm1hdGNoZXMoZSkpcmV0dXJuIHQ7dD10LnBhcmVudE5vZGV9fX1dKX0pOyIsIlxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jb3JlLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbnZhciBfc2VsZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcblx0PyB3aW5kb3cgICAvLyBpZiBpbiBicm93c2VyXG5cdDogKFxuXHRcdCh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcblx0XHQ/IHNlbGYgLy8gaWYgaW4gd29ya2VyXG5cdFx0OiB7fSAgIC8vIGlmIGluIG5vZGUganNcblx0KTtcblxuLyoqXG4gKiBQcmlzbTogTGlnaHR3ZWlnaHQsIHJvYnVzdCwgZWxlZ2FudCBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKiBNSVQgbGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC9cbiAqIEBhdXRob3IgTGVhIFZlcm91IGh0dHA6Ly9sZWEudmVyb3UubWVcbiAqL1xuXG52YXIgUHJpc20gPSAoZnVuY3Rpb24gKF9zZWxmKXtcblxuLy8gUHJpdmF0ZSBoZWxwZXIgdmFyc1xudmFyIGxhbmcgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaTtcbnZhciB1bmlxdWVJZCA9IDA7XG5cblxudmFyIF8gPSB7XG5cdG1hbnVhbDogX3NlbGYuUHJpc20gJiYgX3NlbGYuUHJpc20ubWFudWFsLFxuXHRkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcixcblx0dXRpbDoge1xuXHRcdGVuY29kZTogZnVuY3Rpb24gKHRva2Vucykge1xuXHRcdFx0aWYgKHRva2VucyBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgVG9rZW4odG9rZW5zLnR5cGUsIF8udXRpbC5lbmNvZGUodG9rZW5zLmNvbnRlbnQpLCB0b2tlbnMuYWxpYXMpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRva2VucykpIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5tYXAoXy51dGlsLmVuY29kZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdG9rZW5zLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoL1xcdTAwYTAvZywgJyAnKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0dHlwZTogZnVuY3Rpb24gKG8pIHtcblx0XHRcdHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuXHRcdH0sXG5cblx0XHRvYmpJZDogZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0aWYgKCFvYmpbJ19faWQnXSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19pZCcsIHsgdmFsdWU6ICsrdW5pcXVlSWQgfSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqWydfX2lkJ107XG5cdFx0fSxcblxuXHRcdC8vIERlZXAgY2xvbmUgYSBsYW5ndWFnZSBkZWZpbml0aW9uIChlLmcuIHRvIGV4dGVuZCBpdClcblx0XHRjbG9uZTogZnVuY3Rpb24gZGVlcENsb25lKG8sIHZpc2l0ZWQpIHtcblx0XHRcdHZhciBjbG9uZSwgaWQsIHR5cGUgPSBfLnV0aWwudHlwZShvKTtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnT2JqZWN0Jzpcblx0XHRcdFx0XHRpZCA9IF8udXRpbC5vYmpJZChvKTtcblx0XHRcdFx0XHRpZiAodmlzaXRlZFtpZF0pIHtcblx0XHRcdFx0XHRcdHJldHVybiB2aXNpdGVkW2lkXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR2aXNpdGVkW2lkXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIG8pIHtcblx0XHRcdFx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmVba2V5XSA9IGRlZXBDbG9uZShvW2tleV0sIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBjbG9uZTtcblxuXHRcdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdFx0aWQgPSBfLnV0aWwub2JqSWQobyk7XG5cdFx0XHRcdFx0aWYgKHZpc2l0ZWRbaWRdKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlzaXRlZFtpZF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0dmlzaXRlZFtpZF0gPSBjbG9uZTtcblxuXHRcdFx0XHRcdG8uZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xuXHRcdFx0XHRcdFx0Y2xvbmVbaV0gPSBkZWVwQ2xvbmUodiwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRyZXR1cm4gY2xvbmU7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgUHJpc20gbGFuZ3VhZ2Ugb2YgdGhlIGdpdmVuIGVsZW1lbnQgc2V0IGJ5IGEgYGxhbmd1YWdlLXh4eHhgIG9yIGBsYW5nLXh4eHhgIGNsYXNzLlxuXHRcdCAqXG5cdFx0ICogSWYgbm8gbGFuZ3VhZ2UgaXMgc2V0IGZvciB0aGUgZWxlbWVudCBvciB0aGUgZWxlbWVudCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGBub25lYCB3aWxsIGJlIHJldHVybmVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG5cdFx0ICogQHJldHVybnMge3N0cmluZ31cblx0XHQgKi9cblx0XHRnZXRMYW5ndWFnZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRcdHdoaWxlIChlbGVtZW50ICYmICFsYW5nLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpKSB7XG5cdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRyZXR1cm4gKGVsZW1lbnQuY2xhc3NOYW1lLm1hdGNoKGxhbmcpIHx8IFssICdub25lJ10pWzFdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJ25vbmUnO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBzY3JpcHQgZWxlbWVudCB0aGF0IGlzIGN1cnJlbnRseSBleGVjdXRpbmcuXG5cdFx0ICpcblx0XHQgKiBUaGlzIGRvZXMgX19ub3RfXyB3b3JrIGZvciBsaW5lIHNjcmlwdCBlbGVtZW50LlxuXHRcdCAqXG5cdFx0ICogQHJldHVybnMge0hUTUxTY3JpcHRFbGVtZW50IHwgbnVsbH1cblx0XHQgKi9cblx0XHRjdXJyZW50U2NyaXB0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHRcdGlmICgnY3VycmVudFNjcmlwdCcgaW4gZG9jdW1lbnQpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElFMTEgd29ya2Fyb3VuZFxuXHRcdFx0Ly8gd2UnbGwgZ2V0IHRoZSBzcmMgb2YgdGhlIGN1cnJlbnQgc2NyaXB0IGJ5IHBhcnNpbmcgSUUxMSdzIGVycm9yIHN0YWNrIHRyYWNlXG5cdFx0XHQvLyB0aGlzIHdpbGwgbm90IHdvcmsgZm9yIGlubGluZSBzY3JpcHRzXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcigpO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdC8vIEdldCBmaWxlIHNyYyB1cmwgZnJvbSBzdGFjay4gU3BlY2lmaWNhbGx5IHdvcmtzIHdpdGggdGhlIGZvcm1hdCBvZiBzdGFjayB0cmFjZXMgaW4gSUUuXG5cdFx0XHRcdC8vIEEgc3RhY2sgd2lsbCBsb29rIGxpa2UgdGhpczpcblx0XHRcdFx0Ly9cblx0XHRcdFx0Ly8gRXJyb3Jcblx0XHRcdFx0Ly8gICAgYXQgXy51dGlsLmN1cnJlbnRTY3JpcHQgKGh0dHA6Ly9sb2NhbGhvc3QvY29tcG9uZW50cy9wcmlzbS1jb3JlLmpzOjExOTo1KVxuXHRcdFx0XHQvLyAgICBhdCBHbG9iYWwgY29kZSAoaHR0cDovL2xvY2FsaG9zdC9jb21wb25lbnRzL3ByaXNtLWNvcmUuanM6NjA2OjEpXG5cblx0XHRcdFx0dmFyIHNyYyA9ICgvYXQgW14oXFxyXFxuXSpcXCgoLiopOi4rOi4rXFwpJC9pLmV4ZWMoZXJyLnN0YWNrKSB8fCBbXSlbMV07XG5cdFx0XHRcdGlmIChzcmMpIHtcblx0XHRcdFx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcblx0XHRcdFx0XHRmb3IgKHZhciBpIGluIHNjcmlwdHMpIHtcblx0XHRcdFx0XHRcdGlmIChzY3JpcHRzW2ldLnNyYyA9PSBzcmMpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNjcmlwdHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRsYW5ndWFnZXM6IHtcblx0XHRleHRlbmQ6IGZ1bmN0aW9uIChpZCwgcmVkZWYpIHtcblx0XHRcdHZhciBsYW5nID0gXy51dGlsLmNsb25lKF8ubGFuZ3VhZ2VzW2lkXSk7XG5cblx0XHRcdGZvciAodmFyIGtleSBpbiByZWRlZikge1xuXHRcdFx0XHRsYW5nW2tleV0gPSByZWRlZltrZXldO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGFuZztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSW5zZXJ0IGEgdG9rZW4gYmVmb3JlIGFub3RoZXIgdG9rZW4gaW4gYSBsYW5ndWFnZSBsaXRlcmFsXG5cdFx0ICogQXMgdGhpcyBuZWVkcyB0byByZWNyZWF0ZSB0aGUgb2JqZWN0ICh3ZSBjYW5ub3QgYWN0dWFsbHkgaW5zZXJ0IGJlZm9yZSBrZXlzIGluIG9iamVjdCBsaXRlcmFscyksXG5cdFx0ICogd2UgY2Fubm90IGp1c3QgcHJvdmlkZSBhbiBvYmplY3QsIHdlIG5lZWQgYW4gb2JqZWN0IGFuZCBhIGtleS5cblx0XHQgKiBAcGFyYW0gaW5zaWRlIFRoZSBrZXkgKG9yIGxhbmd1YWdlIGlkKSBvZiB0aGUgcGFyZW50XG5cdFx0ICogQHBhcmFtIGJlZm9yZSBUaGUga2V5IHRvIGluc2VydCBiZWZvcmUuXG5cdFx0ICogQHBhcmFtIGluc2VydCBPYmplY3Qgd2l0aCB0aGUga2V5L3ZhbHVlIHBhaXJzIHRvIGluc2VydFxuXHRcdCAqIEBwYXJhbSByb290IFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBgaW5zaWRlYC4gSWYgZXF1YWwgdG8gUHJpc20ubGFuZ3VhZ2VzLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0XHQgKi9cblx0XHRpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIChpbnNpZGUsIGJlZm9yZSwgaW5zZXJ0LCByb290KSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCBfLmxhbmd1YWdlcztcblx0XHRcdHZhciBncmFtbWFyID0gcm9vdFtpbnNpZGVdO1xuXHRcdFx0dmFyIHJldCA9IHt9O1xuXG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiBncmFtbWFyKSB7XG5cdFx0XHRcdGlmIChncmFtbWFyLmhhc093blByb3BlcnR5KHRva2VuKSkge1xuXG5cdFx0XHRcdFx0aWYgKHRva2VuID09IGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cdFx0XHRcdFx0XHRcdGlmIChpbnNlcnQuaGFzT3duUHJvcGVydHkobmV3VG9rZW4pKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0W25ld1Rva2VuXSA9IGluc2VydFtuZXdUb2tlbl07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEbyBub3QgaW5zZXJ0IHRva2VuIHdoaWNoIGFsc28gb2NjdXIgaW4gaW5zZXJ0LiBTZWUgIzE1MjVcblx0XHRcdFx0XHRpZiAoIWluc2VydC5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblx0XHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIG9sZCA9IHJvb3RbaW5zaWRlXTtcblx0XHRcdHJvb3RbaW5zaWRlXSA9IHJldDtcblxuXHRcdFx0Ly8gVXBkYXRlIHJlZmVyZW5jZXMgaW4gb3RoZXIgbGFuZ3VhZ2UgZGVmaW5pdGlvbnNcblx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhfLmxhbmd1YWdlcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IG9sZCAmJiBrZXkgIT0gaW5zaWRlKSB7XG5cdFx0XHRcdFx0dGhpc1trZXldID0gcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9LFxuXG5cdFx0Ly8gVHJhdmVyc2UgYSBsYW5ndWFnZSBkZWZpbml0aW9uIHdpdGggRGVwdGggRmlyc3QgU2VhcmNoXG5cdFx0REZTOiBmdW5jdGlvbiBERlMobywgY2FsbGJhY2ssIHR5cGUsIHZpc2l0ZWQpIHtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHR2YXIgb2JqSWQgPSBfLnV0aWwub2JqSWQ7XG5cblx0XHRcdGZvciAodmFyIGkgaW4gbykge1xuXHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobywgaSwgb1tpXSwgdHlwZSB8fCBpKTtcblxuXHRcdFx0XHRcdHZhciBwcm9wZXJ0eSA9IG9baV0sXG5cdFx0XHRcdFx0ICAgIHByb3BlcnR5VHlwZSA9IF8udXRpbC50eXBlKHByb3BlcnR5KTtcblxuXHRcdFx0XHRcdGlmIChwcm9wZXJ0eVR5cGUgPT09ICdPYmplY3QnICYmICF2aXNpdGVkW29iaklkKHByb3BlcnR5KV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbb2JqSWQocHJvcGVydHkpXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRERlMocHJvcGVydHksIGNhbGxiYWNrLCBudWxsLCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAocHJvcGVydHlUeXBlID09PSAnQXJyYXknICYmICF2aXNpdGVkW29iaklkKHByb3BlcnR5KV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbb2JqSWQocHJvcGVydHkpXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRERlMocHJvcGVydHksIGNhbGxiYWNrLCBpLCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdHBsdWdpbnM6IHt9LFxuXG5cdGhpZ2hsaWdodEFsbDogZnVuY3Rpb24oYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Xy5oaWdobGlnaHRBbGxVbmRlcihkb2N1bWVudCwgYXN5bmMsIGNhbGxiYWNrKTtcblx0fSxcblxuXHRoaWdobGlnaHRBbGxVbmRlcjogZnVuY3Rpb24oY29udGFpbmVyLCBhc3luYywgY2FsbGJhY2spIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y2FsbGJhY2s6IGNhbGxiYWNrLFxuXHRcdFx0Y29udGFpbmVyOiBjb250YWluZXIsXG5cdFx0XHRzZWxlY3RvcjogJ2NvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLCBbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIGNvZGUsIGNvZGVbY2xhc3MqPVwibGFuZy1cIl0sIFtjbGFzcyo9XCJsYW5nLVwiXSBjb2RlJ1xuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWhpZ2hsaWdodGFsbCcsIGVudik7XG5cblx0XHRlbnYuZWxlbWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZW52LmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGVudi5zZWxlY3RvcikpO1xuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1hbGwtZWxlbWVudHMtaGlnaGxpZ2h0JywgZW52KTtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBlbGVtZW50OyBlbGVtZW50ID0gZW52LmVsZW1lbnRzW2krK107KSB7XG5cdFx0XHRfLmhpZ2hsaWdodEVsZW1lbnQoZWxlbWVudCwgYXN5bmMgPT09IHRydWUsIGVudi5jYWxsYmFjayk7XG5cdFx0fVxuXHR9LFxuXG5cdGhpZ2hsaWdodEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdC8vIEZpbmQgbGFuZ3VhZ2Vcblx0XHR2YXIgbGFuZ3VhZ2UgPSBfLnV0aWwuZ2V0TGFuZ3VhZ2UoZWxlbWVudCk7XG5cdFx0dmFyIGdyYW1tYXIgPSBfLmxhbmd1YWdlc1tsYW5ndWFnZV07XG5cblx0XHQvLyBTZXQgbGFuZ3VhZ2Ugb24gdGhlIGVsZW1lbnQsIGlmIG5vdCBwcmVzZW50XG5cdFx0ZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKGxhbmcsICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJykgKyAnIGxhbmd1YWdlLScgKyBsYW5ndWFnZTtcblxuXHRcdC8vIFNldCBsYW5ndWFnZSBvbiB0aGUgcGFyZW50LCBmb3Igc3R5bGluZ1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3ByZScpIHtcblx0XHRcdHBhcmVudC5jbGFzc05hbWUgPSBwYXJlbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXHRcdH1cblxuXHRcdHZhciBjb2RlID0gZWxlbWVudC50ZXh0Q29udGVudDtcblxuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlLFxuXHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdGNvZGU6IGNvZGVcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gaW5zZXJ0SGlnaGxpZ2h0ZWRDb2RlKGhpZ2hsaWdodGVkQ29kZSkge1xuXHRcdFx0ZW52LmhpZ2hsaWdodGVkQ29kZSA9IGhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1pbnNlcnQnLCBlbnYpO1xuXG5cdFx0XHRlbnYuZWxlbWVudC5pbm5lckhUTUwgPSBlbnYuaGlnaGxpZ2h0ZWRDb2RlO1xuXG5cdFx0XHRfLmhvb2tzLnJ1bignYWZ0ZXItaGlnaGxpZ2h0JywgZW52KTtcblx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVudi5lbGVtZW50KTtcblx0XHR9XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXNhbml0eS1jaGVjaycsIGVudik7XG5cblx0XHRpZiAoIWVudi5jb2RlKSB7XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChlbnYuZWxlbWVudCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1oaWdobGlnaHQnLCBlbnYpO1xuXG5cdFx0aWYgKCFlbnYuZ3JhbW1hcikge1xuXHRcdFx0aW5zZXJ0SGlnaGxpZ2h0ZWRDb2RlKF8udXRpbC5lbmNvZGUoZW52LmNvZGUpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYXN5bmMgJiYgX3NlbGYuV29ya2VyKSB7XG5cdFx0XHR2YXIgd29ya2VyID0gbmV3IFdvcmtlcihfLmZpbGVuYW1lKTtcblxuXHRcdFx0d29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2dCkge1xuXHRcdFx0XHRpbnNlcnRIaWdobGlnaHRlZENvZGUoZXZ0LmRhdGEpO1xuXHRcdFx0fTtcblxuXHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0bGFuZ3VhZ2U6IGVudi5sYW5ndWFnZSxcblx0XHRcdFx0Y29kZTogZW52LmNvZGUsXG5cdFx0XHRcdGltbWVkaWF0ZUNsb3NlOiB0cnVlXG5cdFx0XHR9KSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aW5zZXJ0SGlnaGxpZ2h0ZWRDb2RlKF8uaGlnaGxpZ2h0KGVudi5jb2RlLCBlbnYuZ3JhbW1hciwgZW52Lmxhbmd1YWdlKSk7XG5cdFx0fVxuXHR9LFxuXG5cdGhpZ2hsaWdodDogZnVuY3Rpb24gKHRleHQsIGdyYW1tYXIsIGxhbmd1YWdlKSB7XG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdGNvZGU6IHRleHQsXG5cdFx0XHRncmFtbWFyOiBncmFtbWFyLFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlXG5cdFx0fTtcblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXRva2VuaXplJywgZW52KTtcblx0XHRlbnYudG9rZW5zID0gXy50b2tlbml6ZShlbnYuY29kZSwgZW52LmdyYW1tYXIpO1xuXHRcdF8uaG9va3MucnVuKCdhZnRlci10b2tlbml6ZScsIGVudik7XG5cdFx0cmV0dXJuIFRva2VuLnN0cmluZ2lmeShfLnV0aWwuZW5jb2RlKGVudi50b2tlbnMpLCBlbnYubGFuZ3VhZ2UpO1xuXHR9LFxuXG5cdG1hdGNoR3JhbW1hcjogZnVuY3Rpb24gKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgaW5kZXgsIHN0YXJ0UG9zLCBvbmVzaG90LCB0YXJnZXQpIHtcblx0XHRmb3IgKHZhciB0b2tlbiBpbiBncmFtbWFyKSB7XG5cdFx0XHRpZiAoIWdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pIHx8ICFncmFtbWFyW3Rva2VuXSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhdHRlcm5zID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRwYXR0ZXJucyA9IEFycmF5LmlzQXJyYXkocGF0dGVybnMpID8gcGF0dGVybnMgOiBbcGF0dGVybnNdO1xuXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBhdHRlcm5zLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdGlmICh0YXJnZXQgJiYgdGFyZ2V0ID09IHRva2VuICsgJywnICsgaikge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBwYXR0ZXJuID0gcGF0dGVybnNbal0sXG5cdFx0XHRcdFx0aW5zaWRlID0gcGF0dGVybi5pbnNpZGUsXG5cdFx0XHRcdFx0bG9va2JlaGluZCA9ICEhcGF0dGVybi5sb29rYmVoaW5kLFxuXHRcdFx0XHRcdGdyZWVkeSA9ICEhcGF0dGVybi5ncmVlZHksXG5cdFx0XHRcdFx0bG9va2JlaGluZExlbmd0aCA9IDAsXG5cdFx0XHRcdFx0YWxpYXMgPSBwYXR0ZXJuLmFsaWFzO1xuXG5cdFx0XHRcdGlmIChncmVlZHkgJiYgIXBhdHRlcm4ucGF0dGVybi5nbG9iYWwpIHtcblx0XHRcdFx0XHQvLyBXaXRob3V0IHRoZSBnbG9iYWwgZmxhZywgbGFzdEluZGV4IHdvbid0IHdvcmtcblx0XHRcdFx0XHR2YXIgZmxhZ3MgPSBwYXR0ZXJuLnBhdHRlcm4udG9TdHJpbmcoKS5tYXRjaCgvW2ltc3V5XSokLylbMF07XG5cdFx0XHRcdFx0cGF0dGVybi5wYXR0ZXJuID0gUmVnRXhwKHBhdHRlcm4ucGF0dGVybi5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBhdHRlcm4gPSBwYXR0ZXJuLnBhdHRlcm4gfHwgcGF0dGVybjtcblxuXHRcdFx0XHQvLyBEb27igJl0IGNhY2hlIGxlbmd0aCBhcyBpdCBjaGFuZ2VzIGR1cmluZyB0aGUgbG9vcFxuXHRcdFx0XHRmb3IgKHZhciBpID0gaW5kZXgsIHBvcyA9IHN0YXJ0UG9zOyBpIDwgc3RyYXJyLmxlbmd0aDsgcG9zICs9IHN0cmFycltpXS5sZW5ndGgsICsraSkge1xuXG5cdFx0XHRcdFx0dmFyIHN0ciA9IHN0cmFycltpXTtcblxuXHRcdFx0XHRcdGlmIChzdHJhcnIubGVuZ3RoID4gdGV4dC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIFNvbWV0aGluZyB3ZW50IHRlcnJpYmx5IHdyb25nLCBBQk9SVCwgQUJPUlQhXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHN0ciBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZ3JlZWR5ICYmIGkgIT0gc3RyYXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdHBhdHRlcm4ubGFzdEluZGV4ID0gcG9zO1xuXHRcdFx0XHRcdFx0dmFyIG1hdGNoID0gcGF0dGVybi5leGVjKHRleHQpO1xuXHRcdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleCArIChsb29rYmVoaW5kICYmIG1hdGNoWzFdID8gbWF0Y2hbMV0ubGVuZ3RoIDogMCksXG5cdFx0XHRcdFx0XHQgICAgdG8gPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCxcblx0XHRcdFx0XHRcdCAgICBrID0gaSxcblx0XHRcdFx0XHRcdCAgICBwID0gcG9zO1xuXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBsZW4gPSBzdHJhcnIubGVuZ3RoOyBrIDwgbGVuICYmIChwIDwgdG8gfHwgKCFzdHJhcnJba10udHlwZSAmJiAhc3RyYXJyW2sgLSAxXS5ncmVlZHkpKTsgKytrKSB7XG5cdFx0XHRcdFx0XHRcdHAgKz0gc3RyYXJyW2tdLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0Ly8gTW92ZSB0aGUgaW5kZXggaSB0byB0aGUgZWxlbWVudCBpbiBzdHJhcnIgdGhhdCBpcyBjbG9zZXN0IHRvIGZyb21cblx0XHRcdFx0XHRcdFx0aWYgKGZyb20gPj0gcCkge1xuXHRcdFx0XHRcdFx0XHRcdCsraTtcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIElmIHN0cmFycltpXSBpcyBhIFRva2VuLCB0aGVuIHRoZSBtYXRjaCBzdGFydHMgaW5zaWRlIGFub3RoZXIgVG9rZW4sIHdoaWNoIGlzIGludmFsaWRcblx0XHRcdFx0XHRcdGlmIChzdHJhcnJbaV0gaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTnVtYmVyIG9mIHRva2VucyB0byBkZWxldGUgYW5kIHJlcGxhY2Ugd2l0aCB0aGUgbmV3IG1hdGNoXG5cdFx0XHRcdFx0XHRkZWxOdW0gPSBrIC0gaTtcblx0XHRcdFx0XHRcdHN0ciA9IHRleHQuc2xpY2UocG9zLCBwKTtcblx0XHRcdFx0XHRcdG1hdGNoLmluZGV4IC09IHBvcztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoc3RyKSxcblx0XHRcdFx0XHRcdFx0ZGVsTnVtID0gMTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0XHRpZiAob25lc2hvdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYobG9va2JlaGluZCkge1xuXHRcdFx0XHRcdFx0bG9va2JlaGluZExlbmd0aCA9IG1hdGNoWzFdID8gbWF0Y2hbMV0ubGVuZ3RoIDogMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgbG9va2JlaGluZExlbmd0aCxcblx0XHRcdFx0XHQgICAgbWF0Y2ggPSBtYXRjaFswXS5zbGljZShsb29rYmVoaW5kTGVuZ3RoKSxcblx0XHRcdFx0XHQgICAgdG8gPSBmcm9tICsgbWF0Y2gubGVuZ3RoLFxuXHRcdFx0XHRcdCAgICBiZWZvcmUgPSBzdHIuc2xpY2UoMCwgZnJvbSksXG5cdFx0XHRcdFx0ICAgIGFmdGVyID0gc3RyLnNsaWNlKHRvKTtcblxuXHRcdFx0XHRcdHZhciBhcmdzID0gW2ksIGRlbE51bV07XG5cblx0XHRcdFx0XHRpZiAoYmVmb3JlKSB7XG5cdFx0XHRcdFx0XHQrK2k7XG5cdFx0XHRcdFx0XHRwb3MgKz0gYmVmb3JlLmxlbmd0aDtcblx0XHRcdFx0XHRcdGFyZ3MucHVzaChiZWZvcmUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciB3cmFwcGVkID0gbmV3IFRva2VuKHRva2VuLCBpbnNpZGU/IF8udG9rZW5pemUobWF0Y2gsIGluc2lkZSkgOiBtYXRjaCwgYWxpYXMsIG1hdGNoLCBncmVlZHkpO1xuXG5cdFx0XHRcdFx0YXJncy5wdXNoKHdyYXBwZWQpO1xuXG5cdFx0XHRcdFx0aWYgKGFmdGVyKSB7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2goYWZ0ZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoc3RyYXJyLCBhcmdzKTtcblxuXHRcdFx0XHRcdGlmIChkZWxOdW0gIT0gMSlcblx0XHRcdFx0XHRcdF8ubWF0Y2hHcmFtbWFyKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgaSwgcG9zLCB0cnVlLCB0b2tlbiArICcsJyArIGopO1xuXG5cdFx0XHRcdFx0aWYgKG9uZXNob3QpXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHR0b2tlbml6ZTogZnVuY3Rpb24odGV4dCwgZ3JhbW1hcikge1xuXHRcdHZhciBzdHJhcnIgPSBbdGV4dF07XG5cblx0XHR2YXIgcmVzdCA9IGdyYW1tYXIucmVzdDtcblxuXHRcdGlmIChyZXN0KSB7XG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiByZXN0KSB7XG5cdFx0XHRcdGdyYW1tYXJbdG9rZW5dID0gcmVzdFt0b2tlbl07XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBncmFtbWFyLnJlc3Q7XG5cdFx0fVxuXG5cdFx0Xy5tYXRjaEdyYW1tYXIodGV4dCwgc3RyYXJyLCBncmFtbWFyLCAwLCAwLCBmYWxzZSk7XG5cblx0XHRyZXR1cm4gc3RyYXJyO1xuXHR9LFxuXG5cdGhvb2tzOiB7XG5cdFx0YWxsOiB7fSxcblxuXHRcdGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBfLmhvb2tzLmFsbDtcblxuXHRcdFx0aG9va3NbbmFtZV0gPSBob29rc1tuYW1lXSB8fCBbXTtcblxuXHRcdFx0aG9va3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblxuXHRcdHJ1bjogZnVuY3Rpb24gKG5hbWUsIGVudikge1xuXHRcdFx0dmFyIGNhbGxiYWNrcyA9IF8uaG9va3MuYWxsW25hbWVdO1xuXG5cdFx0XHRpZiAoIWNhbGxiYWNrcyB8fCAhY2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGk9MCwgY2FsbGJhY2s7IGNhbGxiYWNrID0gY2FsbGJhY2tzW2krK107KSB7XG5cdFx0XHRcdGNhbGxiYWNrKGVudik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdFRva2VuOiBUb2tlblxufTtcblxuX3NlbGYuUHJpc20gPSBfO1xuXG5mdW5jdGlvbiBUb2tlbih0eXBlLCBjb250ZW50LCBhbGlhcywgbWF0Y2hlZFN0ciwgZ3JlZWR5KSB7XG5cdHRoaXMudHlwZSA9IHR5cGU7XG5cdHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG5cdHRoaXMuYWxpYXMgPSBhbGlhcztcblx0Ly8gQ29weSBvZiB0aGUgZnVsbCBzdHJpbmcgdGhpcyB0b2tlbiB3YXMgY3JlYXRlZCBmcm9tXG5cdHRoaXMubGVuZ3RoID0gKG1hdGNoZWRTdHIgfHwgJycpLmxlbmd0aHwwO1xuXHR0aGlzLmdyZWVkeSA9ICEhZ3JlZWR5O1xufVxuXG5Ub2tlbi5zdHJpbmdpZnkgPSBmdW5jdGlvbihvLCBsYW5ndWFnZSkge1xuXHRpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGlmIChBcnJheS5pc0FycmF5KG8pKSB7XG5cdFx0cmV0dXJuIG8ubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoZWxlbWVudCwgbGFuZ3VhZ2UpO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGVudiA9IHtcblx0XHR0eXBlOiBvLnR5cGUsXG5cdFx0Y29udGVudDogVG9rZW4uc3RyaW5naWZ5KG8uY29udGVudCwgbGFuZ3VhZ2UpLFxuXHRcdHRhZzogJ3NwYW4nLFxuXHRcdGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuXHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdGxhbmd1YWdlOiBsYW5ndWFnZVxuXHR9O1xuXG5cdGlmIChvLmFsaWFzKSB7XG5cdFx0dmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KG8uYWxpYXMpID8gby5hbGlhcyA6IFtvLmFsaWFzXTtcblx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbnYuY2xhc3NlcywgYWxpYXNlcyk7XG5cdH1cblxuXHRfLmhvb2tzLnJ1bignd3JhcCcsIGVudik7XG5cblx0dmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhlbnYuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRyZXR1cm4gbmFtZSArICc9XCInICsgKGVudi5hdHRyaWJ1dGVzW25hbWVdIHx8ICcnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykgKyAnXCInO1xuXHR9KS5qb2luKCcgJyk7XG5cblx0cmV0dXJuICc8JyArIGVudi50YWcgKyAnIGNsYXNzPVwiJyArIGVudi5jbGFzc2VzLmpvaW4oJyAnKSArICdcIicgKyAoYXR0cmlidXRlcyA/ICcgJyArIGF0dHJpYnV0ZXMgOiAnJykgKyAnPicgKyBlbnYuY29udGVudCArICc8LycgKyBlbnYudGFnICsgJz4nO1xufTtcblxuaWYgKCFfc2VsZi5kb2N1bWVudCkge1xuXHRpZiAoIV9zZWxmLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHQvLyBpbiBOb2RlLmpzXG5cdFx0cmV0dXJuIF87XG5cdH1cblxuXHRpZiAoIV8uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyKSB7XG5cdFx0Ly8gSW4gd29ya2VyXG5cdFx0X3NlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSksXG5cdFx0XHRcdGxhbmcgPSBtZXNzYWdlLmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlID0gbWVzc2FnZS5jb2RlLFxuXHRcdFx0XHRpbW1lZGlhdGVDbG9zZSA9IG1lc3NhZ2UuaW1tZWRpYXRlQ2xvc2U7XG5cblx0XHRcdF9zZWxmLnBvc3RNZXNzYWdlKF8uaGlnaGxpZ2h0KGNvZGUsIF8ubGFuZ3VhZ2VzW2xhbmddLCBsYW5nKSk7XG5cdFx0XHRpZiAoaW1tZWRpYXRlQ2xvc2UpIHtcblx0XHRcdFx0X3NlbGYuY2xvc2UoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSk7XG5cdH1cblxuXHRyZXR1cm4gXztcbn1cblxuLy9HZXQgY3VycmVudCBzY3JpcHQgYW5kIGhpZ2hsaWdodFxudmFyIHNjcmlwdCA9IF8udXRpbC5jdXJyZW50U2NyaXB0KCk7XG5cbmlmIChzY3JpcHQpIHtcblx0Xy5maWxlbmFtZSA9IHNjcmlwdC5zcmM7XG5cblx0aWYgKHNjcmlwdC5oYXNBdHRyaWJ1dGUoJ2RhdGEtbWFudWFsJykpIHtcblx0XHRfLm1hbnVhbCA9IHRydWU7XG5cdH1cbn1cblxuaWYgKCFfLm1hbnVhbCkge1xuXHRmdW5jdGlvbiBoaWdobGlnaHRBdXRvbWF0aWNhbGx5Q2FsbGJhY2soKSB7XG5cdFx0aWYgKCFfLm1hbnVhbCkge1xuXHRcdFx0Xy5oaWdobGlnaHRBbGwoKTtcblx0XHR9XG5cdH1cblxuXHQvLyBJZiB0aGUgZG9jdW1lbnQgc3RhdGUgaXMgXCJsb2FkaW5nXCIsIHRoZW4gd2UnbGwgdXNlIERPTUNvbnRlbnRMb2FkZWQuXG5cdC8vIElmIHRoZSBkb2N1bWVudCBzdGF0ZSBpcyBcImludGVyYWN0aXZlXCIgYW5kIHRoZSBwcmlzbS5qcyBzY3JpcHQgaXMgZGVmZXJyZWQsIHRoZW4gd2UnbGwgYWxzbyB1c2UgdGhlXG5cdC8vIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgYmVjYXVzZSB0aGVyZSBtaWdodCBiZSBzb21lIHBsdWdpbnMgb3IgbGFuZ3VhZ2VzIHdoaWNoIGhhdmUgYWxzbyBiZWVuIGRlZmVycmVkIGFuZCB0aGV5XG5cdC8vIG1pZ2h0IHRha2UgbG9uZ2VyIG9uZSBhbmltYXRpb24gZnJhbWUgdG8gZXhlY3V0ZSB3aGljaCBjYW4gY3JlYXRlIGEgcmFjZSBjb25kaXRpb24gd2hlcmUgb25seSBzb21lIHBsdWdpbnMgaGF2ZVxuXHQvLyBiZWVuIGxvYWRlZCB3aGVuIFByaXNtLmhpZ2hsaWdodEFsbCgpIGlzIGV4ZWN1dGVkLCBkZXBlbmRpbmcgb24gaG93IGZhc3QgcmVzb3VyY2VzIGFyZSBsb2FkZWQuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUHJpc21KUy9wcmlzbS9pc3N1ZXMvMjEwMlxuXHR2YXIgcmVhZHlTdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7XG5cdGlmIChyZWFkeVN0YXRlID09PSAnbG9hZGluZycgfHwgcmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJyAmJiBzY3JpcHQgJiYgc2NyaXB0LmRlZmVyKSB7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGhpZ2hsaWdodEF1dG9tYXRpY2FsbHlDYWxsYmFjayk7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoaGlnaGxpZ2h0QXV0b21hdGljYWxseUNhbGxiYWNrLCAxNik7XG5cdFx0fVxuXHR9XG59XG5cbnJldHVybiBfO1xuXG59KShfc2VsZik7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xufVxuXG4vLyBoYWNrIGZvciBjb21wb25lbnRzIHRvIHdvcmsgY29ycmVjdGx5IGluIG5vZGUuanNcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuXHRnbG9iYWwuUHJpc20gPSBQcmlzbTtcbn1cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLW1hcmt1cC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwID0ge1xuXHQnY29tbWVudCc6IC88IS0tW1xcc1xcU10qPy0tPi8sXG5cdCdwcm9sb2cnOiAvPFxcP1tcXHNcXFNdKz9cXD8+Lyxcblx0J2RvY3R5cGUnOiB7XG5cdFx0cGF0dGVybjogLzwhRE9DVFlQRSg/OltePlwiJ1tcXF1dfFwiW15cIl0qXCJ8J1teJ10qJykrKD86XFxbKD86KD8hPCEtLSlbXlwiJ1xcXV18XCJbXlwiXSpcInwnW14nXSonfDwhLS1bXFxzXFxTXSo/LS0+KSpcXF1cXHMqKT8+L2ksXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdCdjZGF0YSc6IC88IVxcW0NEQVRBXFxbW1xcc1xcU10qP11dPi9pLFxuXHQndGFnJzoge1xuXHRcdHBhdHRlcm46IC88XFwvPyg/IVxcZClbXlxccz5cXC89JDwlXSsoPzpcXHMoPzpcXHMqW15cXHM+XFwvPV0rKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKyg/PVtcXHM+XSkpfCg/PVtcXHMvPl0pKSkrKT9cXHMqXFwvPz4vaSxcblx0XHRncmVlZHk6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQndGFnJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXjxcXC8/W15cXHM+XFwvXSsvaSxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL148XFwvPy8sXG5cdFx0XHRcdFx0J25hbWVzcGFjZSc6IC9eW15cXHM+XFwvOl0rOi9cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdhdHRyLXZhbHVlJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKS9pLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQncHVuY3R1YXRpb24nOiBbXG5cdFx0XHRcdFx0XHQvXj0vLFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRwYXR0ZXJuOiAvXihcXHMqKVtcIiddfFtcIiddJC8sXG5cdFx0XHRcdFx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRdXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQncHVuY3R1YXRpb24nOiAvXFwvPz4vLFxuXHRcdFx0J2F0dHItbmFtZSc6IHtcblx0XHRcdFx0cGF0dGVybjogL1teXFxzPlxcL10rLyxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J25hbWVzcGFjZSc6IC9eW15cXHM+XFwvOl0rOi9cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9LFxuXHQnZW50aXR5JzogLyYjP1tcXGRhLXpdezEsOH07L2lcbn07XG5cblByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ3RhZyddLmluc2lkZVsnYXR0ci12YWx1ZSddLmluc2lkZVsnZW50aXR5J10gPVxuXHRQcmlzbS5sYW5ndWFnZXMubWFya3VwWydlbnRpdHknXTtcblxuLy8gUGx1Z2luIHRvIG1ha2UgZW50aXR5IHRpdGxlIHNob3cgdGhlIHJlYWwgZW50aXR5LCBpZGVhIGJ5IFJvbWFuIEtvbWFyb3ZcblByaXNtLmhvb2tzLmFkZCgnd3JhcCcsIGZ1bmN0aW9uKGVudikge1xuXG5cdGlmIChlbnYudHlwZSA9PT0gJ2VudGl0eScpIHtcblx0XHRlbnYuYXR0cmlidXRlc1sndGl0bGUnXSA9IGVudi5jb250ZW50LnJlcGxhY2UoLyZhbXA7LywgJyYnKTtcblx0fVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZywgJ2FkZElubGluZWQnLCB7XG5cdC8qKlxuXHQgKiBBZGRzIGFuIGlubGluZWQgbGFuZ3VhZ2UgdG8gbWFya3VwLlxuXHQgKlxuXHQgKiBBbiBleGFtcGxlIG9mIGFuIGlubGluZWQgbGFuZ3VhZ2UgaXMgQ1NTIHdpdGggYDxzdHlsZT5gIHRhZ3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWcgdGhhdCBjb250YWlucyB0aGUgaW5saW5lZCBsYW5ndWFnZS4gVGhpcyBuYW1lIHdpbGwgYmUgdHJlYXRlZCBhc1xuXHQgKiBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyBUaGUgbGFuZ3VhZ2Uga2V5LlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBhZGRJbmxpbmVkKCdzdHlsZScsICdjc3MnKTtcblx0ICovXG5cdHZhbHVlOiBmdW5jdGlvbiBhZGRJbmxpbmVkKHRhZ05hbWUsIGxhbmcpIHtcblx0XHR2YXIgaW5jbHVkZWRDZGF0YUluc2lkZSA9IHt9O1xuXHRcdGluY2x1ZGVkQ2RhdGFJbnNpZGVbJ2xhbmd1YWdlLScgKyBsYW5nXSA9IHtcblx0XHRcdHBhdHRlcm46IC8oXjwhXFxbQ0RBVEFcXFspW1xcc1xcU10rPyg/PVxcXVxcXT4kKS9pLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG5cdFx0fTtcblx0XHRpbmNsdWRlZENkYXRhSW5zaWRlWydjZGF0YSddID0gL148IVxcW0NEQVRBXFxbfFxcXVxcXT4kL2k7XG5cblx0XHR2YXIgaW5zaWRlID0ge1xuXHRcdFx0J2luY2x1ZGVkLWNkYXRhJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG5cdFx0XHRcdGluc2lkZTogaW5jbHVkZWRDZGF0YUluc2lkZVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0aW5zaWRlWydsYW5ndWFnZS0nICsgbGFuZ10gPSB7XG5cdFx0XHRwYXR0ZXJuOiAvW1xcc1xcU10rLyxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG5cdFx0fTtcblxuXHRcdHZhciBkZWYgPSB7fTtcblx0XHRkZWZbdGFnTmFtZV0gPSB7XG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoLyg8X19bXFxzXFxTXSo/PikoPzo8IVxcW0NEQVRBXFxbW1xcc1xcU10qP1xcXVxcXT5cXHMqfFtcXHNcXFNdKSo/KD89PFxcL19fPikvLnNvdXJjZS5yZXBsYWNlKC9fXy9nLCB0YWdOYW1lKSwgJ2knKSxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRncmVlZHk6IHRydWUsXG5cdFx0XHRpbnNpZGU6IGluc2lkZVxuXHRcdH07XG5cblx0XHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAnY2RhdGEnLCBkZWYpO1xuXHR9XG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLnhtbCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHt9KTtcblByaXNtLmxhbmd1YWdlcy5odG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5tYXRobWwgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLnN2ZyA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jc3MuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuXG5cdHZhciBzdHJpbmcgPSAvKFwifCcpKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS87XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmNzcyA9IHtcblx0XHQnY29tbWVudCc6IC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxcblx0XHQnYXRydWxlJzoge1xuXHRcdFx0cGF0dGVybjogL0BbXFx3LV0rW1xcc1xcU10qPyg/Ojt8KD89XFxzKlxceykpLyxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQncnVsZSc6IC9AW1xcdy1dKy9cblx0XHRcdFx0Ly8gU2VlIHJlc3QgYmVsb3dcblx0XHRcdH1cblx0XHR9LFxuXHRcdCd1cmwnOiB7XG5cdFx0XHRwYXR0ZXJuOiBSZWdFeHAoJ3VybFxcXFwoKD86JyArIHN0cmluZy5zb3VyY2UgKyAnfFteXFxuXFxyKCldKilcXFxcKScsICdpJyksXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J2Z1bmN0aW9uJzogL151cmwvaSxcblx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL15cXCh8XFwpJC9cblx0XHRcdH1cblx0XHR9LFxuXHRcdCdzZWxlY3Rvcic6IFJlZ0V4cCgnW157fVxcXFxzXSg/Oltee307XCJcXCddfCcgKyBzdHJpbmcuc291cmNlICsgJykqPyg/PVxcXFxzKlxcXFx7KScpLFxuXHRcdCdzdHJpbmcnOiB7XG5cdFx0XHRwYXR0ZXJuOiBzdHJpbmcsXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9LFxuXHRcdCdwcm9wZXJ0eSc6IC9bLV9hLXpcXHhBMC1cXHVGRkZGXVstXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKjopL2ksXG5cdFx0J2ltcG9ydGFudCc6IC8haW1wb3J0YW50XFxiL2ksXG5cdFx0J2Z1bmN0aW9uJzogL1stYS16MC05XSsoPz1cXCgpL2ksXG5cdFx0J3B1bmN0dWF0aW9uJzogL1soKXt9OzosXS9cblx0fTtcblxuXHRQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3M7XG5cblx0dmFyIG1hcmt1cCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5cdGlmIChtYXJrdXApIHtcblx0XHRtYXJrdXAudGFnLmFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuXG5cdFx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnaW5zaWRlJywgJ2F0dHItdmFsdWUnLCB7XG5cdFx0XHQnc3R5bGUtYXR0cic6IHtcblx0XHRcdFx0cGF0dGVybjogL1xccypzdHlsZT0oXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMS9pLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnYXR0ci1uYW1lJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL15cXHMqc3R5bGUvaSxcblx0XHRcdFx0XHRcdGluc2lkZTogbWFya3VwLnRhZy5pbnNpZGVcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9eXFxzKj1cXHMqWydcIl18WydcIl1cXHMqJC8sXG5cdFx0XHRcdFx0J2F0dHItdmFsdWUnOiB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuOiAvLisvaSxcblx0XHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0YWxpYXM6ICdsYW5ndWFnZS1jc3MnXG5cdFx0XHR9XG5cdFx0fSwgbWFya3VwLnRhZyk7XG5cdH1cblxufShQcmlzbSkpO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY2xpa2UuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuXHQnY29tbWVudCc6IFtcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fVxuXHRdLFxuXHQnc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdCdjbGFzcy1uYW1lJzoge1xuXHRcdHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQncHVuY3R1YXRpb24nOiAvWy5cXFxcXS9cblx0XHR9XG5cdH0sXG5cdCdrZXl3b3JkJzogL1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG5cdCdib29sZWFuJzogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcblx0J2Z1bmN0aW9uJzogL1xcdysoPz1cXCgpLyxcblx0J251bWJlcic6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcblx0J29wZXJhdG9yJzogL1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8sXG5cdCdwdW5jdHVhdGlvbic6IC9be31bXFxdOygpLC46XS9cbn07XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1qYXZhc2NyaXB0LmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG5cdCdjbGFzcy1uYW1lJzogW1xuXHRcdFByaXNtLmxhbmd1YWdlcy5jbGlrZVsnY2xhc3MtbmFtZSddLFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSlbXyRBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFwuKD86cHJvdG90eXBlfGNvbnN0cnVjdG9yKSkvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZVxuXHRcdH1cblx0XSxcblx0J2tleXdvcmQnOiBbXG5cdFx0e1xuXHRcdFx0cGF0dGVybjogLygoPzpefH0pXFxzKikoPzpjYXRjaHxmaW5hbGx5KVxcYi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W14uXSlcXGIoPzphc3xhc3luYyg/PVxccyooPzpmdW5jdGlvblxcYnxcXCh8WyRcXHdcXHhBMC1cXHVGRkZGXXwkKSl8YXdhaXR8YnJlYWt8Y2FzZXxjbGFzc3xjb25zdHxjb250aW51ZXxkZWJ1Z2dlcnxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0fSxcblx0XSxcblx0J251bWJlcic6IC9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sXG5cdC8vIEFsbG93IGZvciBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgKFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMDA4NDQ0KVxuXHQnZnVuY3Rpb24nOiAvIz9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKig/OlxcLlxccyooPzphcHBseXxiaW5kfGNhbGwpXFxzKik/XFwoKS8sXG5cdCdvcGVyYXRvcic6IC8tLXxcXCtcXCt8XFwqXFwqPT98PT58JiZ8XFx8XFx8fFshPV09PXw8PD0/fD4+Pj89P3xbLSsqLyUmfF4hPTw+XT0/fFxcLnszfXxcXD9bLj9dP3xbfjpdL1xufSk7XG5cblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0WydjbGFzcy1uYW1lJ11bMF0ucGF0dGVybiA9IC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfG5ldylcXHMrKVtcXHcuXFxcXF0rLztcblxuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdrZXl3b3JkJywge1xuXHQncmVnZXgnOiB7XG5cdFx0cGF0dGVybjogLygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc10pXFxzKilcXC8oPzpcXFsoPzpbXlxcXVxcXFxcXHJcXG5dfFxcXFwuKSpdfFxcXFwufFteL1xcXFxcXFtcXHJcXG5dKStcXC9bZ2lteXVzXXswLDZ9KD89XFxzKig/OiR8W1xcclxcbiwuO30pXFxdXSkpLyxcblx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQvLyBUaGlzIG11c3QgYmUgZGVjbGFyZWQgYmVmb3JlIGtleXdvcmQgYmVjYXVzZSB3ZSB1c2UgXCJmdW5jdGlvblwiIGluc2lkZSB0aGUgbG9vay1mb3J3YXJkXG5cdCdmdW5jdGlvbi12YXJpYWJsZSc6IHtcblx0XHRwYXR0ZXJuOiAvIz9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKls9Ol1cXHMqKD86YXN5bmNcXHMqKT8oPzpcXGJmdW5jdGlvblxcYnwoPzpcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKXxbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKVxccyo9PikpLyxcblx0XHRhbGlhczogJ2Z1bmN0aW9uJ1xuXHR9LFxuXHQncGFyYW1ldGVyJzogW1xuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oZnVuY3Rpb24oPzpcXHMrW18kQS1aYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKik/XFxzKlxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXCkpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0XHRpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG5cdFx0fSxcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo9PikvaSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKVxccyo9PikvLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oKD86XFxifFxcc3xeKSg/ISg/OmFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKSg/IVskXFx3XFx4QTAtXFx1RkZGRl0pKSg/OltfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSpcXHMqKVxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXClcXHMqXFx7KS8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0aW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuXHRcdH1cblx0XSxcblx0J2NvbnN0YW50JzogL1xcYltBLVpdKD86W0EtWl9dfFxcZHg/KSpcXGIvXG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdzdHJpbmcnLCB7XG5cdCd0ZW1wbGF0ZS1zdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogL2AoPzpcXFxcW1xcc1xcU118XFwkeyg/Oltee31dfHsoPzpbXnt9XXx7W159XSp9KSp9KSt9fCg/IVxcJHspW15cXFxcYF0pKmAvLFxuXHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCd0ZW1wbGF0ZS1wdW5jdHVhdGlvbic6IHtcblx0XHRcdFx0cGF0dGVybjogL15gfGAkLyxcblx0XHRcdFx0YWxpYXM6ICdzdHJpbmcnXG5cdFx0XHR9LFxuXHRcdFx0J2ludGVycG9sYXRpb24nOiB7XG5cdFx0XHRcdHBhdHRlcm46IC8oKD86XnxbXlxcXFxdKSg/OlxcXFx7Mn0pKilcXCR7KD86W157fV18eyg/Oltee31dfHtbXn1dKn0pKn0pK30vLFxuXHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0XHQnaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvbic6IHtcblx0XHRcdFx0XHRcdHBhdHRlcm46IC9eXFwke3x9JC8sXG5cdFx0XHRcdFx0XHRhbGlhczogJ3B1bmN0dWF0aW9uJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmVzdDogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdzdHJpbmcnOiAvW1xcc1xcU10rL1xuXHRcdH1cblx0fVxufSk7XG5cbmlmIChQcmlzbS5sYW5ndWFnZXMubWFya3VwKSB7XG5cdFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmFkZElubGluZWQoJ3NjcmlwdCcsICdqYXZhc2NyaXB0Jyk7XG59XG5cblByaXNtLmxhbmd1YWdlcy5qcyA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tZmlsZS1oaWdobGlnaHQuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0aWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyB8fCAhc2VsZi5QcmlzbSB8fCAhc2VsZi5kb2N1bWVudCB8fCAhZG9jdW1lbnQucXVlcnlTZWxlY3Rvcikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0VsZW1lbnR9IFtjb250YWluZXI9ZG9jdW1lbnRdXG5cdCAqL1xuXHRzZWxmLlByaXNtLmZpbGVIaWdobGlnaHQgPSBmdW5jdGlvbihjb250YWluZXIpIHtcblx0XHRjb250YWluZXIgPSBjb250YWluZXIgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgRXh0ZW5zaW9ucyA9IHtcblx0XHRcdCdqcyc6ICdqYXZhc2NyaXB0Jyxcblx0XHRcdCdweSc6ICdweXRob24nLFxuXHRcdFx0J3JiJzogJ3J1YnknLFxuXHRcdFx0J3BzMSc6ICdwb3dlcnNoZWxsJyxcblx0XHRcdCdwc20xJzogJ3Bvd2Vyc2hlbGwnLFxuXHRcdFx0J3NoJzogJ2Jhc2gnLFxuXHRcdFx0J2JhdCc6ICdiYXRjaCcsXG5cdFx0XHQnaCc6ICdjJyxcblx0XHRcdCd0ZXgnOiAnbGF0ZXgnXG5cdFx0fTtcblxuXHRcdEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdwcmVbZGF0YS1zcmNdJykpLmZvckVhY2goZnVuY3Rpb24gKHByZSkge1xuXHRcdFx0Ly8gaWdub3JlIGlmIGFscmVhZHkgbG9hZGVkXG5cdFx0XHRpZiAocHJlLmhhc0F0dHJpYnV0ZSgnZGF0YS1zcmMtbG9hZGVkJykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb2FkIGN1cnJlbnRcblx0XHRcdHZhciBzcmMgPSBwcmUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xuXG5cdFx0XHR2YXIgbGFuZ3VhZ2UsIHBhcmVudCA9IHByZTtcblx0XHRcdHZhciBsYW5nID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2k7XG5cdFx0XHR3aGlsZSAocGFyZW50ICYmICFsYW5nLnRlc3QocGFyZW50LmNsYXNzTmFtZSkpIHtcblx0XHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXJlbnQpIHtcblx0XHRcdFx0bGFuZ3VhZ2UgPSAocHJlLmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCAnJ10pWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWxhbmd1YWdlKSB7XG5cdFx0XHRcdHZhciBleHRlbnNpb24gPSAoc3JjLm1hdGNoKC9cXC4oXFx3KykkLykgfHwgWywgJyddKVsxXTtcblx0XHRcdFx0bGFuZ3VhZ2UgPSBFeHRlbnNpb25zW2V4dGVuc2lvbl0gfHwgZXh0ZW5zaW9uO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvZGUnKTtcblx0XHRcdGNvZGUuY2xhc3NOYW1lID0gJ2xhbmd1YWdlLScgKyBsYW5ndWFnZTtcblxuXHRcdFx0cHJlLnRleHRDb250ZW50ID0gJyc7XG5cblx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSAnTG9hZGluZ+KApic7XG5cblx0XHRcdHByZS5hcHBlbmRDaGlsZChjb2RlKTtcblxuXHRcdFx0dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHR4aHIub3BlbignR0VUJywgc3JjLCB0cnVlKTtcblxuXHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcblxuXHRcdFx0XHRcdGlmICh4aHIuc3RhdHVzIDwgNDAwICYmIHhoci5yZXNwb25zZVRleHQpIHtcblx0XHRcdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSB4aHIucmVzcG9uc2VUZXh0O1xuXG5cdFx0XHRcdFx0XHRQcmlzbS5oaWdobGlnaHRFbGVtZW50KGNvZGUpO1xuXHRcdFx0XHRcdFx0Ly8gbWFyayBhcyBsb2FkZWRcblx0XHRcdFx0XHRcdHByZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjLWxvYWRlZCcsICcnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoeGhyLnN0YXR1cyA+PSA0MDApIHtcblx0XHRcdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSAn4pyWIEVycm9yICcgKyB4aHIuc3RhdHVzICsgJyB3aGlsZSBmZXRjaGluZyBmaWxlOiAnICsgeGhyLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9ICfinJYgRXJyb3I6IEZpbGUgZG9lcyBub3QgZXhpc3Qgb3IgaXMgZW1wdHknO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0eGhyLnNlbmQobnVsbCk7XG5cdFx0fSk7XG5cdH07XG5cblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBleGVjdXRlIGluc2lkZSBoYW5kbGVyLCBmb3IgZHJvcHBpbmcgRXZlbnQgYXMgYXJndW1lbnRcblx0XHRzZWxmLlByaXNtLmZpbGVIaWdobGlnaHQoKTtcblx0fSk7XG5cbn0pKCk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIhZnVuY3Rpb24oZCl7ZnVuY3Rpb24gbihuLGUpe3JldHVybiBuPW4ucmVwbGFjZSgvPGlubmVyPi9nLFwiKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFxcblxccl18KD86XFxyP1xcbnxcXHIpKD8hXFxyP1xcbnxcXHIpKVwiKSxlJiYobj1uK1wifFwiK24ucmVwbGFjZSgvXy9nLFwiXFxcXCpcIikpLFJlZ0V4cChcIigoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcezJ9KSopKD86XCIrbitcIilcIil9dmFyIGU9XCIoPzpcXFxcXFxcXC58YGAuKz9gYHxgW15gXFxyXFxcXG5dK2B8W15cXFxcXFxcXHxcXHJcXFxcbmBdKStcIix0PVwiXFxcXHw/X18oPzpcXFxcfF9fKStcXFxcfD8oPzooPzpcXHI/XFxufFxccil8JClcIi5yZXBsYWNlKC9fXy9nLGUpLGE9XCJcXFxcfD9bIFxcdF0qOj8tezMsfTo/WyBcXHRdKig/OlxcXFx8WyBcXHRdKjo/LXszLH06P1sgXFx0XSopK1xcXFx8Pyg/Olxccj9cXG58XFxyKVwiO2QubGFuZ3VhZ2VzLm1hcmtkb3duPWQubGFuZ3VhZ2VzLmV4dGVuZChcIm1hcmt1cFwiLHt9KSxkLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJtYXJrZG93blwiLFwicHJvbG9nXCIse2Jsb2NrcXVvdGU6e3BhdHRlcm46L14+KD86W1xcdCBdKj4pKi9tLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sdGFibGU6e3BhdHRlcm46UmVnRXhwKFwiXlwiK3QrYStcIig/OlwiK3QrXCIpKlwiLFwibVwiKSxpbnNpZGU6e1widGFibGUtZGF0YS1yb3dzXCI6e3BhdHRlcm46UmVnRXhwKFwiXihcIit0K2ErXCIpKD86XCIrdCtcIikqJFwiKSxsb29rYmVoaW5kOiEwLGluc2lkZTp7XCJ0YWJsZS1kYXRhXCI6e3BhdHRlcm46UmVnRXhwKGUpLGluc2lkZTpkLmxhbmd1YWdlcy5tYXJrZG93bn0scHVuY3R1YXRpb246L1xcfC99fSxcInRhYmxlLWxpbmVcIjp7cGF0dGVybjpSZWdFeHAoXCJeKFwiK3QrXCIpXCIrYStcIiRcIiksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9cXHx8Oj8tezMsfTo/L319LFwidGFibGUtaGVhZGVyLXJvd1wiOntwYXR0ZXJuOlJlZ0V4cChcIl5cIit0K1wiJFwiKSxpbnNpZGU6e1widGFibGUtaGVhZGVyXCI6e3BhdHRlcm46UmVnRXhwKGUpLGFsaWFzOlwiaW1wb3J0YW50XCIsaW5zaWRlOmQubGFuZ3VhZ2VzLm1hcmtkb3dufSxwdW5jdHVhdGlvbjovXFx8L319fX0sY29kZTpbe3BhdHRlcm46LyheWyBcXHRdKig/Olxccj9cXG58XFxyKSkoPzogezR9fFxcdCkuKyg/Oig/Olxccj9cXG58XFxyKSg/OiB7NH18XFx0KS4rKSovbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwia2V5d29yZFwifSx7cGF0dGVybjovYGAuKz9gYHxgW15gXFxyXFxuXStgLyxhbGlhczpcImtleXdvcmRcIn0se3BhdHRlcm46L15gYGBbXFxzXFxTXSo/XmBgYCQvbSxncmVlZHk6ITAsaW5zaWRlOntcImNvZGUtYmxvY2tcIjp7cGF0dGVybjovXihgYGAuKig/Olxccj9cXG58XFxyKSlbXFxzXFxTXSs/KD89KD86XFxyP1xcbnxcXHIpXmBgYCQpL20sbG9va2JlaGluZDohMH0sXCJjb2RlLWxhbmd1YWdlXCI6e3BhdHRlcm46L14oYGBgKS4rLyxsb29rYmVoaW5kOiEwfSxwdW5jdHVhdGlvbjovYGBgL319XSx0aXRsZTpbe3BhdHRlcm46L1xcUy4qKD86XFxyP1xcbnxcXHIpKD86PT0rfC0tKykoPz1bIFxcdF0qJCkvbSxhbGlhczpcImltcG9ydGFudFwiLGluc2lkZTp7cHVuY3R1YXRpb246Lz09KyR8LS0rJC99fSx7cGF0dGVybjovKF5cXHMqKSMrLisvbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwiaW1wb3J0YW50XCIsaW5zaWRlOntwdW5jdHVhdGlvbjovXiMrfCMrJC99fV0saHI6e3BhdHRlcm46LyheXFxzKikoWyotXSkoPzpbXFx0IF0qXFwyKXsyLH0oPz1cXHMqJCkvbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sbGlzdDp7cGF0dGVybjovKF5cXHMqKSg/OlsqKy1dfFxcZCtcXC4pKD89W1xcdCBdLikvbSxsb29rYmVoaW5kOiEwLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sXCJ1cmwtcmVmZXJlbmNlXCI6e3BhdHRlcm46LyE/XFxbW15cXF1dK1xcXTpbXFx0IF0rKD86XFxTK3w8KD86XFxcXC58W14+XFxcXF0pKz4pKD86W1xcdCBdKyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkpPy8saW5zaWRlOnt2YXJpYWJsZTp7cGF0dGVybjovXighP1xcWylbXlxcXV0rLyxsb29rYmVoaW5kOiEwfSxzdHJpbmc6Lyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkkLyxwdW5jdHVhdGlvbjovXltcXFtcXF0hOl18Wzw+XS99LGFsaWFzOlwidXJsXCJ9LGJvbGQ6e3BhdHRlcm46bihcIl9fKD86KD8hXyk8aW5uZXI+fF8oPzooPyFfKTxpbm5lcj4pK18pK19fXCIsITApLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwLGluc2lkZTp7Y29udGVudDp7cGF0dGVybjovKF4uLilbXFxzXFxTXSsoPz0uLiQpLyxsb29rYmVoaW5kOiEwLGluc2lkZTp7fX0scHVuY3R1YXRpb246L1xcKlxcKnxfXy99fSxpdGFsaWM6e3BhdHRlcm46bihcIl8oPzooPyFfKTxpbm5lcj58X18oPzooPyFfKTxpbm5lcj4pK19fKStfXCIsITApLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwLGluc2lkZTp7Y29udGVudDp7cGF0dGVybjovKF4uKVtcXHNcXFNdKyg/PS4kKS8sbG9va2JlaGluZDohMCxpbnNpZGU6e319LHB1bmN0dWF0aW9uOi9bKl9dL319LHN0cmlrZTp7cGF0dGVybjpuKFwiKH5+PykoPzooPyF+KTxpbm5lcj4pKz9cXFxcMlwiLCExKSxsb29rYmVoaW5kOiEwLGdyZWVkeTohMCxpbnNpZGU6e2NvbnRlbnQ6e3BhdHRlcm46Lyhefn4/KVtcXHNcXFNdKyg/PVxcMSQpLyxsb29rYmVoaW5kOiEwLGluc2lkZTp7fX0scHVuY3R1YXRpb246L35+Py99fSx1cmw6e3BhdHRlcm46bignIT9cXFxcWyg/Oig/IVxcXFxdKTxpbm5lcj4pK1xcXFxdKD86XFxcXChbXlxcXFxzKV0rKD86W1xcdCBdK1wiKD86XFxcXFxcXFwufFteXCJcXFxcXFxcXF0pKlwiKT9cXFxcKXwgP1xcXFxbKD86KD8hXFxcXF0pPGlubmVyPikrXFxcXF0pJywhMSksbG9va2JlaGluZDohMCxncmVlZHk6ITAsaW5zaWRlOnt2YXJpYWJsZTp7cGF0dGVybjovKFxcWylbXlxcXV0rKD89XFxdJCkvLGxvb2tiZWhpbmQ6ITB9LGNvbnRlbnQ6e3BhdHRlcm46LyheIT9cXFspW15cXF1dKyg/PVxcXSkvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOnt9fSxzdHJpbmc6e3BhdHRlcm46L1wiKD86XFxcXC58W15cIlxcXFxdKSpcIig/PVxcKSQpL319fX0pLFtcInVybFwiLFwiYm9sZFwiLFwiaXRhbGljXCIsXCJzdHJpa2VcIl0uZm9yRWFjaChmdW5jdGlvbihlKXtbXCJ1cmxcIixcImJvbGRcIixcIml0YWxpY1wiLFwic3RyaWtlXCJdLmZvckVhY2goZnVuY3Rpb24obil7ZSE9PW4mJihkLmxhbmd1YWdlcy5tYXJrZG93bltlXS5pbnNpZGUuY29udGVudC5pbnNpZGVbbl09ZC5sYW5ndWFnZXMubWFya2Rvd25bbl0pfSl9KSxkLmhvb2tzLmFkZChcImFmdGVyLXRva2VuaXplXCIsZnVuY3Rpb24obil7XCJtYXJrZG93blwiIT09bi5sYW5ndWFnZSYmXCJtZFwiIT09bi5sYW5ndWFnZXx8IWZ1bmN0aW9uIG4oZSl7aWYoZSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciB0PTAsYT1lLmxlbmd0aDt0PGE7dCsrKXt2YXIgaT1lW3RdO2lmKFwiY29kZVwiPT09aS50eXBlKXt2YXIgcj1pLmNvbnRlbnRbMV0sbz1pLmNvbnRlbnRbM107aWYociYmbyYmXCJjb2RlLWxhbmd1YWdlXCI9PT1yLnR5cGUmJlwiY29kZS1ibG9ja1wiPT09by50eXBlJiZcInN0cmluZ1wiPT10eXBlb2Ygci5jb250ZW50KXt2YXIgbD1cImxhbmd1YWdlLVwiK3IuY29udGVudC50cmltKCkuc3BsaXQoL1xccysvKVswXS50b0xvd2VyQ2FzZSgpO28uYWxpYXM/XCJzdHJpbmdcIj09dHlwZW9mIG8uYWxpYXM/by5hbGlhcz1bby5hbGlhcyxsXTpvLmFsaWFzLnB1c2gobCk6by5hbGlhcz1bbF19fWVsc2UgbihpLmNvbnRlbnQpfX0obi50b2tlbnMpfSksZC5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24obil7aWYoXCJjb2RlLWJsb2NrXCI9PT1uLnR5cGUpe2Zvcih2YXIgZT1cIlwiLHQ9MCxhPW4uY2xhc3Nlcy5sZW5ndGg7dDxhO3QrKyl7dmFyIGk9bi5jbGFzc2VzW3RdLHI9L2xhbmd1YWdlLSguKykvLmV4ZWMoaSk7aWYocil7ZT1yWzFdO2JyZWFrfX12YXIgbz1kLmxhbmd1YWdlc1tlXTtpZihvKXt2YXIgbD1uLmNvbnRlbnQucmVwbGFjZSgvJmx0Oy9nLFwiPFwiKS5yZXBsYWNlKC8mYW1wOy9nLFwiJlwiKTtuLmNvbnRlbnQ9ZC5oaWdobGlnaHQobCxvLGUpfWVsc2UgaWYoZSYmXCJub25lXCIhPT1lJiZkLnBsdWdpbnMuYXV0b2xvYWRlcil7dmFyIHM9XCJtZC1cIisobmV3IERhdGUpLnZhbHVlT2YoKStcIi1cIitNYXRoLmZsb29yKDFlMTYqTWF0aC5yYW5kb20oKSk7bi5hdHRyaWJ1dGVzLmlkPXMsZC5wbHVnaW5zLmF1dG9sb2FkZXIubG9hZExhbmd1YWdlcyhlLGZ1bmN0aW9uKCl7dmFyIG49ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocyk7biYmKG4uaW5uZXJIVE1MPWQuaGlnaGxpZ2h0KG4udGV4dENvbnRlbnQsZC5sYW5ndWFnZXNbZV0sZSkpfSl9fX0pLGQubGFuZ3VhZ2VzLm1kPWQubGFuZ3VhZ2VzLm1hcmtkb3dufShQcmlzbSk7IiwiUHJpc20ubGFuZ3VhZ2VzLndpa2k9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcIm1hcmt1cFwiLHtcImJsb2NrLWNvbW1lbnRcIjp7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwiY29tbWVudFwifSxoZWFkaW5nOntwYXR0ZXJuOi9eKD0rKS4rP1xcMS9tLGluc2lkZTp7cHVuY3R1YXRpb246L149K3w9KyQvLGltcG9ydGFudDovLisvfX0sZW1waGFzaXM6e3BhdHRlcm46LygnezIsNX0pLis/XFwxLyxpbnNpZGU6e1wiYm9sZC1pdGFsaWNcIjp7cGF0dGVybjovKCcnJycnKS4rPyg/PVxcMSkvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6W1wiYm9sZFwiLFwiaXRhbGljXCJdfSxib2xkOntwYXR0ZXJuOi8oJycnKVteJ10oPzouKj9bXiddKT8oPz1cXDEpLyxsb29rYmVoaW5kOiEwfSxpdGFsaWM6e3BhdHRlcm46LygnJylbXiddKD86Lio/W14nXSk/KD89XFwxKS8sbG9va2JlaGluZDohMH0scHVuY3R1YXRpb246L14nJyt8JycrJC99fSxocjp7cGF0dGVybjovXi17NCx9L20sYWxpYXM6XCJwdW5jdHVhdGlvblwifSx1cmw6Wy9JU0JOICsoPzo5N1s4OV1bIC1dPyk/KD86XFxkWyAtXT8pezl9W1xcZHhdXFxifCg/OlJGQ3xQTUlEKSArXFxkKy9pLC9cXFtcXFsuKz9cXF1cXF18XFxbLis/XFxdL10sdmFyaWFibGU6Wy9fX1tBLVpdK19fLywvXFx7ezN9Lis/XFx9ezN9LywvXFx7XFx7Lis/XFx9XFx9L10sc3ltYm9sOlsvXiNyZWRpcmVjdC9pbSwvfnszLDV9L10sXCJ0YWJsZS10YWdcIjp7cGF0dGVybjovKCg/Ol58W3whXSlbfCFdKVtefFxcclxcbl0rXFx8KD8hXFx8KS9tLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntcInRhYmxlLWJhclwiOntwYXR0ZXJuOi9cXHwkLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LHJlc3Q6UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlfX0scHVuY3R1YXRpb246L14oPzpcXHtcXHx8XFx8XFx9fFxcfC18WyojOjshfF0pfFxcfFxcfHwhIS9tfSksUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcIndpa2lcIixcInRhZ1wiLHtub3dpa2k6e3BhdHRlcm46Lzwobm93aWtpfHByZXxzb3VyY2UpXFxiW1xcc1xcU10qPz5bXFxzXFxTXSo/PFxcL1xcMT4vaSxpbnNpZGU6e3RhZzp7cGF0dGVybjovPCg/Om5vd2lraXxwcmV8c291cmNlKVxcYltcXHNcXFNdKj8+fDxcXC8oPzpub3dpa2l8cHJlfHNvdXJjZSk+L2ksaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZX19fX0pOyIsIlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLlByaXNtJiZzZWxmLmRvY3VtZW50JiZQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20ucGx1Z2lucy5VbmVzY2FwZWRNYXJrdXA9ITAsUHJpc20uaG9va3MuYWRkKFwiYmVmb3JlLWhpZ2hsaWdodGFsbFwiLGZ1bmN0aW9uKGUpe2Uuc2VsZWN0b3IrPVwiLCBbY2xhc3MqPSdsYW5nLSddIHNjcmlwdFt0eXBlPSd0ZXh0L3BsYWluJ10sIFtjbGFzcyo9J2xhbmd1YWdlLSddIHNjcmlwdFt0eXBlPSd0ZXh0L3BsYWluJ10sIHNjcmlwdFt0eXBlPSd0ZXh0L3BsYWluJ11bY2xhc3MqPSdsYW5nLSddLCBzY3JpcHRbdHlwZT0ndGV4dC9wbGFpbiddW2NsYXNzKj0nbGFuZ3VhZ2UtJ11cIn0pLFByaXNtLmhvb2tzLmFkZChcImJlZm9yZS1zYW5pdHktY2hlY2tcIixmdW5jdGlvbih0KXtpZigodC5lbGVtZW50Lm1hdGNoZXN8fHQuZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvcikuY2FsbCh0LmVsZW1lbnQsXCJzY3JpcHRbdHlwZT0ndGV4dC9wbGFpbiddXCIpKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY29kZVwiKTtyZXR1cm4oYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpKS5jbGFzc05hbWU9ZS5jbGFzc05hbWU9dC5lbGVtZW50LmNsYXNzTmFtZSx0LmVsZW1lbnQuZGF0YXNldCYmT2JqZWN0LmtleXModC5lbGVtZW50LmRhdGFzZXQpLmZvckVhY2goZnVuY3Rpb24oZSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQuZWxlbWVudC5kYXRhc2V0LGUpJiYoYS5kYXRhc2V0W2VdPXQuZWxlbWVudC5kYXRhc2V0W2VdKX0pLHQuY29kZT10LmNvZGUucmVwbGFjZSgvJmx0O1xcL3NjcmlwdCg+fCZndDspL2dpLFwiPFxcL3NjcmlwdD5cIiksZS50ZXh0Q29udGVudD10LmNvZGUsYS5hcHBlbmRDaGlsZChlKSx0LmVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoYSx0LmVsZW1lbnQpLHZvaWQodC5lbGVtZW50PWUpfXZhciBhPXQuZWxlbWVudC5wYXJlbnROb2RlOyF0LmNvZGUmJmEmJlwicHJlXCI9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmdC5lbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoJiZcIiNjb21tZW50XCI9PXQuZWxlbWVudC5jaGlsZE5vZGVzWzBdLm5vZGVOYW1lJiYodC5lbGVtZW50LnRleHRDb250ZW50PXQuY29kZT10LmVsZW1lbnQuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudCl9KSk7IiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS02LTEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ByaXNtLXVuZXNjYXBlZC1tYXJrdXAuY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmIChjb250ZW50LmxvY2Fscykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xufVxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS02LTEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ByaXNtLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNi0xIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcmlzbS1va2FpZGlhLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIiFmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLlByaXNtJiZzZWxmLmRvY3VtZW50KXt2YXIgcj1bXSxpPXt9LGE9ZnVuY3Rpb24oKXt9O1ByaXNtLnBsdWdpbnMudG9vbGJhcj17fTt2YXIgdD1QcmlzbS5wbHVnaW5zLnRvb2xiYXIucmVnaXN0ZXJCdXR0b249ZnVuY3Rpb24odCxhKXt2YXIgZTtlPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YTpmdW5jdGlvbih0KXt2YXIgZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBhLm9uQ2xpY2s/KChlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIikpLnR5cGU9XCJidXR0b25cIixlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKCl7YS5vbkNsaWNrLmNhbGwodGhpcyx0KX0pKTpcInN0cmluZ1wiPT10eXBlb2YgYS51cmw/KGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikpLmhyZWY9YS51cmw6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxhLmNsYXNzTmFtZSYmZS5jbGFzc0xpc3QuYWRkKGEuY2xhc3NOYW1lKSxlLnRleHRDb250ZW50PWEudGV4dCxlfSx0IGluIGk/Y29uc29sZS53YXJuKCdUaGVyZSBpcyBhIGJ1dHRvbiB3aXRoIHRoZSBrZXkgXCInK3QrJ1wiIHJlZ2lzdGVyZWQgYWxyZWFkeS4nKTpyLnB1c2goaVt0XT1lKX0sZT1QcmlzbS5wbHVnaW5zLnRvb2xiYXIuaG9vaz1mdW5jdGlvbihuKXt2YXIgdD1uLmVsZW1lbnQucGFyZW50Tm9kZTtpZih0JiYvcHJlL2kudGVzdCh0Lm5vZGVOYW1lKSYmIXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJjb2RlLXRvb2xiYXJcIikpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5jbGFzc0xpc3QuYWRkKFwiY29kZS10b29sYmFyXCIpLHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0KSxlLmFwcGVuZENoaWxkKHQpO3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7by5jbGFzc0xpc3QuYWRkKFwidG9vbGJhclwiKSxkb2N1bWVudC5ib2R5Lmhhc0F0dHJpYnV0ZShcImRhdGEtdG9vbGJhci1vcmRlclwiKSYmKHI9ZG9jdW1lbnQuYm9keS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvb2xiYXItb3JkZXJcIikuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gaVt0XXx8YX0pKSxyLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dChuKTtpZihlKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2EuY2xhc3NMaXN0LmFkZChcInRvb2xiYXItaXRlbVwiKSxhLmFwcGVuZENoaWxkKGUpLG8uYXBwZW5kQ2hpbGQoYSl9fSksZS5hcHBlbmRDaGlsZChvKX19O3QoXCJsYWJlbFwiLGZ1bmN0aW9uKHQpe3ZhciBlPXQuZWxlbWVudC5wYXJlbnROb2RlO2lmKGUmJi9wcmUvaS50ZXN0KGUubm9kZU5hbWUpJiZlLmhhc0F0dHJpYnV0ZShcImRhdGEtbGFiZWxcIikpe3ZhciBhLG4sbz1lLmdldEF0dHJpYnV0ZShcImRhdGEtbGFiZWxcIik7dHJ5e249ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRlbXBsYXRlI1wiK28pfWNhdGNoKHQpe31yZXR1cm4gbj9hPW4uY29udGVudDooZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXVybFwiKT8oYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSkuaHJlZj1lLmdldEF0dHJpYnV0ZShcImRhdGEtdXJsXCIpOmE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksYS50ZXh0Q29udGVudD1vKSxhfX0pLFByaXNtLmhvb2tzLmFkZChcImNvbXBsZXRlXCIsZSl9fSgpOyIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tNi0xIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcmlzbS10b29sYmFyLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cbiIsIiFmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLlByaXNtJiZzZWxmLmRvY3VtZW50KWlmKFByaXNtLnBsdWdpbnMudG9vbGJhcil7dmFyIHI9d2luZG93LkNsaXBib2FyZEpTfHx2b2lkIDA7cnx8XCJmdW5jdGlvblwiIT10eXBlb2YgcmVxdWlyZXx8KHI9cmVxdWlyZShcImNsaXBib2FyZFwiKSk7dmFyIGk9W107aWYoIXIpe3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaGVhZFwiKTtvLm9ubG9hZD1mdW5jdGlvbigpe2lmKHI9d2luZG93LkNsaXBib2FyZEpTKWZvcig7aS5sZW5ndGg7KWkucG9wKCkoKX0sby5zcmM9XCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9jbGlwYm9hcmQuanMvMi4wLjAvY2xpcGJvYXJkLm1pbi5qc1wiLGUuYXBwZW5kQ2hpbGQobyl9UHJpc20ucGx1Z2lucy50b29sYmFyLnJlZ2lzdGVyQnV0dG9uKFwiY29weS10by1jbGlwYm9hcmRcIixmdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO3JldHVybiB0LnRleHRDb250ZW50PVwiQ29weVwiLHI/bygpOmkucHVzaChvKSx0O2Z1bmN0aW9uIG8oKXt2YXIgbz1uZXcgcih0LHt0ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY29kZX19KTtvLm9uKFwic3VjY2Vzc1wiLGZ1bmN0aW9uKCl7dC50ZXh0Q29udGVudD1cIkNvcGllZCFcIixuKCl9KSxvLm9uKFwiZXJyb3JcIixmdW5jdGlvbigpe3QudGV4dENvbnRlbnQ9XCJQcmVzcyBDdHJsK0MgdG8gY29weVwiLG4oKX0pfWZ1bmN0aW9uIG4oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC50ZXh0Q29udGVudD1cIkNvcHlcIn0sNWUzKX19KX1lbHNlIGNvbnNvbGUud2FybihcIkNvcHkgdG8gQ2xpcGJvYXJkIHBsdWdpbiBsb2FkZWQgYmVmb3JlIFRvb2xiYXIgcGx1Z2luLlwiKX0oKTsiLCIvKiFcbiAqIGNsaXBib2FyZC5qcyB2Mi4wLjRcbiAqIGh0dHBzOi8vemVub3JvY2hhLmdpdGh1Yi5pby9jbGlwYm9hcmQuanNcbiAqIFxuICogTGljZW5zZWQgTUlUIMKpIFplbm8gUm9jaGFcbiAqL1xuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQ2xpcGJvYXJkSlNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQ2xpcGJvYXJkSlNcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY2xpcGJvYXJkQWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9jbGlwYm9hcmRBY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkQWN0aW9uKTtcblxudmFyIF90aW55RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfdGlueUVtaXR0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGlueUVtaXR0ZXIpO1xuXG52YXIgX2dvb2RMaXN0ZW5lciA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfZ29vZExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dvb2RMaXN0ZW5lcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIHdoaWNoIHRha2VzIG9uZSBvciBtb3JlIGVsZW1lbnRzLCBhZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGVtLFxuICogYW5kIGluc3RhbnRpYXRlcyBhIG5ldyBgQ2xpcGJvYXJkQWN0aW9uYCBvbiBlYWNoIGNsaWNrLlxuICovXG52YXIgQ2xpcGJvYXJkID0gZnVuY3Rpb24gKF9FbWl0dGVyKSB7XG4gICAgX2luaGVyaXRzKENsaXBib2FyZCwgX0VtaXR0ZXIpO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IHRyaWdnZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIENsaXBib2FyZCh0cmlnZ2VyLCBvcHRpb25zKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmQpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDbGlwYm9hcmQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDbGlwYm9hcmQpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgICBfdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgX3RoaXMubGlzdGVuQ2xpY2sodHJpZ2dlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGlmIGF0dHJpYnV0ZXMgd291bGQgYmUgcmVzb2x2ZWQgdXNpbmcgaW50ZXJuYWwgc2V0dGVyIGZ1bmN0aW9uc1xuICAgICAqIG9yIGN1c3RvbSBmdW5jdGlvbnMgdGhhdCB3ZXJlIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKENsaXBib2FyZCwgW3tcbiAgICAgICAga2V5OiAncmVzb2x2ZU9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gdHlwZW9mIG9wdGlvbnMuYWN0aW9uID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5hY3Rpb24gOiB0aGlzLmRlZmF1bHRBY3Rpb247XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHR5cGVvZiBvcHRpb25zLnRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMudGFyZ2V0IDogdGhpcy5kZWZhdWx0VGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdHlwZW9mIG9wdGlvbnMudGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMudGV4dCA6IHRoaXMuZGVmYXVsdFRleHQ7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IF90eXBlb2Yob3B0aW9ucy5jb250YWluZXIpID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuY29udGFpbmVyIDogZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgY2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHBhc3NlZCB0cmlnZ2VyLlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudHxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gdHJpZ2dlclxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdGVuQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuQ2xpY2sodHJpZ2dlcikge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSAoMCwgX2dvb2RMaXN0ZW5lcjIuZGVmYXVsdCkodHJpZ2dlciwgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGEgbmV3IGBDbGlwYm9hcmRBY3Rpb25gIG9uIGVhY2ggY2xpY2sgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlciA9IGUuZGVsZWdhdGVUYXJnZXQgfHwgZS5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbmV3IF9jbGlwYm9hcmRBY3Rpb24yLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24odHJpZ2dlciksXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCh0cmlnZ2VyKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQodHJpZ2dlciksXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgYGFjdGlvbmAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlZmF1bHRBY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoJ2FjdGlvbicsIHRyaWdnZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgYHRhcmdldGAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlZmF1bHRUYXJnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRBdHRyaWJ1dGVWYWx1ZSgndGFyZ2V0JywgdHJpZ2dlcik7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBzdXBwb3J0IG9mIHRoZSBnaXZlbiBhY3Rpb24sIG9yIGFsbCBhY3Rpb25zIGlmIG5vIGFjdGlvbiBpc1xuICAgICAgICAgKiBnaXZlbi5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFthY3Rpb25dXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZWZhdWx0VGV4dCcsXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBgdGV4dGAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoJ3RleHQnLCB0cmlnZ2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0cm95IGxpZmVjeWNsZS5cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2lzU3VwcG9ydGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydjb3B5JywgJ2N1dCddO1xuXG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnID8gW2FjdGlvbl0gOiBhY3Rpb247XG4gICAgICAgICAgICB2YXIgc3VwcG9ydCA9ICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkO1xuXG4gICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHN1cHBvcnQgPSBzdXBwb3J0ICYmICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKGFjdGlvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnQ7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2xpcGJvYXJkO1xufShfdGlueUVtaXR0ZXIyLmRlZmF1bHQpO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byByZXRyaWV2ZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3VmZml4XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZVZhbHVlKHN1ZmZpeCwgZWxlbWVudCkge1xuICAgIHZhciBhdHRyaWJ1dGUgPSAnZGF0YS1jbGlwYm9hcmQtJyArIHN1ZmZpeDtcblxuICAgIGlmICghZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3NlbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfc2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogSW5uZXIgY2xhc3Mgd2hpY2ggcGVyZm9ybXMgc2VsZWN0aW9uIGZyb20gZWl0aGVyIGB0ZXh0YCBvciBgdGFyZ2V0YFxuICogcHJvcGVydGllcyBhbmQgdGhlbiBleGVjdXRlcyBjb3B5IG9yIGN1dCBvcGVyYXRpb25zLlxuICovXG52YXIgQ2xpcGJvYXJkQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ2xpcGJvYXJkQWN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZEFjdGlvbik7XG5cbiAgICAgICAgdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0U2VsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBiYXNlIHByb3BlcnRpZXMgcGFzc2VkIGZyb20gY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKENsaXBib2FyZEFjdGlvbiwgW3tcbiAgICAgICAga2V5OiAncmVzb2x2ZU9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gb3B0aW9ucy5hY3Rpb247XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gb3B0aW9ucy5lbWl0dGVyO1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBvcHRpb25zLnRhcmdldDtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IG9wdGlvbnMudGV4dDtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlcjtcblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNpZGVzIHdoaWNoIHNlbGVjdGlvbiBzdHJhdGVneSBpcyBnb2luZyB0byBiZSBhcHBsaWVkIGJhc2VkXG4gICAgICAgICAqIG9uIHRoZSBleGlzdGVuY2Ugb2YgYHRleHRgIGFuZCBgdGFyZ2V0YCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaW5pdFNlbGVjdGlvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0U2VsZWN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0RmFrZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFyZ2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIGZha2UgdGV4dGFyZWEgZWxlbWVudCwgc2V0cyBpdHMgdmFsdWUgZnJvbSBgdGV4dGAgcHJvcGVydHksXG4gICAgICAgICAqIGFuZCBtYWtlcyBhIHNlbGVjdGlvbiBvbiBpdC5cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbGVjdEZha2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0RmFrZSgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBpc1JUTCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RpcicpID09ICdydGwnO1xuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcblxuICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVGYWtlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlciA9IHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKSB8fCB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgem9vbWluZyBvbiBpT1NcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuZm9udFNpemUgPSAnMTJwdCc7XG4gICAgICAgICAgICAvLyBSZXNldCBib3ggbW9kZWxcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuYm9yZGVyID0gJzAnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wYWRkaW5nID0gJzAnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICAgICAgICAvLyBNb3ZlIGVsZW1lbnQgb3V0IG9mIHNjcmVlbiBob3Jpem9udGFsbHlcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZVtpc1JUTCA/ICdyaWdodCcgOiAnbGVmdCddID0gJy05OTk5cHgnO1xuICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50IHRvIHRoZSBzYW1lIHBvc2l0aW9uIHZlcnRpY2FsbHlcbiAgICAgICAgICAgIHZhciB5UG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUudG9wID0geVBvc2l0aW9uICsgJ3B4JztcblxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS52YWx1ZSA9IHRoaXMudGV4dDtcblxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5mYWtlRWxlbSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gKDAsIF9zZWxlY3QyLmRlZmF1bHQpKHRoaXMuZmFrZUVsZW0pO1xuICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9ubHkgcmVtb3ZlcyB0aGUgZmFrZSBlbGVtZW50IGFmdGVyIGFub3RoZXIgY2xpY2sgZXZlbnQsIHRoYXQgd2F5XG4gICAgICAgICAqIGEgdXNlciBjYW4gaGl0IGBDdHJsK0NgIHRvIGNvcHkgYmVjYXVzZSBzZWxlY3Rpb24gc3RpbGwgZXhpc3RzLlxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVtb3ZlRmFrZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVGYWtlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZmFrZUhhbmRsZXJDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUVsZW0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmZha2VFbGVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VFbGVtID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3RzIHRoZSBjb250ZW50IGZyb20gZWxlbWVudCBwYXNzZWQgb24gYHRhcmdldGAgcHJvcGVydHkuXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZWxlY3RUYXJnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0VGFyZ2V0KCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRleHQgPSAoMCwgX3NlbGVjdDIuZGVmYXVsdCkodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4ZWN1dGVzIHRoZSBjb3B5IG9wZXJhdGlvbiBiYXNlZCBvbiB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb3B5VGV4dCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5VGV4dCgpIHtcbiAgICAgICAgICAgIHZhciBzdWNjZWVkZWQgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5hY3Rpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzdWx0KHN1Y2NlZWRlZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgYW4gZXZlbnQgYmFzZWQgb24gdGhlIGNvcHkgb3BlcmF0aW9uIHJlc3VsdC5cbiAgICAgICAgICogQHBhcmFtIHtCb29sZWFufSBzdWNjZWVkZWRcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhbmRsZVJlc3VsdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoc3VjY2VlZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChzdWNjZWVkZWQgPyAnc3VjY2VzcycgOiAnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvbixcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnNlbGVjdGVkVGV4dCxcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0aGlzLnRyaWdnZXIsXG4gICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb246IHRoaXMuY2xlYXJTZWxlY3Rpb24uYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTW92ZXMgZm9jdXMgYXdheSBmcm9tIGB0YXJnZXRgIGFuZCBiYWNrIHRvIHRoZSB0cmlnZ2VyLCByZW1vdmVzIGN1cnJlbnQgc2VsZWN0aW9uLlxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2xlYXJTZWxlY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBgYWN0aW9uYCB0byBiZSBwZXJmb3JtZWQgd2hpY2ggY2FuIGJlIGVpdGhlciAnY29weScgb3IgJ2N1dCcuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhY3Rpb25cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc3Ryb3kgbGlmZWN5Y2xlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWN0aW9uJyxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnY29weSc7XG5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGlvbiAhPT0gJ2NvcHknICYmIHRoaXMuX2FjdGlvbiAhPT0gJ2N1dCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJhY3Rpb25cIiB2YWx1ZSwgdXNlIGVpdGhlciBcImNvcHlcIiBvciBcImN1dFwiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgYGFjdGlvbmAgcHJvcGVydHkuXG4gICAgICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgICxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGB0YXJnZXRgIHByb3BlcnR5IHVzaW5nIGFuIGVsZW1lbnRcbiAgICAgICAgICogdGhhdCB3aWxsIGJlIGhhdmUgaXRzIGNvbnRlbnQgY29waWVkLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAndGFyZ2V0JyxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXQpKSA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2NvcHknICYmIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gUGxlYXNlIHVzZSBcInJlYWRvbmx5XCIgaW5zdGVhZCBvZiBcImRpc2FibGVkXCIgYXR0cmlidXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb24gPT09ICdjdXQnICYmICh0YXJnZXQuaGFzQXR0cmlidXRlKCdyZWFkb25seScpIHx8IHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiBhdHRyaWJ1dGUuIFlvdSBjYW5cXCd0IGN1dCB0ZXh0IGZyb20gZWxlbWVudHMgd2l0aCBcInJlYWRvbmx5XCIgb3IgXCJkaXNhYmxlZFwiIGF0dHJpYnV0ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJ0YXJnZXRcIiB2YWx1ZSwgdXNlIGEgdmFsaWQgRWxlbWVudCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBgdGFyZ2V0YCBwcm9wZXJ0eS5cbiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfEhUTUxFbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2xpcGJvYXJkQWN0aW9uO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsaXBib2FyZEFjdGlvbjtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIHNlbGVjdChlbGVtZW50KSB7XG4gICAgdmFyIHNlbGVjdGVkVGV4dDtcblxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHZhciBpc1JlYWRPbmx5ID0gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5Jyk7XG5cbiAgICAgICAgaWYgKCFpc1JlYWRPbmx5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNlbGVjdCgpO1xuICAgICAgICBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKDAsIGVsZW1lbnQudmFsdWUubGVuZ3RoKTtcblxuICAgICAgICBpZiAoIWlzUmVhZE9ubHkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJykpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG5cbiAgICAgICAgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGVkVGV4dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZWxlY3Q7XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIGRlbGVnYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuLyoqXG4gKiBWYWxpZGF0ZXMgYWxsIHBhcmFtcyBhbmQgY2FsbHMgdGhlIHJpZ2h0XG4gKiBsaXN0ZW5lciBmdW5jdGlvbiBiYXNlZCBvbiBpdHMgdGFyZ2V0IHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQgJiYgIXR5cGUgJiYgIWNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzLnN0cmluZyh0eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIFN0cmluZycpO1xuICAgIH1cblxuICAgIGlmICghaXMuZm4oY2FsbGJhY2spKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXJkIGFyZ3VtZW50IG11c3QgYmUgYSBGdW5jdGlvbicpO1xuICAgIH1cblxuICAgIGlmIChpcy5ub2RlKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGUodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzLm5vZGVMaXN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGVMaXN0KHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmIChpcy5zdHJpbmcodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gbGlzdGVuU2VsZWN0b3IodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nLCBIVE1MRWxlbWVudCwgSFRNTENvbGxlY3Rpb24sIG9yIE5vZGVMaXN0Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBIVE1MIGVsZW1lbnRcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5Ob2RlKG5vZGUsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBsaXN0IG9mIEhUTUwgZWxlbWVudHNcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpc3R8SFRNTENvbGxlY3Rpb259IG5vZGVMaXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTm9kZUxpc3Qobm9kZUxpc3QsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBhIHNlbGVjdG9yXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBsaXN0ZW5TZWxlY3RvcihzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZGVsZWdhdGUoZG9jdW1lbnQuYm9keSwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0ZW47XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBIVE1MIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLm5vZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmIHZhbHVlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnRcbiAgICAgICAgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgbGlzdCBvZiBIVE1MIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5ub2RlTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcbiAgICAgICAgJiYgKHR5cGUgPT09ICdbb2JqZWN0IE5vZGVMaXN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENvbGxlY3Rpb25dJylcbiAgICAgICAgJiYgKCdsZW5ndGgnIGluIHZhbHVlKVxuICAgICAgICAmJiAodmFsdWUubGVuZ3RoID09PSAwIHx8IGV4cG9ydHMubm9kZSh2YWx1ZVswXSkpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuc3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuZm4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNsb3Nlc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG4vKipcbiAqIERlbGVnYXRlcyBldmVudCB0byBhIHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlQ2FwdHVyZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBfZGVsZWdhdGUoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgdmFyIGxpc3RlbmVyRm4gPSBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVsZWdhdGVzIGV2ZW50IHRvIGEgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fFN0cmluZ3xBcnJheX0gW2VsZW1lbnRzXVxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlQ2FwdHVyZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBkZWxlZ2F0ZShlbGVtZW50cywgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgLy8gSGFuZGxlIHRoZSByZWd1bGFyIEVsZW1lbnQgdXNhZ2VcbiAgICBpZiAodHlwZW9mIGVsZW1lbnRzLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIF9kZWxlZ2F0ZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBFbGVtZW50LWxlc3MgdXNhZ2UsIGl0IGRlZmF1bHRzIHRvIGdsb2JhbCBkZWxlZ2F0aW9uXG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFVzZSBgZG9jdW1lbnRgIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIHRoZW4gYXBwbHkgYXJndW1lbnRzXG4gICAgICAgIC8vIFRoaXMgaXMgYSBzaG9ydCB3YXkgdG8gLnVuc2hpZnQgYGFyZ3VtZW50c2Agd2l0aG91dCBydW5uaW5nIGludG8gZGVvcHRpbWl6YXRpb25zXG4gICAgICAgIHJldHVybiBfZGVsZWdhdGUuYmluZChudWxsLCBkb2N1bWVudCkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgU2VsZWN0b3ItYmFzZWQgdXNhZ2VcbiAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSAnc3RyaW5nJykge1xuICAgICAgICBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudHMpO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBBcnJheS1saWtlIGJhc2VkIHVzYWdlXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIF9kZWxlZ2F0ZShlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEZpbmRzIGNsb3Nlc3QgbWF0Y2ggYW5kIGludm9rZXMgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuZGVsZWdhdGVUYXJnZXQgPSBjbG9zZXN0KGUudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICAgICAgaWYgKGUuZGVsZWdhdGVUYXJnZXQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoZWxlbWVudCwgZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVsZWdhdGU7XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBET0NVTUVOVF9OT0RFX1RZUEUgPSA5O1xuXG4vKipcbiAqIEEgcG9seWZpbGwgZm9yIEVsZW1lbnQubWF0Y2hlcygpXG4gKi9cbmlmICh0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgICB2YXIgcHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLm1hdGNoZXMgPSBwcm90by5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLm9NYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBhcmVudCB0aGF0IG1hdGNoZXMgYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNsb3Nlc3QgKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gRE9DVU1FTlRfTk9ERV9UWVBFKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5tYXRjaGVzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvc2VzdDtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTsiLCIhZnVuY3Rpb24oKXt2YXIgaT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlLG4pe2Zvcih2YXIgdCBpbiBuKW4uaGFzT3duUHJvcGVydHkodCkmJihlW3RdPW5bdF0pO3JldHVybiBlfTtmdW5jdGlvbiBlKGUpe3RoaXMuZGVmYXVsdHM9aSh7fSxlKX1mdW5jdGlvbiBsKGUpe2Zvcih2YXIgbj0wLHQ9MDt0PGUubGVuZ3RoOysrdCllLmNoYXJDb2RlQXQodCk9PVwiXFx0XCIuY2hhckNvZGVBdCgwKSYmKG4rPTMpO3JldHVybiBlLmxlbmd0aCtufWUucHJvdG90eXBlPXtzZXREZWZhdWx0czpmdW5jdGlvbihlKXt0aGlzLmRlZmF1bHRzPWkodGhpcy5kZWZhdWx0cyxlKX0sbm9ybWFsaXplOmZ1bmN0aW9uKGUsbil7Zm9yKHZhciB0IGluIG49aSh0aGlzLmRlZmF1bHRzLG4pKXt2YXIgcj10LnJlcGxhY2UoLy0oXFx3KS9nLGZ1bmN0aW9uKGUsbil7cmV0dXJuIG4udG9VcHBlckNhc2UoKX0pO1wibm9ybWFsaXplXCIhPT10JiZcInNldERlZmF1bHRzXCIhPT1yJiZuW3RdJiZ0aGlzW3JdJiYoZT10aGlzW3JdLmNhbGwodGhpcyxlLG5bdF0pKX1yZXR1cm4gZX0sbGVmdFRyaW06ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXlxccysvLFwiXCIpfSxyaWdodFRyaW06ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxzKyQvLFwiXCIpfSx0YWJzVG9TcGFjZXM6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj0wfG58fDQsZS5yZXBsYWNlKC9cXHQvZyxuZXcgQXJyYXkoKytuKS5qb2luKFwiIFwiKSl9LHNwYWNlc1RvVGFiczpmdW5jdGlvbihlLG4pe3JldHVybiBuPTB8bnx8NCxlLnJlcGxhY2UoUmVnRXhwKFwiIHtcIituK1wifVwiLFwiZ1wiKSxcIlxcdFwiKX0scmVtb3ZlVHJhaWxpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxzKj8kL2dtLFwiXCIpfSxyZW1vdmVJbml0aWFsTGluZUZlZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXig/Olxccj9cXG58XFxyKS8sXCJcIil9LHJlbW92ZUluZGVudDpmdW5jdGlvbihlKXt2YXIgbj1lLm1hdGNoKC9eW15cXFNcXG5cXHJdKig/PVxcUykvZ20pO3JldHVybiBuJiZuWzBdLmxlbmd0aD8obi5zb3J0KGZ1bmN0aW9uKGUsbil7cmV0dXJuIGUubGVuZ3RoLW4ubGVuZ3RofSksblswXS5sZW5ndGg/ZS5yZXBsYWNlKFJlZ0V4cChcIl5cIituWzBdLFwiZ21cIiksXCJcIik6ZSk6ZX0saW5kZW50OmZ1bmN0aW9uKGUsbil7cmV0dXJuIGUucmVwbGFjZSgvXlteXFxTXFxuXFxyXSooPz1cXFMpL2dtLG5ldyBBcnJheSgrK24pLmpvaW4oXCJcXHRcIikrXCIkJlwiKX0sYnJlYWtMaW5lczpmdW5jdGlvbihlLG4pe249ITA9PT1uPzgwOjB8bnx8ODA7Zm9yKHZhciB0PWUuc3BsaXQoXCJcXG5cIikscj0wO3I8dC5sZW5ndGg7KytyKWlmKCEobCh0W3JdKTw9bikpe2Zvcih2YXIgaT10W3JdLnNwbGl0KC8oXFxzKykvZyksbz0wLGE9MDthPGkubGVuZ3RoOysrYSl7dmFyIHM9bChpW2FdKTtuPChvKz1zKSYmKGlbYV09XCJcXG5cIitpW2FdLG89cyl9dFtyXT1pLmpvaW4oXCJcIil9cmV0dXJuIHQuam9pbihcIlxcblwiKX19LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9ZSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByaXNtJiYoUHJpc20ucGx1Z2lucy5Ob3JtYWxpemVXaGl0ZXNwYWNlPW5ldyBlKHtcInJlbW92ZS10cmFpbGluZ1wiOiEwLFwicmVtb3ZlLWluZGVudFwiOiEwLFwibGVmdC10cmltXCI6ITAsXCJyaWdodC10cmltXCI6ITB9KSxQcmlzbS5ob29rcy5hZGQoXCJiZWZvcmUtc2FuaXR5LWNoZWNrXCIsZnVuY3Rpb24oZSl7dmFyIG49UHJpc20ucGx1Z2lucy5Ob3JtYWxpemVXaGl0ZXNwYWNlO2lmKCFlLnNldHRpbmdzfHwhMSE9PWUuc2V0dGluZ3NbXCJ3aGl0ZXNwYWNlLW5vcm1hbGl6YXRpb25cIl0paWYoZS5lbGVtZW50JiZlLmVsZW1lbnQucGFyZW50Tm9kZXx8IWUuY29kZSl7dmFyIHQ9ZS5lbGVtZW50LnBhcmVudE5vZGUscj0vKD86XnxcXHMpbm8td2hpdGVzcGFjZS1ub3JtYWxpemF0aW9uKD86XFxzfCQpLztpZihlLmNvZGUmJnQmJlwicHJlXCI9PT10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJiFyLnRlc3QodC5jbGFzc05hbWUpJiYhci50ZXN0KGUuZWxlbWVudC5jbGFzc05hbWUpKXtmb3IodmFyIGk9dC5jaGlsZE5vZGVzLG89XCJcIixhPVwiXCIscz0hMSxsPTA7bDxpLmxlbmd0aDsrK2wpe3ZhciBjPWlbbF07Yz09ZS5lbGVtZW50P3M9ITA6XCIjdGV4dFwiPT09Yy5ub2RlTmFtZSYmKHM/YSs9Yy5ub2RlVmFsdWU6bys9Yy5ub2RlVmFsdWUsdC5yZW1vdmVDaGlsZChjKSwtLWwpfWlmKGUuZWxlbWVudC5jaGlsZHJlbi5sZW5ndGgmJlByaXNtLnBsdWdpbnMuS2VlcE1hcmt1cCl7dmFyIHU9bytlLmVsZW1lbnQuaW5uZXJIVE1MK2E7ZS5lbGVtZW50LmlubmVySFRNTD1uLm5vcm1hbGl6ZSh1LGUuc2V0dGluZ3MpLGUuY29kZT1lLmVsZW1lbnQudGV4dENvbnRlbnR9ZWxzZSBlLmNvZGU9bytlLmNvZGUrYSxlLmNvZGU9bi5ub3JtYWxpemUoZS5jb2RlLGUuc2V0dGluZ3MpfX1lbHNlIGUuY29kZT1uLm5vcm1hbGl6ZShlLmNvZGUsZS5zZXR0aW5ncyl9KSl9KCk7Il0sInNvdXJjZVJvb3QiOiIifQ==