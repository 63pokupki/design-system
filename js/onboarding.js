!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=23)}([,,function(t,e,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function l(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],o=0;o<t.length;o++){var r=t[o],a=e.base?r[0]+e.base:r[0],c=n[a]||0,h="".concat(a," ").concat(c);n[a]=c+1;var u=l(h),d={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(s[u].references++,s[u].updater(d)):s.push({identifier:h,updater:b(d,e),references:1}),i.push(h)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function d(t,e,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function p(t,e,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var f=null,m=0;function b(t,e){var n,i,o;if(e.singleton){var r=m++;n=f||(f=c(e)),i=d.bind(null,n,r,!1),o=d.bind(null,n,r,!0)}else n=c(e),i=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var o=l(n[i]);s[o].references--}for(var r=a(t,e),c=0;c<n.length;c++){var h=l(n[c]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}n=r}}}},,function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},,,,,,,,,,,,,,,,,,,function(t,e,n){n(24),n(26),t.exports=n(28)},function(t,e,n){var i=n(2),o=n(25);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var r={insert:"head",singleton:!1},s=(i(o,r),o.locals?o.locals:{});t.exports=s},function(t,e,n){},function(t,e,n){var i=n(2),o=n(27);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var r={insert:"head",singleton:!1},s=(i(o,r),o.locals?o.locals:{});t.exports=s},function(t,e,n){},function(t,e,n){"use strict";n.r(e);var i=n(4),o=n.n(i);function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var l=n(29),a={tooltipClass:"onboarding-base-steps",skipLabel:"Пропустить",doneLabel:"Закончить",prevLabel:"Назад",nextLabel:"Далее",hidePrev:!0,hideNext:!0,showProgress:!0,showBullets:!1,showStepNumbers:!1,scrollTo:"tooltip",disableInteraction:!0,exitOnOverlayClick:!1};window.addEventListener("DOMContentLoaded",(function(){try{if(!window.steps)throw new Error("Шаги отсутствуют");var t=l(),e=function(t){try{return document.documentElement.clientWidth<=t?window.steps.touch():window.steps.desctop()}catch(t){console.error(t)}}(768);(t=function(t,e,n){try{return t.setOptions(s({},e,{steps:n})),t.onbeforechange((function(){var i=n[t._currentStep];t.setOptions(s({},e,{nextLabel:i.nextLabel||e.nextLabel,prevLabel:i.prevLabel||e.prevLabel,doneLabel:i.doneLabel||e.doneLabel,skipLabel:i.skipLabel||e.skipLabel,tooltipClass:i.tooltipClass||e.tooltipClass})),i.beforeStep&&(i.beforeStep(),t.refresh())})),t}catch(t){console.error(t)}}(t,a,e)).start(),function(t){try{var e=document.querySelector(".introjs-tooltip"),n=document.createElement("i");n.className="ds-icon icon-close";var i=document.createElement("button");i.append(n),i.className="introjs-tooltip__close",i.addEventListener("click",(function(){return t.exit(!0)})),e&&e.append(i)}catch(t){console.error(t)}}(t),setTimeout((function(){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;try{var n={top:t,left:e,behavior:"smooth"};window.scrollTo(n)}catch(n){window.scrollTo(t,e)}}()}),500)}catch(t){console.error(t)}}))},function(t,e,n){var i;i=function(){function t(t){this._targetElement=t,this._introItems=[],this._options={nextLabel:"Next &rarr;",prevLabel:"&larr; Back",skipLabel:"Skip",doneLabel:"Done",hidePrev:!1,hideNext:!1,tooltipPosition:"bottom",tooltipClass:"",highlightClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,showStepNumbers:!0,keyboardNavigation:!0,showButtons:!0,showBullets:!0,showProgress:!1,scrollToElement:!0,scrollTo:"element",scrollPadding:30,overlayOpacity:.8,positionPrecedence:["bottom","top","right","left"],disableInteraction:!1,helperElementPadding:10,hintPosition:"top-middle",hintButtonLabel:"Got it",hintAnimation:!0,buttonClass:"introjs-button",media:[{active:!0,point:768,positions:{"top-middle-aligned":"top-middle-aligned","top-right-aligned":"top-right-aligned","top-left-aligned":"top-left-aligned","bottom-middle-aligned":"top-middle-aligned","bottom-right-aligned":"top-right-aligned","bottom-left-aligned":"top-left-aligned",top:"top",left:"left",right:"right",bottom:"top",floating:"floating"}}]}}function e(t,e){var r=t.querySelectorAll("*[data-intro]"),s=[];if(this._options.steps)C(this._options.steps,function(t){var e=o(t);if(e.step=s.length+1,"string"==typeof e.element&&(e.element=document.querySelector(e.element)),void 0===e.element||null===e.element){var n=document.querySelector(".introjsFloatingElement");null===n&&((n=document.createElement("div")).className="introjsFloatingElement",document.body.appendChild(n)),e.element=n,e.position="floating"}e.scrollTo=e.scrollTo||this._options.scrollTo,void 0===e.disableInteraction&&(e.disableInteraction=this._options.disableInteraction),null!==e.element&&s.push(e)}.bind(this));else{var a;if(r.length<1)return!1;C(r,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&"none"!==t.style.display){var n=parseInt(t.getAttribute("data-step"),10);a=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,n>0&&(s[n-1]={element:t,intro:t.getAttribute("data-intro"),step:parseInt(t.getAttribute("data-step"),10),tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:a})}}.bind(this));var c=0;C(r,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&null===t.getAttribute("data-step")){for(;void 0!==s[c];)c++;a=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,s[c]={element:t,intro:t.getAttribute("data-intro"),step:c+1,tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:a}}}.bind(this))}for(var h=[],u=0;u<s.length;u++)s[u]&&h.push(s[u]);return(s=h).sort((function(t,e){return t.step-e.step})),this._introItems=s,T.call(this,t)&&(l.call(this),this._options.keyboardNavigation&&S.on(window,"keydown",i,this,!0),S.on(window,"resize",n,this,!0)),!1}function n(){this.refresh.call(this)}function i(t){var e=null===t.code?t.which:t.code;if(null===e&&(e=null===t.charCode?t.keyCode:t.charCode),"Escape"!==e&&27!==e||!0!==this._options.exitOnEsc){if("ArrowLeft"===e||37===e)a.call(this);else if("ArrowRight"===e||39===e)l.call(this);else if("Enter"===e||13===e){var n=t.target||t.srcElement;n&&n.className.match("introjs-prevbutton")?a.call(this):n&&n.className.match("introjs-skipbutton")?(this._introItems.length-1===this._currentStep&&"function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),h.call(this,this._targetElement)):n&&n.getAttribute("data-stepnumber")?n.click():l.call(this),t.preventDefault?t.preventDefault():t.returnValue=!1}}else h.call(this,this._targetElement)}function o(t){if(null===t||"object"!=typeof t||void 0!==t.nodeType)return t;var e={};for(var n in t)void 0!==window.jQuery&&t[n]instanceof window.jQuery?e[n]=t[n]:e[n]=o(t[n]);return e}function r(t){this._currentStep=t-2,void 0!==this._introItems&&l.call(this)}function s(t){this._currentStepNumber=t,void 0!==this._introItems&&l.call(this)}function l(){this._direction="forward",void 0!==this._currentStepNumber&&C(this._introItems,function(t,e){t.step===this._currentStepNumber&&(this._currentStep=e-1,this._currentStepNumber=void 0)}.bind(this)),void 0===this._currentStep?this._currentStep=0:++this._currentStep;var t=this._introItems[this._currentStep],e=!0;return void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e?(--this._currentStep,!1):this._introItems.length<=this._currentStep?("function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),void h.call(this,this._targetElement)):void y.call(this,t)}function a(){if(this._direction="backward",0===this._currentStep)return!1;--this._currentStep;var t=this._introItems[this._currentStep],e=!0;if(void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e)return++this._currentStep,!1;y.call(this,t)}function c(){if(b.call(this,document.querySelector(".introjs-helperLayer")),b.call(this,document.querySelector(".introjs-tooltipReferenceLayer")),b.call(this,document.querySelector(".introjs-disableInteraction")),void 0!==this._currentStep&&null!==this._currentStep){var t=document.querySelector(".introjs-helperNumberLayer"),e=document.querySelector(".introjs-arrow"),n=document.querySelector(".introjs-tooltip");u.call(this,this._introItems[this._currentStep].element,n,e,t)}return O.call(this),this}function h(t,e){var o=!0;if(void 0!==this._introBeforeExitCallback&&(o=this._introBeforeExitCallback.call(this)),e||!1!==o){var r=t.querySelectorAll(".introjs-overlay");r&&r.length&&C(r,function(t){t.style.opacity=0,window.setTimeout(function(){this.parentNode&&this.parentNode.removeChild(this)}.bind(t),500)}.bind(this));var s=t.querySelector(".introjs-helperLayer");s&&s.parentNode.removeChild(s);var l=t.querySelector(".introjs-tooltipReferenceLayer");l&&l.parentNode.removeChild(l);var a=t.querySelector(".introjs-disableInteraction");a&&a.parentNode.removeChild(a);var c=document.querySelector(".introjsFloatingElement");c&&c.parentNode.removeChild(c),_(),C(document.querySelectorAll(".introjs-fixParent"),(function(t){E(t,/introjs-fixParent/g)})),S.off(window,"keydown",i,this,!0),S.off(window,"resize",n,this,!0),void 0!==this._introExitCallback&&this._introExitCallback.call(this),this._currentStep=void 0}}function u(t,e,n,i,o){var r,s,l,a,c,h="";if(o=o||!1,e.style.top=null,e.style.right=null,e.style.bottom=null,e.style.left=null,e.style.marginLeft=null,e.style.marginTop=null,n.style.display="inherit",null!=i&&(i.style.top=null,i.style.left=null),this._introItems[this._currentStep]){h="string"==typeof(r=this._introItems[this._currentStep]).tooltipClass?r.tooltipClass:this._options.tooltipClass,e.className=("introjs-tooltip "+h).replace(/^\s+|\s+$/g,""),e.setAttribute("role","dialog"),"floating"!==(c=this._introItems[this._currentStep].position)&&(c=f.call(this,t,e,c));var u=document.documentElement.clientWidth,m=this._options.media.filter((function(t){return t.active&&u<=t.point})).sort((function(t,e){return e.point-t.point}));switch(m.length>0&&(c=(m=m[m.length-1]).positions[c]),l=G(t),s=G(e),a=A(),k(e,"introjs-"+c),c){case"top-right-aligned":n.className="introjs-arrow bottom-right";var b=0;p(l,b,s,e),e.style.bottom=l.height+20+"px";break;case"top-middle-aligned":n.className="introjs-arrow bottom-middle";var g=l.width/2-s.width/2;o&&(g+=5),p(l,g,s,e)&&(e.style.right=null,d(l,g,s,a,e)),e.style.bottom=l.height+20+"px";break;case"top-left-aligned":case"top":n.className="introjs-arrow bottom",d(l,o?0:15,s,a,e),e.style.bottom=l.height+20+"px";break;case"right":e.style.left=l.width+20+"px",l.top+s.height>a.height?(n.className="introjs-arrow left-bottom",e.style.top="-"+(s.height-l.height-20)+"px"):n.className="introjs-arrow left";break;case"left":o||!0!==this._options.showStepNumbers||(e.style.top="15px"),l.top+s.height>a.height?(e.style.top="-"+(s.height-l.height-20)+"px",n.className="introjs-arrow right-bottom"):n.className="introjs-arrow right",e.style.right=l.width+20+"px";break;case"floating":n.style.display="none",e.style.left="50%",e.style.top="50%",e.style.marginLeft="-"+s.width/2+"px",e.style.marginTop="-"+s.height/2+"px",null!=i&&(i.style.left="-"+(s.width/2+18)+"px",i.style.top="-"+(s.height/2+18)+"px");break;case"bottom-right-aligned":n.className="introjs-arrow top-right",p(l,b=0,s,e),e.style.top=l.height+20+"px";break;case"bottom-middle-aligned":n.className="introjs-arrow top-middle",g=l.width/2-s.width/2,o&&(g+=5),p(l,g,s,e)&&(e.style.right=null,d(l,g,s,a,e)),e.style.top=l.height+20+"px";break;default:n.className="introjs-arrow top",d(l,0,s,a,e),e.style.top=l.height+20+"px"}}}function d(t,e,n,i,o){return t.left+e+n.width>i.width?(o.style.left=i.width-n.width-t.left+"px",!1):(o.style.left=e+"px",!0)}function p(t,e,n,i){return t.left+t.width-e-n.width<0?(i.style.left=-t.left+"px",!1):(i.style.right=e+"px",!0)}function f(t,e,n){var i=this._options.positionPrecedence.slice(),o=A(),r=G(e).height+10,s=G(e).width+20,l=t.getBoundingClientRect(),a="floating";l.bottom+r>o.height&&m(i,"bottom"),l.top-r<0&&m(i,"top"),l.right+s>o.width&&m(i,"right"),l.left-s<0&&m(i,"left");var c,h,u=-1!==(h=(c=n||"").indexOf("-"))?c.substr(h):"";return n&&(n=n.split("-")[0]),i.length&&(a="auto"!==n&&i.indexOf(n)>-1?n:i[0]),-1!==["top","bottom"].indexOf(a)&&(a+=function(t,e,n,i){var o=e/2,r=Math.min(n.width,window.screen.width),s=["-left-aligned","-middle-aligned","-right-aligned"];return r-t<e&&m(s,"-left-aligned"),(t<o||r-t<o)&&m(s,"-middle-aligned"),t<e-50&&m(s,"-right-aligned"),s.length?-1!==s.indexOf(i)?i:s[0]:"-middle-aligned"}(l.left,s,o,u)),a}function m(t,e){t.indexOf(e)>-1&&t.splice(t.indexOf(e),1)}function b(t){if(t){if(!this._introItems[this._currentStep])return;var e=this._introItems[this._currentStep],n=G(e.element),i=this._options.helperElementPadding;L(e.element)?k(t,"introjs-fixedTooltip"):E(t,"introjs-fixedTooltip"),"floating"===e.position&&(i=0),t.style.cssText="width: "+(n.width+i)+"px; height:"+(n.height+i)+"px; top:"+(n.top-i/2)+"px;left: "+(n.left-i/2)+"px;"}}function g(){var t=document.querySelector(".introjs-disableInteraction");null===t&&((t=document.createElement("div")).className="introjs-disableInteraction",this._targetElement.appendChild(t)),b.call(this,t)}function v(t){t.setAttribute("role","button"),t.tabIndex=0}function y(t){void 0!==this._introChangeCallback&&this._introChangeCallback.call(this,t.element);var e,n,i,o,r=this,s=document.querySelector(".introjs-helperLayer"),c=document.querySelector(".introjs-tooltipReferenceLayer"),d="introjs-helperLayer";if("string"==typeof t.highlightClass&&(d+=" "+t.highlightClass),"string"==typeof this._options.highlightClass&&(d+=" "+this._options.highlightClass),null!==s){var p=c.querySelector(".introjs-helperNumberLayer"),f=c.querySelector(".introjs-tooltiptext"),m=c.querySelector(".introjs-arrow"),y=c.querySelector(".introjs-tooltip");if(i=c.querySelector(".introjs-skipbutton"),n=c.querySelector(".introjs-prevbutton"),e=c.querySelector(".introjs-nextbutton"),s.className=d,y.style.opacity=0,y.style.display="none",i.innerHTML=this._options.skipLabel,n.innerHTML=this._options.prevLabel,e.innerHTML=this._options.nextLabel,null!==p){var j=this._introItems[t.step-2>=0?t.step-2:0];(null!==j&&"forward"===this._direction&&"floating"===j.position||"backward"===this._direction&&"floating"===t.position)&&(p.style.opacity=0)}(o=J(t.element))!==document.body&&Y(o,t.element),b.call(r,s),b.call(r,c),C(document.querySelectorAll(".introjs-fixParent"),(function(t){E(t,/introjs-fixParent/g)})),_(),r._lastShowElementTimer&&window.clearTimeout(r._lastShowElementTimer),r._lastShowElementTimer=window.setTimeout((function(){null!==p&&(p.innerHTML=t.step),f.innerHTML=t.intro,y.style.display="block",u.call(r,t.element,y,m,p),r._options.showBullets&&(c.querySelector(".introjs-bullets li > a.active").className="",c.querySelector('.introjs-bullets li > a[data-stepnumber="'+t.step+'"]').className="active"),c.querySelector(".introjs-progress .introjs-progressbar").style.cssText="width:"+$.call(r)+"%;",c.querySelector(".introjs-progress .introjs-progressbar").setAttribute("aria-valuenow",$.call(r)),y.style.opacity=1,p&&(p.style.opacity=1),null!=i&&/introjs-donebutton/gi.test(i.className)?i.focus():null!=e&&e.focus(),w.call(r,t.scrollTo,t,f)}),350)}else{var x=document.createElement("div"),S=document.createElement("div"),L=document.createElement("div"),A=document.createElement("div"),T=document.createElement("div"),P=document.createElement("div"),I=document.createElement("div"),O=document.createElement("div");x.className=d,S.className="introjs-tooltipReferenceLayer",(o=J(t.element))!==document.body&&Y(o,t.element),b.call(r,x),b.call(r,S),this._targetElement.appendChild(x),this._targetElement.appendChild(S),L.className="introjs-arrow",T.className="introjs-tooltiptext",T.innerHTML=t.intro,P.className="introjs-bullets",!1===this._options.showBullets&&(P.style.display="none");var q=document.createElement("ul");q.setAttribute("role","tablist");var H=function(){r.goToStep(this.getAttribute("data-stepnumber"))};C(this._introItems,(function(e,n){var i=document.createElement("li"),o=document.createElement("a");i.setAttribute("role","presentation"),o.setAttribute("role","tab"),o.onclick=H,n===t.step-1&&(o.className="active"),v(o),o.innerHTML="&nbsp;",o.setAttribute("data-stepnumber",e.step),i.appendChild(o),q.appendChild(i)})),P.appendChild(q),I.className="introjs-progress",!1===this._options.showProgress&&(I.style.display="none");var M=document.createElement("div");M.className="introjs-progressbar",M.setAttribute("role","progress"),M.setAttribute("aria-valuemin",0),M.setAttribute("aria-valuemax",100),M.setAttribute("aria-valuenow",$.call(this)),M.style.cssText="width:"+$.call(this)+"%;",I.appendChild(M),O.className="introjs-tooltipbuttons",!1===this._options.showButtons&&(O.style.display="none"),A.className="introjs-tooltip",A.appendChild(T),A.appendChild(P),A.appendChild(I);var B=document.createElement("span");!0===this._options.showStepNumbers&&(B.className="introjs-helperNumberLayer",B.innerHTML=t.step,S.appendChild(B)),A.appendChild(L),S.appendChild(A),(e=document.createElement("a")).onclick=function(){r._introItems.length-1!==r._currentStep&&l.call(r)},v(e),e.innerHTML=this._options.nextLabel,(n=document.createElement("a")).onclick=function(){0!==r._currentStep&&a.call(r)},v(n),n.innerHTML=this._options.prevLabel,(i=document.createElement("a")).className=this._options.buttonClass+" introjs-skipbutton ",v(i),i.innerHTML=this._options.skipLabel,i.onclick=function(){r._introItems.length-1===r._currentStep&&"function"==typeof r._introCompleteCallback&&r._introCompleteCallback.call(r),r._introItems.length-1!==r._currentStep&&"function"==typeof r._introExitCallback&&r._introExitCallback.call(r),"function"==typeof r._introSkipCallback&&r._introSkipCallback.call(r),h.call(r,r._targetElement)},O.appendChild(i),this._introItems.length>1&&(O.appendChild(n),O.appendChild(e)),A.appendChild(O),u.call(r,t.element,A,L,B),w.call(this,t.scrollTo,t,A)}var R=r._targetElement.querySelector(".introjs-disableInteraction");R&&R.parentNode.removeChild(R),t.disableInteraction&&g.call(r),0===this._currentStep&&this._introItems.length>1?(null!=i&&(i.className=this._options.buttonClass+" introjs-skipbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),!0===this._options.hidePrev?(null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton introjs-hidden"),null!=e&&k(e,"introjs-fullbutton")):null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton introjs-disabled"),null!=i&&(i.innerHTML=this._options.skipLabel)):this._introItems.length-1===this._currentStep||1===this._introItems.length?(null!=i&&(i.innerHTML=this._options.doneLabel,k(i,"introjs-donebutton")),null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton"),!0===this._options.hideNext?(null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-hidden"),null!=n&&k(n,"introjs-fullbutton")):null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-disabled")):(null!=i&&(i.className=this._options.buttonClass+" introjs-skipbutton"),null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),null!=i&&(i.innerHTML=this._options.skipLabel)),n.setAttribute("role","button"),e.setAttribute("role","button"),i.setAttribute("role","button"),null!=e&&e.focus(),function(t){var e;if(t.element instanceof SVGElement)for(e=t.element.parentNode;null!==t.element.parentNode&&e.tagName&&"body"!==e.tagName.toLowerCase();)"svg"===e.tagName.toLowerCase()&&k(e,"introjs-showElement introjs-relativePosition"),e=e.parentNode;k(t.element,"introjs-showElement");var n=N(t.element,"position");for("absolute"!==n&&"relative"!==n&&"fixed"!==n&&k(t.element,"introjs-relativePosition"),e=t.element.parentNode;null!==e&&e.tagName&&"body"!==e.tagName.toLowerCase();){var i=N(e,"z-index"),o=parseFloat(N(e,"opacity")),r=N(e,"transform")||N(e,"-webkit-transform")||N(e,"-moz-transform")||N(e,"-ms-transform")||N(e,"-o-transform");(/[0-9]+/.test(i)||o<1||"none"!==r&&void 0!==r)&&k(e,"introjs-fixParent"),e=e.parentNode}}(t),void 0!==this._introAfterChangeCallback&&this._introAfterChangeCallback.call(this,t.element)}function w(t,e,n){var i;if("off"!==t&&this._options.scrollToElement&&(i="tooltip"===t?n.getBoundingClientRect():e.element.getBoundingClientRect(),!function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom+80<=window.innerHeight&&e.right<=window.innerWidth}(e.element))){var o=i.bottom-(i.bottom-i.top),r=A().height,s={top:i.top+pageYOffset-r/2+i.height/2,left:0,behavior:"smooth"};try{o<0||e.element.clientHeight>r?(s.top-=this._options.scrollPadding,window.scrollTo(s)):(s.top+=this._options.scrollPadding,window.scrollTo(s))}catch(t){o<0||e.element.clientHeight>r?window.scrollTo(0,s.top-30):window.scrollTo(0,s.top+30)}}}function _(){C(document.querySelectorAll(".introjs-showElement"),(function(t){E(t,/introjs-[a-zA-Z]+/g)}))}function C(t,e,n){if(t)for(var i=0,o=t.length;i<o;i++)e(t[i],i);"function"==typeof n&&n()}var j,x=(j={},function(t,e){return j[e=e||"introjs-stamp"]=j[e]||0,void 0===t[e]&&(t[e]=j[e]++),t[e]}),S=new function(){var t="introjs_event";this._id=function(t,e,n,i){return e+x(n)+(i?"_"+x(i):"")},this.on=function(e,n,i,o,r){var s=this._id.apply(this,arguments),l=function(t){return i.call(o||e,t||window.event)};"addEventListener"in e?e.addEventListener(n,l,r):"attachEvent"in e&&e.attachEvent("on"+n,l),e[t]=e[t]||{},e[t][s]=l},this.off=function(e,n,i,o,r){var s=this._id.apply(this,arguments),l=e[t]&&e[t][s];l&&("removeEventListener"in e?e.removeEventListener(n,l,r):"detachEvent"in e&&e.detachEvent("on"+n,l),e[t][s]=null)}};function k(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n+" "+e)}else void 0!==t.classList?C(e.split(" "),(function(e){t.classList.add(e)})):t.className.match(e)||(t.className+=" "+e)}function E(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n.replace(e,"").replace(/^\s+|\s+$/g,""))}else t.className=t.className.replace(e,"").replace(/^\s+|\s+$/g,"")}function N(t,e){var n="";return t.currentStyle?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,null).getPropertyValue(e)),n&&n.toLowerCase?n.toLowerCase():n}function L(t){var e=t.parentNode;return!(!e||"HTML"===e.nodeName)&&("fixed"===N(t,"position")||L(e))}function A(){try{var t=document.documentElement;return{width:t.clientWidth,height:t.clientHeight}}catch(t){return{width:window.innerWidth,height:window.innerHeight}}}function T(t){var e=document.createElement("div"),n="",i=this;if(e.className="introjs-overlay",t.tagName&&"body"!==t.tagName.toLowerCase()){var o=G(t);o&&(n+="width: "+o.width+"px; height:"+o.height+"px; top:"+o.top+"px;left: "+o.left+"px;",e.style.cssText=n)}else n+="top: 0;bottom: 0; left: 0;right: 0;position: fixed;",e.style.cssText=n;return t.appendChild(e),e.onclick=function(){!0===i._options.exitOnOverlayClick&&h.call(i,t)},window.setTimeout((function(){n+="opacity: "+i._options.overlayOpacity.toString()+";",e.style.cssText=n}),10),!0}function P(){var t=document.querySelector(".introjs-hintReference");if(t){var e=t.getAttribute("data-step");return t.parentNode.removeChild(t),e}}function I(t){if(this._introItems=[],this._options.hints)C(this._options.hints,function(t){var e=o(t);"string"==typeof e.element&&(e.element=document.querySelector(e.element)),e.hintPosition=e.hintPosition||this._options.hintPosition,e.hintAnimation=e.hintAnimation||this._options.hintAnimation,null!==e.element&&this._introItems.push(e)}.bind(this));else{var e=t.querySelectorAll("*[data-hint]");if(!e||!e.length)return!1;C(e,function(t){var e=t.getAttribute("data-hintanimation");e=e?"true"===e:this._options.hintAnimation,this._introItems.push({element:t,hint:t.getAttribute("data-hint"),hintPosition:t.getAttribute("data-hintposition")||this._options.hintPosition,hintAnimation:e,tooltipClass:t.getAttribute("data-tooltipclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition})}.bind(this))}z.call(this),S.on(document,"click",P,this,!1),S.on(window,"resize",O,this,!0)}function O(){C(this._introItems,function(t){void 0!==t.targetElement&&F.call(this,t.hintPosition,t.element,t.targetElement)}.bind(this))}function q(t){var e=document.querySelector(".introjs-hints");return e?e.querySelectorAll(t):[]}function H(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];P.call(this),e&&k(e,"introjs-hidehint"),void 0!==this._hintCloseCallback&&this._hintCloseCallback.call(this,t)}function M(){C(q(".introjs-hint"),function(t){H.call(this,t.getAttribute("data-step"))}.bind(this))}function B(){var t=q(".introjs-hint");t&&t.length?C(t,function(t){R.call(this,t.getAttribute("data-step"))}.bind(this)):I.call(this,this._targetElement)}function R(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];e&&E(e,/introjs-hidehint/g)}function D(){C(q(".introjs-hint"),function(t){V.call(this,t.getAttribute("data-step"))}.bind(this))}function V(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];e&&e.parentNode.removeChild(e)}function z(){var t=this,e=document.querySelector(".introjs-hints");null===e&&((e=document.createElement("div")).className="introjs-hints"),C(this._introItems,function(n,i){if(!document.querySelector('.introjs-hint[data-step="'+i+'"]')){var o=document.createElement("a");v(o),o.onclick=function(e){return function(n){var i=n||window.event;i.stopPropagation&&i.stopPropagation(),null!==i.cancelBubble&&(i.cancelBubble=!0),W.call(t,e)}}(i),o.className="introjs-hint",n.hintAnimation||k(o,"introjs-hint-no-anim"),L(n.element)&&k(o,"introjs-fixedhint");var r=document.createElement("div");r.className="introjs-hint-dot";var s=document.createElement("div");s.className="introjs-hint-pulse",o.appendChild(r),o.appendChild(s),o.setAttribute("data-step",i),n.targetElement=n.element,n.element=o,F.call(this,n.hintPosition,o,n.targetElement),e.appendChild(o)}}.bind(this)),document.body.appendChild(e),void 0!==this._hintsAddedCallback&&this._hintsAddedCallback.call(this)}function F(t,e,n){var i=G.call(this,n);switch(t){default:case"top-left":e.style.left=i.left+"px",e.style.top=i.top+"px";break;case"top-right":e.style.left=i.left+i.width-20+"px",e.style.top=i.top+"px";break;case"bottom-left":e.style.left=i.left+"px",e.style.top=i.top+i.height-20+"px";break;case"bottom-right":e.style.left=i.left+i.width-20+"px",e.style.top=i.top+i.height-20+"px";break;case"middle-left":e.style.left=i.left+"px",e.style.top=i.top+(i.height-20)/2+"px";break;case"middle-right":e.style.left=i.left+i.width-20+"px",e.style.top=i.top+(i.height-20)/2+"px";break;case"middle-middle":e.style.left=i.left+(i.width-20)/2+"px",e.style.top=i.top+(i.height-20)/2+"px";break;case"bottom-middle":e.style.left=i.left+(i.width-20)/2+"px",e.style.top=i.top+i.height-20+"px";break;case"top-middle":e.style.left=i.left+(i.width-20)/2+"px",e.style.top=i.top+"px"}}function W(t){var e=document.querySelector('.introjs-hint[data-step="'+t+'"]'),n=this._introItems[t];void 0!==this._hintClickCallback&&this._hintClickCallback.call(this,e,n,t);var i=P.call(this);if(parseInt(i,10)!==t){var o=document.createElement("div"),r=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div");o.className="introjs-tooltip",o.onclick=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},r.className="introjs-tooltiptext";var a=document.createElement("p");a.innerHTML=n.hint;var c=document.createElement("a");c.className=this._options.buttonClass,c.setAttribute("role","button"),c.innerHTML=this._options.hintButtonLabel,c.onclick=H.bind(this,t),r.appendChild(a),r.appendChild(c),s.className="introjs-arrow",o.appendChild(s),o.appendChild(r),this._currentStep=e.getAttribute("data-step"),l.className="introjs-tooltipReferenceLayer introjs-hintReference",l.setAttribute("data-step",e.getAttribute("data-step")),b.call(this,l),l.appendChild(o),document.body.appendChild(l),u.call(this,e,o,s,null,!0)}}function G(t){var e=document.body,n=document.documentElement,i=window.pageYOffset||n.scrollTop||e.scrollTop,o=window.pageXOffset||n.scrollLeft||e.scrollLeft,r=t.getBoundingClientRect();return{top:r.top+i,width:r.width,height:r.height,left:r.left+o}}function J(t){var e=window.getComputedStyle(t),n="absolute"===e.position,i=/(auto|scroll)/;if("fixed"===e.position)return document.body;for(var o=t;o=o.parentElement;)if(e=window.getComputedStyle(o),(!n||"static"!==e.position)&&i.test(e.overflow+e.overflowY+e.overflowX))return o;return document.body}function Y(t,e){t.scrollTop=e.offsetTop-t.offsetTop}function $(){return parseInt(this._currentStep+1,10)/this._introItems.length*100}var Q=function(e){var n;if("object"==typeof e)n=new t(e);else if("string"==typeof e){var i=document.querySelector(e);if(!i)throw new Error("There is no element with given selector.");n=new t(i)}else n=new t(document.body);return Q.instances[x(n,"introjs-instance")]=n,n};return Q.version="2.9.3",Q.instances={},Q.fn=t.prototype={clone:function(){return new t(this)},setOption:function(t,e){return this._options[t]=e,this},setOptions:function(t){return this._options=function(t,e){var n,i={};for(n in t)i[n]=t[n];for(n in e)i[n]=e[n];return i}(this._options,t),this},start:function(t){return e.call(this,this._targetElement,t),this},goToStep:function(t){return r.call(this,t),this},addStep:function(t){return this._options.steps||(this._options.steps=[]),this._options.steps.push(t),this},addSteps:function(t){if(t.length){for(var e=0;e<t.length;e++)this.addStep(t[e]);return this}},goToStepNumber:function(t){return s.call(this,t),this},nextStep:function(){return l.call(this),this},previousStep:function(){return a.call(this),this},exit:function(t){return h.call(this,this._targetElement,t),this},refresh:function(){return c.call(this),this},onbeforechange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=t,this},onchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=t,this},onafterchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=t,this},oncomplete:function(t){if("function"!=typeof t)throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=t,this},onhintsadded:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintsadded was not a function.");return this._hintsAddedCallback=t,this},onhintclick:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclick was not a function.");return this._hintClickCallback=t,this},onhintclose:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclose was not a function.");return this._hintCloseCallback=t,this},onexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=t,this},onskip:function(t){if("function"!=typeof t)throw new Error("Provided callback for onskip was not a function.");return this._introSkipCallback=t,this},onbeforeexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforeexit was not a function.");return this._introBeforeExitCallback=t,this},addHints:function(){return I.call(this,this._targetElement),this},hideHint:function(t){return H.call(this,t),this},hideHints:function(){return M.call(this),this},showHint:function(t){return R.call(this,t),this},showHints:function(){return B.call(this),this},removeHints:function(){return D.call(this),this},removeHint:function(t){return V.call(this,t),this},showHintDialog:function(t){return W.call(this,t),this}},Q},t.exports=i(),t.exports.introJs=function(){return console.warn('Deprecated: please use require("intro.js") directly, instead of the introJs method of the function'),i().apply(this,arguments)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,