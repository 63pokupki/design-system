!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=86)}([,,function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,n(13))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){"use strict";var o,i=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function l(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],i=0;i<t.length;i++){var r=t[i],a=e.base?r[0]+e.base:r[0],c=n[a]||0,u="".concat(a," ").concat(c);n[a]=c+1;var p=l(u),h={css:r[1],media:r[2],sourceMap:r[3]};-1!==p?(s[p].references++,s[p].updater(h)):s.push({identifier:u,updater:b(h,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var u,p=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function h(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=p(e,i);else{var r=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function f(t,e,n){var o=n.css,i=n.media,r=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,m=0;function b(t,e){var n,o,i;if(e.singleton){var r=m++;n=d||(d=c(e)),o=h.bind(null,n,r,!1),i=h.bind(null,n,r,!0)}else n=c(e),o=f.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=l(n[o]);s[i].references--}for(var r=a(t,e),c=0;c<n.length;c++){var u=l(n[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=r}}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var o=n(3);t.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var o=n(7),i=n(12),r=n(17);t.exports=o?function(t,e,n){return i.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var o=n(2),i=n(30),r=n(5),s=n(31),l=n(35),a=n(56),c=i("wks"),u=o.Symbol,p=a?u:u&&u.withoutSetter||s;t.exports=function(t){return r(c,t)||(l&&r(u,t)?c[t]=u[t]:c[t]=p("Symbol."+t)),c[t]}},function(t,e,n){var o=n(6);t.exports=function(t){if(!o(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var o=n(27),i=n(14);t.exports=function(t){return o(i(t))}},function(t,e,n){var o=n(7),i=n(28),r=n(10),s=n(19),l=Object.defineProperty;e.f=o?l:function(t,e,n){if(r(t),e=s(e,!0),r(n),i)try{return l(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var o=n(22),i=Math.min;t.exports=function(t){return t>0?i(o(t),9007199254740991):0}},function(t,e,n){var o=n(2),i=n(26).f,r=n(8),s=n(23),l=n(20),a=n(45),c=n(51);t.exports=function(t,e){var n,u,p,h,f,d=t.target,m=t.global,b=t.stat;if(n=m?o:b?o[d]||l(d,{}):(o[d]||{}).prototype)for(u in e){if(h=e[u],p=t.noTargetGet?(f=i(n,u))&&f.value:n[u],!c(m?u:d+(b?".":"#")+u,t.forced)&&void 0!==p){if(typeof h==typeof p)continue;a(h,p)}(t.sham||p&&p.sham)&&r(h,"sham",!0),s(n,u,h,t)}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var o=n(6);t.exports=function(t,e){if(!o(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!o(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!o(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!o(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var o=n(2),i=n(8);t.exports=function(t,e){try{i(o,t,e)}catch(n){o[t]=e}return e}},function(t,e,n){var o=n(2),i=n(20),r=o["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=r},function(t,e){var n=Math.ceil,o=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?o:n)(t)}},function(t,e,n){var o=n(2),i=n(8),r=n(5),s=n(20),l=n(29),a=n(42),c=a.get,u=a.enforce,p=String(String).split("String");(t.exports=function(t,e,n,l){var a,c=!!l&&!!l.unsafe,h=!!l&&!!l.enumerable,f=!!l&&!!l.noTargetGet;"function"==typeof n&&("string"!=typeof e||r(n,"name")||i(n,"name",e),(a=u(n)).source||(a.source=p.join("string"==typeof e?e:""))),t!==o?(c?!f&&t[e]&&(h=!0):delete t[e],h?t[e]=n:i(t,e,n)):h?t[e]=n:s(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(t,e){t.exports={}},function(t,e,n){var o=n(47),i=n(2),r=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?r(o[t])||r(i[t]):o[t]&&o[t][e]||i[t]&&i[t][e]}},function(t,e,n){var o=n(7),i=n(41),r=n(17),s=n(11),l=n(19),a=n(5),c=n(28),u=Object.getOwnPropertyDescriptor;e.f=o?u:function(t,e){if(t=s(t),e=l(e,!0),c)try{return u(t,e)}catch(t){}if(a(t,e))return r(!i.f.call(t,e),t[e])}},function(t,e,n){var o=n(3),i=n(18),r="".split;t.exports=o((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?r.call(t,""):Object(t)}:Object},function(t,e,n){var o=n(7),i=n(3),r=n(37);t.exports=!o&&!i((function(){return 7!=Object.defineProperty(r("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var o=n(21),i=Function.toString;"function"!=typeof o.inspectSource&&(o.inspectSource=function(t){return i.call(t)}),t.exports=o.inspectSource},function(t,e,n){var o=n(44),i=n(21);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.8.3",mode:o?"pure":"global",copyright:"Â© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=0,o=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+o).toString(36)}},function(t,e,n){var o=n(22),i=Math.max,r=Math.min;t.exports=function(t,e){var n=o(t);return n<0?i(n+e,0):r(n,e)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var o=n(18);t.exports=Array.isArray||function(t){return"Array"==o(t)}},function(t,e,n){var o=n(3);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!String(Symbol())}))},function(t,e,n){var o=n(7),i=n(3),r=n(5),s=Object.defineProperty,l={},a=function(t){throw t};t.exports=function(t,e){if(r(l,t))return l[t];e||(e={});var n=[][t],c=!!r(e,"ACCESSORS")&&e.ACCESSORS,u=r(e,0)?e[0]:a,p=r(e,1)?e[1]:void 0;return l[t]=!!n&&!i((function(){if(c&&!o)return!0;var t={length:-1};c?s(t,1,{enumerable:!0,get:a}):t[1]=1,n.call(t,u,p)}))}},function(t,e,n){var o=n(2),i=n(6),r=o.document,s=i(r)&&i(r.createElement);t.exports=function(t){return s?r.createElement(t):{}}},function(t,e,n){var o=n(30),i=n(31),r=o("keys");t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e,n){var o=n(5),i=n(11),r=n(49).indexOf,s=n(24);t.exports=function(t,e){var n,l=i(t),a=0,c=[];for(n in l)!o(s,n)&&o(l,n)&&c.push(n);for(;e.length>a;)o(l,n=e[a++])&&(~r(c,n)||c.push(n));return c}},function(t,e,n){var o=n(14);t.exports=function(t){return Object(o(t))}},function(t,e,n){"use strict";var o={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,r=i&&!o.call({1:2},1);e.f=r?function(t){var e=i(this,t);return!!e&&e.enumerable}:o},function(t,e,n){var o,i,r,s=n(43),l=n(2),a=n(6),c=n(8),u=n(5),p=n(21),h=n(38),f=n(24),d=l.WeakMap;if(s){var m=p.state||(p.state=new d),b=m.get,v=m.has,g=m.set;o=function(t,e){return e.facade=t,g.call(m,t,e),e},i=function(t){return b.call(m,t)||{}},r=function(t){return v.call(m,t)}}else{var y=h("state");f[y]=!0,o=function(t,e){return e.facade=t,c(t,y,e),e},i=function(t){return u(t,y)?t[y]:{}},r=function(t){return u(t,y)}}t.exports={set:o,get:i,has:r,enforce:function(t){return r(t)?i(t):o(t,{})},getterFor:function(t){return function(e){var n;if(!a(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var o=n(2),i=n(29),r=o.WeakMap;t.exports="function"==typeof r&&/native code/.test(i(r))},function(t,e){t.exports=!1},function(t,e,n){var o=n(5),i=n(46),r=n(26),s=n(12);t.exports=function(t,e){for(var n=i(e),l=s.f,a=r.f,c=0;c<n.length;c++){var u=n[c];o(t,u)||l(t,u,a(e,u))}}},function(t,e,n){var o=n(25),i=n(48),r=n(50),s=n(10);t.exports=o("Reflect","ownKeys")||function(t){var e=i.f(s(t)),n=r.f;return n?e.concat(n(t)):e}},function(t,e,n){var o=n(2);t.exports=o},function(t,e,n){var o=n(39),i=n(33).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return o(t,i)}},function(t,e,n){var o=n(11),i=n(15),r=n(32),s=function(t){return function(e,n,s){var l,a=o(e),c=i(a.length),u=r(s,c);if(t&&n!=n){for(;c>u;)if((l=a[u++])!=l)return!0}else for(;c>u;u++)if((t||u in a)&&a[u]===n)return t||u||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var o=n(3),i=/#|\.prototype\./,r=function(t,e){var n=l[s(t)];return n==c||n!=a&&("function"==typeof e?o(e):!!e)},s=r.normalize=function(t){return String(t).replace(i,".").toLowerCase()},l=r.data={},a=r.NATIVE="N",c=r.POLYFILL="P";t.exports=r},function(t,e,n){var o=n(53),i=n(27),r=n(40),s=n(15),l=n(55),a=[].push,c=function(t){var e=1==t,n=2==t,c=3==t,u=4==t,p=6==t,h=7==t,f=5==t||p;return function(d,m,b,v){for(var g,y,w=r(d),_=i(w),x=o(m,b,3),j=s(_.length),C=0,S=v||l,E=e?S(d,j):n||h?S(d,0):void 0;j>C;C++)if((f||C in _)&&(y=x(g=_[C],C,w),t))if(e)E[C]=y;else if(y)switch(t){case 3:return!0;case 5:return g;case 6:return C;case 2:a.call(E,g)}else switch(t){case 4:return!1;case 7:a.call(E,g)}return p?-1:c||u?u:E}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(t,e,n){var o=n(54);t.exports=function(t,e,n){if(o(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,o){return t.call(e,n,o)};case 3:return function(n,o,i){return t.call(e,n,o,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,n){var o=n(6),i=n(34),r=n(9)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?o(n)&&null===(n=n[r])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var o=n(35);t.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){"use strict";var o=n(16),i=n(6),r=n(34),s=n(32),l=n(15),a=n(11),c=n(58),u=n(9),p=n(59),h=n(36),f=p("slice"),d=h("slice",{ACCESSORS:!0,0:0,1:2}),m=u("species"),b=[].slice,v=Math.max;o({target:"Array",proto:!0,forced:!f||!d},{slice:function(t,e){var n,o,u,p=a(this),h=l(p.length),f=s(t,h),d=s(void 0===e?h:e,h);if(r(p)&&("function"!=typeof(n=p.constructor)||n!==Array&&!r(n.prototype)?i(n)&&null===(n=n[m])&&(n=void 0):n=void 0,n===Array||void 0===n))return b.call(p,f,d);for(o=new(void 0===n?Array:n)(v(d-f,0)),u=0;f<d;f++,u++)f in p&&c(o,u,p[f]);return o.length=u,o}})},function(t,e,n){"use strict";var o=n(19),i=n(12),r=n(17);t.exports=function(t,e,n){var s=o(e);s in t?i.f(t,s,r(0,n)):t[s]=n}},function(t,e,n){var o=n(3),i=n(9),r=n(60),s=i("species");t.exports=function(t){return r>=51||!o((function(){var e=[];return(e.constructor={})[s]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,n){var o,i,r=n(2),s=n(61),l=r.process,a=l&&l.versions,c=a&&a.v8;c?i=(o=c.split("."))[0]+o[1]:s&&(!(o=s.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=s.match(/Chrome\/(\d+)/))&&(i=o[1]),t.exports=i&&+i},function(t,e,n){var o=n(25);t.exports=o("navigator","userAgent")||""},,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){n(87),n(89),t.exports=n(91)},function(t,e,n){var o=n(4),i=n(88);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var r={insert:"head",singleton:!1};o(i,r);t.exports=i.locals||{}},function(t,e,n){},function(t,e,n){var o=n(4),i=n(90);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var r={insert:"head",singleton:!1};o(i,r);t.exports=i.locals||{}},function(t,e,n){},function(t,e,n){n(92),n(57);var o=n(98),i=n(100),r={tooltipClass:"onboarding-base-steps",skipLabel:"ÐÑÐ¾Ð¿ÑÑÑÐ¸ÑÑ",doneLabel:"ÐÐ°ÐºÐ¾Ð½ÑÐ¸ÑÑ",prevLabel:"ÐÐ°Ð·Ð°Ð´",nextLabel:"ÐÐ°Ð»ÐµÐµ",hidePrev:!0,hideNext:!0,showProgress:!0,showBullets:!1,showStepNumbers:!1,scrollTo:"tooltip",disableInteraction:!0,exitOnOverlayClick:!1};window.addEventListener("DOMContentLoaded",(function(){try{if(!window.steps)throw new Error("Ð¨Ð°Ð³Ð¸ Ð¾ÑÑÑÑÑÑÐ²ÑÑÑ");var t=i(),e=function(t){try{return document.documentElement.clientWidth<=t?window.steps.touch():window.steps.desctop()}catch(t){console.error(t)}}(1024);(t=function(t,e,n){try{return t.setOptions(o(o({},e),{},{steps:n})),t.onbeforechange((function(){var i=n[t._currentStep];t.setOptions(o(o({},e),{},{nextLabel:i.nextLabel||e.nextLabel,prevLabel:i.prevLabel||e.prevLabel,doneLabel:i.doneLabel||e.doneLabel,skipLabel:i.skipLabel||e.skipLabel,tooltipClass:i.tooltipClass||e.tooltipClass})),i.beforeStep&&(i.beforeStep(),t.refresh())})),t}catch(t){console.error(t)}}(t,r,e)).start(),function(t){try{var e=document.querySelector(".introjs-tooltip"),n=document.createElement("i");n.className="ds-icon icon-close";var o=document.createElement("button");o.append(n),o.className="introjs-tooltip__close",o.addEventListener("click",(function(){return t.exit(!0)})),e&&e.append(o)}catch(t){console.error(t)}}(t),setTimeout((function(){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;try{var n={top:t,left:e,behavior:"smooth"};window.scrollTo(n)}catch(n){window.scrollTo(t,e)}}()}),500)}catch(t){console.error(t)}}))},function(t,e,n){"use strict";var o=n(16),i=n(52).find,r=n(93),s=n(36),l=!0,a=s("find");"find"in[]&&Array(1).find((function(){l=!1})),o({target:"Array",proto:!0,forced:l||!a},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r("find")},function(t,e,n){var o=n(9),i=n(94),r=n(12),s=o("unscopables"),l=Array.prototype;null==l[s]&&r.f(l,s,{configurable:!0,value:i(null)}),t.exports=function(t){l[s][t]=!0}},function(t,e,n){var o,i=n(10),r=n(95),s=n(33),l=n(24),a=n(97),c=n(37),u=n(38),p=u("IE_PROTO"),h=function(){},f=function(t){return"<script>"+t+"<\/script>"},d=function(){try{o=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;d=o?function(t){t.write(f("")),t.close();var e=t.parentWindow.Object;return t=null,e}(o):((e=c("iframe")).style.display="none",a.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(f("document.F=Object")),t.close(),t.F);for(var n=s.length;n--;)delete d.prototype[s[n]];return d()};l[p]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(h.prototype=i(t),n=new h,h.prototype=null,n[p]=t):n=d(),void 0===e?n:r(n,e)}},function(t,e,n){var o=n(7),i=n(12),r=n(10),s=n(96);t.exports=o?Object.defineProperties:function(t,e){r(t);for(var n,o=s(e),l=o.length,a=0;l>a;)i.f(t,n=o[a++],e[n]);return t}},function(t,e,n){var o=n(39),i=n(33);t.exports=Object.keys||function(t){return o(t,i)}},function(t,e,n){var o=n(25);t.exports=o("document","documentElement")},function(t,e,n){var o=n(99);function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}t.exports=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){var o;o=function(){function t(t){this._targetElement=t,this._introItems=[],this._options={nextLabel:"Next &rarr;",prevLabel:"&larr; Back",skipLabel:"Skip",doneLabel:"Done",hidePrev:!1,hideNext:!1,tooltipPosition:"bottom",tooltipClass:"",highlightClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,showStepNumbers:!0,keyboardNavigation:!0,showButtons:!0,showBullets:!0,showProgress:!1,scrollToElement:!0,scrollTo:"element",scrollPadding:30,overlayOpacity:.8,positionPrecedence:["bottom","top","right","left"],disableInteraction:!1,helperElementPadding:10,hintPosition:"top-middle",hintButtonLabel:"Got it",hintAnimation:!0,buttonClass:"introjs-button",media:[{active:!0,point:768,positions:{"top-middle-aligned":"top-middle-aligned","top-right-aligned":"top-right-aligned","top-left-aligned":"top-left-aligned","bottom-middle-aligned":"top-middle-aligned","bottom-right-aligned":"top-right-aligned","bottom-left-aligned":"top-left-aligned",top:"top",left:"left",right:"right",bottom:"top",floating:"floating"}}]}}function e(t,e){var r=document.querySelector("body");r&&r.classList.add("disable-overflow-x");var s=t.querySelectorAll("*[data-intro]"),a=[];if(this._options.steps)x(this._options.steps,function(t){var e=i(t);if(e.step=a.length+1,"string"==typeof e.element&&(e.element=document.querySelector(e.element)),void 0===e.element||null===e.element){var n=document.querySelector(".introjsFloatingElement");null===n&&((n=document.createElement("div")).className="introjsFloatingElement",document.body.appendChild(n)),e.element=n,e.position="floating"}e.scrollTo=e.scrollTo||this._options.scrollTo,void 0===e.disableInteraction&&(e.disableInteraction=this._options.disableInteraction),null!==e.element&&a.push(e)}.bind(this));else{var c;if(s.length<1)return!1;x(s,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&"none"!==t.style.display){var n=parseInt(t.getAttribute("data-step"),10);c=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,n>0&&(a[n-1]={element:t,intro:t.getAttribute("data-intro"),step:parseInt(t.getAttribute("data-step"),10),tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:c})}}.bind(this));var u=0;x(s,function(t){if((!e||t.getAttribute("data-intro-group")===e)&&null===t.getAttribute("data-step")){for(;void 0!==a[u];)u++;c=void 0!==t.getAttribute("data-disable-interaction")?!!t.getAttribute("data-disable-interaction"):this._options.disableInteraction,a[u]={element:t,intro:t.getAttribute("data-intro"),step:u+1,tooltipClass:t.getAttribute("data-tooltipclass"),highlightClass:t.getAttribute("data-highlightclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition,scrollTo:t.getAttribute("data-scrollto")||this._options.scrollTo,disableInteraction:c}}}.bind(this))}for(var p=[],h=0;h<a.length;h++)a[h]&&p.push(a[h]);return(a=p).sort((function(t,e){return t.step-e.step})),this._introItems=a,O.call(this,t)&&(l.call(this),this._options.keyboardNavigation&&S.on(window,"keydown",o,this,!0),S.on(window,"resize",n,this,!0),S.on(window,"orientationchange",n,this,!0)),!1}function n(){this.refresh.call(this)}function o(t){var e=null===t.code?t.which:t.code;if(null===e&&(e=null===t.charCode?t.keyCode:t.charCode),"Escape"!==e&&27!==e||!0!==this._options.exitOnEsc){if("ArrowLeft"===e||37===e)a.call(this);else if("ArrowRight"===e||39===e)l.call(this);else if("Enter"===e||13===e){var n=t.target||t.srcElement;n&&n.className.match("introjs-prevbutton")?a.call(this):n&&n.className.match("introjs-skipbutton")?(this._introItems.length-1===this._currentStep&&"function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),u.call(this,this._targetElement)):n&&n.getAttribute("data-stepnumber")?n.click():l.call(this),t.preventDefault?t.preventDefault():t.returnValue=!1}}else u.call(this,this._targetElement)}function i(t){if(null===t||"object"!=typeof t||void 0!==t.nodeType)return t;var e={};for(var n in t)void 0!==window.jQuery&&t[n]instanceof window.jQuery?e[n]=t[n]:e[n]=i(t[n]);return e}function r(t){this._currentStep=t-2,void 0!==this._introItems&&l.call(this)}function s(t){this._currentStepNumber=t,void 0!==this._introItems&&l.call(this)}function l(){this._direction="forward",void 0!==this._currentStepNumber&&x(this._introItems,function(t,e){t.step===this._currentStepNumber&&(this._currentStep=e-1,this._currentStepNumber=void 0)}.bind(this)),void 0===this._currentStep?this._currentStep=0:++this._currentStep;var t=this._introItems[this._currentStep],e=!0;return void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e?(--this._currentStep,!1):this._introItems.length<=this._currentStep?("function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),void u.call(this,this._targetElement)):void y.call(this,t)}function a(){if(this._direction="backward",0===this._currentStep)return!1;--this._currentStep;var t=this._introItems[this._currentStep],e=!0;if(void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e)return++this._currentStep,!1;y.call(this,t)}function c(){if(b.call(this,document.querySelector(".introjs-helperLayer")),b.call(this,document.querySelector(".introjs-tooltipReferenceLayer")),b.call(this,document.querySelector(".introjs-disableInteraction")),void 0!==this._currentStep&&null!==this._currentStep){var t=document.querySelector(".introjs-helperNumberLayer"),e=document.querySelector(".introjs-arrow"),n=document.querySelector(".introjs-tooltip");p.call(this,this._introItems[this._currentStep].element,n,e,t)}return I.call(this),this}function u(t,e){var i=!0;if(void 0!==this._introBeforeExitCallback&&(i=this._introBeforeExitCallback.call(this)),e||!1!==i){var r=t.querySelectorAll(".introjs-overlay");r&&r.length&&x(r,function(t){t.style.opacity=0,window.setTimeout(function(){this.parentNode&&this.parentNode.removeChild(this)}.bind(t),500)}.bind(this));var s=t.querySelector(".introjs-helperLayer");s&&s.parentNode.removeChild(s);var l=t.querySelector(".introjs-tooltipReferenceLayer");l&&l.parentNode.removeChild(l);var a=t.querySelector(".introjs-disableInteraction");a&&a.parentNode.removeChild(a);var c=document.querySelector(".introjsFloatingElement");c&&c.parentNode.removeChild(c),_(),x(document.querySelectorAll(".introjs-fixParent"),(function(t){k(t,/introjs-fixParent/g)})),S.off(window,"keydown",o,this,!0),S.off(window,"resize",n,this,!0),void 0!==this._introExitCallback&&this._introExitCallback.call(this),this._currentStep=void 0;var u=document.querySelector("body");u&&u.classList.remove("disable-overflow-x")}}function p(t,e,n,o,i){var r,s,l,a,c,u="";if(i=i||!1,e.style.top=null,e.style.right=null,e.style.bottom=null,e.style.left=null,e.style.marginLeft=null,e.style.marginTop=null,n.style.display="inherit",null!=o&&(o.style.top=null,o.style.left=null),this._introItems[this._currentStep]){u="string"==typeof(r=this._introItems[this._currentStep]).tooltipClass?r.tooltipClass:this._options.tooltipClass,e.className=("introjs-tooltip "+u).replace(/^\s+|\s+$/g,""),e.setAttribute("role","dialog"),"floating"!==(c=this._introItems[this._currentStep].position)&&(c=d.call(this,t,e,c));var p=document.documentElement.clientWidth,m=this._options.media.filter((function(t){return t.active&&p<=t.point})).sort((function(t,e){return e.point-t.point}));switch(m.length>0&&(c=(m=m[m.length-1]).positions[c]),l=G(t),s=G(e),a=L(),E(e,"introjs-"+c),c){case"top-right-aligned":n.className="introjs-arrow bottom-right";var b=0;f(l,b,s,e),e.style.bottom=l.height+20+"px";break;case"top-middle-aligned":n.className="introjs-arrow bottom-middle";var v=l.width/2-s.width/2;i&&(v+=5),f(l,v,s,e)&&(e.style.right=null,h(l,v,s,a,e)),e.style.bottom=l.height+20+"px";break;case"top-left-aligned":case"top":n.className="introjs-arrow bottom",h(l,i?0:15,s,a,e),e.style.bottom=l.height+20+"px";break;case"right":e.style.left=l.width+20+"px",l.top+s.height>a.height?(n.className="introjs-arrow left-bottom",e.style.top="-"+(s.height-l.height-20)+"px"):n.className="introjs-arrow left";break;case"left":i||!0!==this._options.showStepNumbers||(e.style.top="15px"),l.top+s.height>a.height?(e.style.top="-"+(s.height-l.height-20)+"px",n.className="introjs-arrow right-bottom"):n.className="introjs-arrow right",e.style.right=l.width+20+"px";break;case"floating":n.style.display="none",e.style.left="50%",e.style.top="50%",e.style.marginLeft="-"+s.width/2+"px",e.style.marginTop="-"+s.height/2+"px",null!=o&&(o.style.left="-"+(s.width/2+18)+"px",o.style.top="-"+(s.height/2+18)+"px");break;case"bottom-right-aligned":n.className="introjs-arrow top-right",f(l,b=0,s,e),e.style.top=l.height+20+"px";break;case"bottom-middle-aligned":n.className="introjs-arrow top-middle",v=l.width/2-s.width/2,i&&(v+=5),f(l,v,s,e)&&(e.style.right=null,h(l,v,s,a,e)),e.style.top=l.height+20+"px";break;default:n.className="introjs-arrow top",h(l,0,s,a,e),e.style.top=l.height+20+"px"}}}function h(t,e,n,o,i){return t.left+e+n.width>o.width?(i.style.left=o.width-n.width-t.left+"px",!1):(i.style.left=e+"px",!0)}function f(t,e,n,o){return t.left+t.width-e-n.width<0?(o.style.left=-t.left+"px",!1):(o.style.right=e+"px",!0)}function d(t,e,n){var o=this._options.positionPrecedence.slice(),i=L(),r=G(e).height+10,s=G(e).width+20,l=t.getBoundingClientRect(),a="floating";l.bottom+r>i.height&&m(o,"bottom"),l.top-r<0&&m(o,"top"),l.right+s>i.width&&m(o,"right"),l.left-s<0&&m(o,"left");var c,u,p=-1!==(u=(c=n||"").indexOf("-"))?c.substr(u):"";return n&&(n=n.split("-")[0]),o.length&&(a="auto"!==n&&o.indexOf(n)>-1?n:o[0]),-1!==["top","bottom"].indexOf(a)&&(a+=function(t,e,n,o){var i=e/2,r=Math.min(n.width,window.screen.width),s=["-left-aligned","-middle-aligned","-right-aligned"];return r-t<e&&m(s,"-left-aligned"),(t<i||r-t<i)&&m(s,"-middle-aligned"),t<e-50&&m(s,"-right-aligned"),s.length?-1!==s.indexOf(o)?o:s[0]:"-middle-aligned"}(l.left,s,i,p)),a}function m(t,e){t.indexOf(e)>-1&&t.splice(t.indexOf(e),1)}function b(t){if(t){if(!this._introItems[this._currentStep])return;var e=this._introItems[this._currentStep],n=G(e.element),o=this._options.helperElementPadding;A(e.element)?E(t,"introjs-fixedTooltip"):k(t,"introjs-fixedTooltip"),"floating"===e.position&&(o=0),t.style.cssText="width: "+(n.width+o)+"px; height:"+(n.height+o)+"px; top:"+(n.top-o/2)+"px;left: "+(n.left-o/2)+"px;"}}function v(){var t=document.querySelector(".introjs-disableInteraction");null===t&&((t=document.createElement("div")).className="introjs-disableInteraction",this._targetElement.appendChild(t)),b.call(this,t)}function g(t){t.setAttribute("role","button"),t.tabIndex=0}function y(t){void 0!==this._introChangeCallback&&this._introChangeCallback.call(this,t.element);var e,n,o,i,r=this,s=document.querySelector(".introjs-helperLayer"),c=document.querySelector(".introjs-tooltipReferenceLayer"),h="introjs-helperLayer";if("string"==typeof t.highlightClass&&(h+=" "+t.highlightClass),"string"==typeof this._options.highlightClass&&(h+=" "+this._options.highlightClass),null!==s){var f=c.querySelector(".introjs-helperNumberLayer"),d=c.querySelector(".introjs-tooltiptext"),m=c.querySelector(".introjs-arrow"),y=c.querySelector(".introjs-tooltip");if(o=c.querySelector(".introjs-skipbutton"),n=c.querySelector(".introjs-prevbutton"),e=c.querySelector(".introjs-nextbutton"),s.className=h,y.style.opacity=0,y.style.display="none",o.innerHTML=this._options.skipLabel,n.innerHTML=this._options.prevLabel,e.innerHTML=this._options.nextLabel,null!==f){var j=this._introItems[t.step-2>=0?t.step-2:0];(null!==j&&"forward"===this._direction&&"floating"===j.position||"backward"===this._direction&&"floating"===t.position)&&(f.style.opacity=0)}(i=Y(t.element))!==document.body&&J(i,t.element),b.call(r,s),b.call(r,c),x(document.querySelectorAll(".introjs-fixParent"),(function(t){k(t,/introjs-fixParent/g)})),_(),r._lastShowElementTimer&&window.clearTimeout(r._lastShowElementTimer),r._lastShowElementTimer=window.setTimeout((function(){null!==f&&(f.innerHTML=t.step),d.innerHTML=t.intro,y.style.display="block",p.call(r,t.element,y,m,f),r._options.showBullets&&(c.querySelector(".introjs-bullets li > a.active").className="",c.querySelector('.introjs-bullets li > a[data-stepnumber="'+t.step+'"]').className="active"),c.querySelector(".introjs-progress .introjs-progressbar").style.cssText="width:"+X.call(r)+"%;",c.querySelector(".introjs-progress .introjs-progressbar").setAttribute("aria-valuenow",X.call(r)),y.style.opacity=1,f&&(f.style.opacity=1),null!=o&&/introjs-donebutton/gi.test(o.className)?o.focus():null!=e&&e.focus(),w.call(r,t.scrollTo,t,d)}),350)}else{var C=document.createElement("div"),S=document.createElement("div"),A=document.createElement("div"),L=document.createElement("div"),O=document.createElement("div"),T=document.createElement("div"),P=document.createElement("div"),I=document.createElement("div");C.className=h,S.className="introjs-tooltipReferenceLayer",(i=Y(t.element))!==document.body&&J(i,t.element),b.call(r,C),b.call(r,S),this._targetElement.appendChild(C),this._targetElement.appendChild(S),A.className="introjs-arrow",O.className="introjs-tooltiptext",O.innerHTML=t.intro,T.className="introjs-bullets",!1===this._options.showBullets&&(T.style.display="none");var q=document.createElement("ul");q.setAttribute("role","tablist");var M=function(){r.goToStep(this.getAttribute("data-stepnumber"))};x(this._introItems,(function(e,n){var o=document.createElement("li"),i=document.createElement("a");o.setAttribute("role","presentation"),i.setAttribute("role","tab"),i.onclick=M,n===t.step-1&&(i.className="active"),g(i),i.innerHTML="&nbsp;",i.setAttribute("data-stepnumber",e.step),o.appendChild(i),q.appendChild(o)})),T.appendChild(q),P.className="introjs-progress",!1===this._options.showProgress&&(P.style.display="none");var H=document.createElement("div");H.className="introjs-progressbar",H.setAttribute("role","progress"),H.setAttribute("aria-valuemin",0),H.setAttribute("aria-valuemax",100),H.setAttribute("aria-valuenow",X.call(this)),H.style.cssText="width:"+X.call(this)+"%;",P.appendChild(H),I.className="introjs-tooltipbuttons",!1===this._options.showButtons&&(I.style.display="none"),L.className="introjs-tooltip",L.appendChild(O),L.appendChild(T),L.appendChild(P);var B=document.createElement("span");!0===this._options.showStepNumbers&&(B.className="introjs-helperNumberLayer",B.innerHTML=t.step,S.appendChild(B)),L.appendChild(A),S.appendChild(L),(e=document.createElement("a")).onclick=function(){r._introItems.length-1!==r._currentStep&&l.call(r)},g(e),e.innerHTML=this._options.nextLabel,(n=document.createElement("a")).onclick=function(){0!==r._currentStep&&a.call(r)},g(n),n.innerHTML=this._options.prevLabel,(o=document.createElement("a")).className=this._options.buttonClass+" introjs-skipbutton ",g(o),o.innerHTML=this._options.skipLabel,o.onclick=function(){r._introItems.length-1===r._currentStep&&"function"==typeof r._introCompleteCallback&&r._introCompleteCallback.call(r),r._introItems.length-1!==r._currentStep&&"function"==typeof r._introExitCallback&&r._introExitCallback.call(r),"function"==typeof r._introSkipCallback&&r._introSkipCallback.call(r),u.call(r,r._targetElement)},I.appendChild(o),this._introItems.length>1&&(I.appendChild(n),I.appendChild(e)),L.appendChild(I),p.call(r,t.element,L,A,B),w.call(this,t.scrollTo,t,L)}var R=r._targetElement.querySelector(".introjs-disableInteraction");R&&R.parentNode.removeChild(R),t.disableInteraction&&v.call(r),0===this._currentStep&&this._introItems.length>1?(null!=o&&(o.className=this._options.buttonClass+" introjs-skipbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),!0===this._options.hidePrev?(null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton introjs-hidden"),null!=e&&E(e,"introjs-fullbutton")):null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton introjs-disabled"),null!=o&&(o.innerHTML=this._options.skipLabel)):this._introItems.length-1===this._currentStep||1===this._introItems.length?(null!=o&&(o.innerHTML=this._options.doneLabel,E(o,"introjs-donebutton")),null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton"),!0===this._options.hideNext?(null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-hidden"),null!=n&&E(n,"introjs-fullbutton")):null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton introjs-disabled")):(null!=o&&(o.className=this._options.buttonClass+" introjs-skipbutton"),null!=n&&(n.className=this._options.buttonClass+" introjs-prevbutton"),null!=e&&(e.className=this._options.buttonClass+" introjs-nextbutton"),null!=o&&(o.innerHTML=this._options.skipLabel)),n.setAttribute("role","button"),e.setAttribute("role","button"),o.setAttribute("role","button"),null!=e&&e.focus(),function(t){var e;if(t.element instanceof SVGElement)for(e=t.element.parentNode;null!==t.element.parentNode&&e.tagName&&"body"!==e.tagName.toLowerCase();)"svg"===e.tagName.toLowerCase()&&E(e,"introjs-showElement introjs-relativePosition"),e=e.parentNode;E(t.element,"introjs-showElement");var n=N(t.element,"position");for("absolute"!==n&&"relative"!==n&&"fixed"!==n&&E(t.element,"introjs-relativePosition"),e=t.element.parentNode;null!==e&&e.tagName&&"body"!==e.tagName.toLowerCase();){var o=N(e,"z-index"),i=parseFloat(N(e,"opacity")),r=N(e,"transform")||N(e,"-webkit-transform")||N(e,"-moz-transform")||N(e,"-ms-transform")||N(e,"-o-transform");(/[0-9]+/.test(o)||i<1||"none"!==r&&void 0!==r)&&E(e,"introjs-fixParent"),e=e.parentNode}}(t),void 0!==this._introAfterChangeCallback&&this._introAfterChangeCallback.call(this,t.element)}function w(t,e,n){var o;if("off"!==t&&this._options.scrollToElement&&(o="tooltip"===t?n.getBoundingClientRect():e.element.getBoundingClientRect(),!function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom+80<=window.innerHeight&&e.right<=window.innerWidth}(e.element))){var i=o.bottom-(o.bottom-o.top),r=L().height,s={top:o.top+pageYOffset-r/2+o.height/2,left:0,behavior:"smooth"};try{i<0||e.element.clientHeight>r?(s.top-=this._options.scrollPadding,window.scrollTo(s)):(s.top+=this._options.scrollPadding,window.scrollTo(s))}catch(t){i<0||e.element.clientHeight>r?window.scrollTo(0,s.top-30):window.scrollTo(0,s.top+30)}}}function _(){x(document.querySelectorAll(".introjs-showElement"),(function(t){k(t,/introjs-[a-zA-Z]+/g)}))}function x(t,e,n){if(t)for(var o=0,i=t.length;o<i;o++)e(t[o],o);"function"==typeof n&&n()}var j,C=(j={},function(t,e){return j[e=e||"introjs-stamp"]=j[e]||0,void 0===t[e]&&(t[e]=j[e]++),t[e]}),S=new function(){var t="introjs_event";this._id=function(t,e,n,o){return e+C(n)+(o?"_"+C(o):"")},this.on=function(e,n,o,i,r){var s=this._id.apply(this,arguments),l=function(t){return o.call(i||e,t||window.event)};"addEventListener"in e?e.addEventListener(n,l,r):"attachEvent"in e&&e.attachEvent("on"+n,l),e[t]=e[t]||{},e[t][s]=l},this.off=function(e,n,o,i,r){var s=this._id.apply(this,arguments),l=e[t]&&e[t][s];l&&("removeEventListener"in e?e.removeEventListener(n,l,r):"detachEvent"in e&&e.detachEvent("on"+n,l),e[t][s]=null)}};function E(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n+" "+e)}else void 0!==t.classList?x(e.split(" "),(function(e){t.classList.add(e)})):t.className.match(e)||(t.className+=" "+e)}function k(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n.replace(e,"").replace(/^\s+|\s+$/g,""))}else t.className=t.className.replace(e,"").replace(/^\s+|\s+$/g,"")}function N(t,e){var n="";return t.currentStyle?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,null).getPropertyValue(e)),n&&n.toLowerCase?n.toLowerCase():n}function A(t){var e=t.parentNode;return!(!e||"HTML"===e.nodeName)&&("fixed"===N(t,"position")||A(e))}function L(){try{var t=document.documentElement;return{width:t.clientWidth,height:t.clientHeight}}catch(t){return{width:window.innerWidth,height:window.innerHeight}}}function O(t){var e=document.createElement("div"),n="",o=this;if(e.className="introjs-overlay",t.tagName&&"body"!==t.tagName.toLowerCase()){var i=G(t);i&&(n+="width: "+i.width+"px; height:"+i.height+"px; top:"+i.top+"px;left: "+i.left+"px;",e.style.cssText=n)}else n+="top: 0;bottom: 0; left: 0;right: 0;position: fixed;",e.style.cssText=n;return t.appendChild(e),e.onclick=function(){!0===o._options.exitOnOverlayClick&&u.call(o,t)},window.setTimeout((function(){n+="opacity: "+o._options.overlayOpacity.toString()+";",e.style.cssText=n}),10),!0}function T(){var t=document.querySelector(".introjs-hintReference");if(t){var e=t.getAttribute("data-step");return t.parentNode.removeChild(t),e}}function P(t){if(this._introItems=[],this._options.hints)x(this._options.hints,function(t){var e=i(t);"string"==typeof e.element&&(e.element=document.querySelector(e.element)),e.hintPosition=e.hintPosition||this._options.hintPosition,e.hintAnimation=e.hintAnimation||this._options.hintAnimation,null!==e.element&&this._introItems.push(e)}.bind(this));else{var e=t.querySelectorAll("*[data-hint]");if(!e||!e.length)return!1;x(e,function(t){var e=t.getAttribute("data-hintanimation");e=e?"true"===e:this._options.hintAnimation,this._introItems.push({element:t,hint:t.getAttribute("data-hint"),hintPosition:t.getAttribute("data-hintposition")||this._options.hintPosition,hintAnimation:e,tooltipClass:t.getAttribute("data-tooltipclass"),position:t.getAttribute("data-position")||this._options.tooltipPosition})}.bind(this))}z.call(this),S.on(document,"click",T,this,!1),S.on(window,"resize",I,this,!0)}function I(){x(this._introItems,function(t){void 0!==t.targetElement&&V.call(this,t.hintPosition,t.element,t.targetElement)}.bind(this))}function q(t){var e=document.querySelector(".introjs-hints");return e?e.querySelectorAll(t):[]}function M(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];T.call(this),e&&E(e,"introjs-hidehint"),void 0!==this._hintCloseCallback&&this._hintCloseCallback.call(this,t)}function H(){x(q(".introjs-hint"),function(t){M.call(this,t.getAttribute("data-step"))}.bind(this))}function B(){var t=q(".introjs-hint");t&&t.length?x(t,function(t){R.call(this,t.getAttribute("data-step"))}.bind(this)):P.call(this,this._targetElement)}function R(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];e&&k(e,/introjs-hidehint/g)}function D(){x(q(".introjs-hint"),function(t){F.call(this,t.getAttribute("data-step"))}.bind(this))}function F(t){var e=q('.introjs-hint[data-step="'+t+'"]')[0];e&&e.parentNode.removeChild(e)}function z(){var t=this,e=document.querySelector(".introjs-hints");null===e&&((e=document.createElement("div")).className="introjs-hints"),x(this._introItems,function(n,o){if(!document.querySelector('.introjs-hint[data-step="'+o+'"]')){var i=document.createElement("a");g(i),i.onclick=function(e){return function(n){var o=n||window.event;o.stopPropagation&&o.stopPropagation(),null!==o.cancelBubble&&(o.cancelBubble=!0),W.call(t,e)}}(o),i.className="introjs-hint",n.hintAnimation||E(i,"introjs-hint-no-anim"),A(n.element)&&E(i,"introjs-fixedhint");var r=document.createElement("div");r.className="introjs-hint-dot";var s=document.createElement("div");s.className="introjs-hint-pulse",i.appendChild(r),i.appendChild(s),i.setAttribute("data-step",o),n.targetElement=n.element,n.element=i,V.call(this,n.hintPosition,i,n.targetElement),e.appendChild(i)}}.bind(this)),document.body.appendChild(e),void 0!==this._hintsAddedCallback&&this._hintsAddedCallback.call(this)}function V(t,e,n){var o=G.call(this,n);switch(t){default:case"top-left":e.style.left=o.left+"px",e.style.top=o.top+"px";break;case"top-right":e.style.left=o.left+o.width-20+"px",e.style.top=o.top+"px";break;case"bottom-left":e.style.left=o.left+"px",e.style.top=o.top+o.height-20+"px";break;case"bottom-right":e.style.left=o.left+o.width-20+"px",e.style.top=o.top+o.height-20+"px";break;case"middle-left":e.style.left=o.left+"px",e.style.top=o.top+(o.height-20)/2+"px";break;case"middle-right":e.style.left=o.left+o.width-20+"px",e.style.top=o.top+(o.height-20)/2+"px";break;case"middle-middle":e.style.left=o.left+(o.width-20)/2+"px",e.style.top=o.top+(o.height-20)/2+"px";break;case"bottom-middle":e.style.left=o.left+(o.width-20)/2+"px",e.style.top=o.top+o.height-20+"px";break;case"top-middle":e.style.left=o.left+(o.width-20)/2+"px",e.style.top=o.top+"px"}}function W(t){var e=document.querySelector('.introjs-hint[data-step="'+t+'"]'),n=this._introItems[t];void 0!==this._hintClickCallback&&this._hintClickCallback.call(this,e,n,t);var o=T.call(this);if(parseInt(o,10)!==t){var i=document.createElement("div"),r=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div");i.className="introjs-tooltip",i.onclick=function(t){t.stopPropagation?t.stopPropagation():t.cancelBubble=!0},r.className="introjs-tooltiptext";var a=document.createElement("p");a.innerHTML=n.hint;var c=document.createElement("a");c.className=this._options.buttonClass,c.setAttribute("role","button"),c.innerHTML=this._options.hintButtonLabel,c.onclick=M.bind(this,t),r.appendChild(a),r.appendChild(c),s.className="introjs-arrow",i.appendChild(s),i.appendChild(r),this._currentStep=e.getAttribute("data-step"),l.className="introjs-tooltipReferenceLayer introjs-hintReference",l.setAttribute("data-step",e.getAttribute("data-step")),b.call(this,l),l.appendChild(i),document.body.appendChild(l),p.call(this,e,i,s,null,!0)}}function G(t){var e=document.body,n=document.documentElement,o=window.pageYOffset||n.scrollTop||e.scrollTop,i=window.pageXOffset||n.scrollLeft||e.scrollLeft,r=t.getBoundingClientRect();return{top:r.top+o,width:r.width,height:r.height,left:r.left+i}}function Y(t){var e=window.getComputedStyle(t),n="absolute"===e.position,o=/(auto|scroll)/;if("fixed"===e.position)return document.body;for(var i=t;i=i.parentElement;)if(e=window.getComputedStyle(i),(!n||"static"!==e.position)&&o.test(e.overflow+e.overflowY+e.overflowX))return i;return document.body}function J(t,e){t.scrollTop=e.offsetTop-t.offsetTop}function X(){return parseInt(this._currentStep+1,10)/this._introItems.length*100}var $=function(e){var n;if("object"==typeof e)n=new t(e);else if("string"==typeof e){var o=document.querySelector(e);if(!o)throw new Error("There is no element with given selector.");n=new t(o)}else n=new t(document.body);return $.instances[C(n,"introjs-instance")]=n,n};return $.version="2.9.3",$.instances={},$.fn=t.prototype={clone:function(){return new t(this)},setOption:function(t,e){return this._options[t]=e,this},setOptions:function(t){return this._options=function(t,e){var n,o={};for(n in t)o[n]=t[n];for(n in e)o[n]=e[n];return o}(this._options,t),this},start:function(t){return e.call(this,this._targetElement,t),this},goToStep:function(t){return r.call(this,t),this},addStep:function(t){return this._options.steps||(this._options.steps=[]),this._options.steps.push(t),this},addSteps:function(t){if(t.length){for(var e=0;e<t.length;e++)this.addStep(t[e]);return this}},goToStepNumber:function(t){return s.call(this,t),this},nextStep:function(){return l.call(this),this},previousStep:function(){return a.call(this),this},exit:function(t){return u.call(this,this._targetElement,t),this},refresh:function(){return c.call(this),this},onbeforechange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=t,this},onchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=t,this},onafterchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=t,this},oncomplete:function(t){if("function"!=typeof t)throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=t,this},onhintsadded:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintsadded was not a function.");return this._hintsAddedCallback=t,this},onhintclick:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclick was not a function.");return this._hintClickCallback=t,this},onhintclose:function(t){if("function"!=typeof t)throw new Error("Provided callback for onhintclose was not a function.");return this._hintCloseCallback=t,this},onexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=t,this},onskip:function(t){if("function"!=typeof t)throw new Error("Provided callback for onskip was not a function.");return this._introSkipCallback=t,this},onbeforeexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforeexit was not a function.");return this._introBeforeExitCallback=t,this},addHints:function(){return P.call(this,this._targetElement),this},hideHint:function(t){return M.call(this,t),this},hideHints:function(){return H.call(this),this},showHint:function(t){return R.call(this,t),this},showHints:function(){return B.call(this),this},removeHints:function(){return D.call(this),this},removeHint:function(t){return F.call(this,t),this},showHintDialog:function(t){return W.call(this,t),this}},$},t.exports=o(),t.exports.introJs=function(){return console.warn('Deprecated: please use require("intro.js") directly, instead of the introJs method of the function'),o().apply(this,arguments)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0A2M3Bva3Vwa2kvb25ib2FyZGluZy1jb3JlL2luZGV4LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3BhZ2Uvb25ib2FyZGluZy5zY3NzPzAxZmEiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZS9vbmJvYXJkaW5nL2pzL29uYm9hcmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQDYzcG9rdXBraS9vbmJvYXJkaW5nLWNvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpdCIsIk1hdGgiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwidGhpcyIsIkZ1bmN0aW9uIiwiZXhlYyIsImVycm9yIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibGVuZ3RoIiwibW9kdWxlc1RvRG9tIiwibGlzdCIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWQiLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJwdXNoIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiam9pbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJ0b1N0cmluZyIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4Iiwic3BsaWNlIiwiZmFpbHMiLCJERVNDUklQVE9SUyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsInNoYXJlZCIsImhhcyIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJnIiwidW5kZWZpbmVkIiwidG9JbnRlZ2VyIiwibWluIiwiYXJndW1lbnQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInNvdXJjZSIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwic2hhbSIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic2xpY2UiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJzdG9yZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiaW5zcGVjdFNvdXJjZSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsInN0YXRlIiwidW5zYWZlIiwic2ltcGxlIiwicGF0aCIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwibmFtZXNwYWNlIiwibWV0aG9kIiwiYXJndW1lbnRzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjbGFzc29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhIiwiZnVuY3Rpb25Ub1N0cmluZyIsIklTX1BVUkUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0IiwicG9zdGZpeCIsInJhbmRvbSIsIm1heCIsImludGVnZXIiLCJBcnJheSIsImlzQXJyYXkiLCJhcmciLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjYWNoZSIsInRocm93ZXIiLCJNRVRIT0RfTkFNRSIsIkFDQ0VTU09SUyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsIkVYSVNUUyIsImluZGV4T2YiLCJoaWRkZW5LZXlzIiwibmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJ0eXBlIiwidGVzdCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRCdWlsdEluIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImludGVybmFsT2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInRvT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9PVVQiLCJOT19IT0xFUyIsImNhbGxiYWNrZm4iLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwibWFwIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlck91dCIsImIiLCJhcHBseSIsIlNQRUNJRVMiLCJ3ZWxsS25vd25TeW1ib2wiLCJvcmlnaW5hbEFycmF5IiwiQyIsImNvbnN0cnVjdG9yIiwiaXRlcmF0b3IiLCIkIiwiY3JlYXRlUHJvcGVydHkiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwiYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiVVNFU19UT19MRU5HVEgiLCIwIiwibmF0aXZlU2xpY2UiLCJwcm90byIsInN0YXJ0IiwiZW5kIiwiQ29uc3RydWN0b3IiLCJrIiwiZmluIiwicHJvcGVydHlLZXkiLCJWOF9WRVJTSU9OIiwiYXJyYXkiLCJmb28iLCJtYXRjaCIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsInY4IiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJsb2NhbHMiLCJpbnRyb0pzIiwicmVxdWlyZSIsIkRFRkFVTFRfT1BUSU9OUyIsInRvb2x0aXBDbGFzcyIsInNraXBMYWJlbCIsImRvbmVMYWJlbCIsInByZXZMYWJlbCIsIm5leHRMYWJlbCIsImhpZGVQcmV2IiwiaGlkZU5leHQiLCJzaG93UHJvZ3Jlc3MiLCJzaG93QnVsbGV0cyIsInNob3dTdGVwTnVtYmVycyIsInNjcm9sbFRvIiwiZGlzYWJsZUludGVyYWN0aW9uIiwiZXhpdE9uT3ZlcmxheUNsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0ZXBzIiwiaW50cm8iLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsInRvdWNoIiwiZGVzY3RvcCIsImNvbnNvbGUiLCJfZ2V0U3RlcHNCeU1lZGlhTW9kZSIsIm9uYm9hcmRpbmciLCJkZWZhdWx0X29wdGlvbnMiLCJzZXRPcHRpb25zIiwib25iZWZvcmVjaGFuZ2UiLCJzdGVwIiwiX2N1cnJlbnRTdGVwIiwiYmVmb3JlU3RlcCIsInJlZnJlc2giLCJmVXBkYXRlUHJvcGVydGllc1N0ZXBCeVN0ZXBIb29rIiwiaWNvbiIsImNsYXNzTmFtZSIsImNsb3NlIiwiYXBwZW5kIiwiZXhpdCIsImZJbml0Q2xvc2VCdXR0b24iLCJzZXRUaW1lb3V0IiwieCIsInkiLCJ0b3AiLCJsZWZ0IiwiYmVoYXZpb3IiLCJmU2Nyb2xsVG8iLCIkZmluZCIsImFkZFRvVW5zY29wYWJsZXMiLCJTS0lQU19IT0xFUyIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwiZGlzcGxheSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIlByb3BlcnRpZXMiLCJvYmplY3RLZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIkludHJvSnMiLCJfdGFyZ2V0RWxlbWVudCIsIl9pbnRyb0l0ZW1zIiwiX29wdGlvbnMiLCJ0b29sdGlwUG9zaXRpb24iLCJoaWdobGlnaHRDbGFzcyIsImV4aXRPbkVzYyIsImtleWJvYXJkTmF2aWdhdGlvbiIsInNob3dCdXR0b25zIiwic2Nyb2xsVG9FbGVtZW50Iiwic2Nyb2xsUGFkZGluZyIsIm92ZXJsYXlPcGFjaXR5IiwicG9zaXRpb25QcmVjZWRlbmNlIiwiaGVscGVyRWxlbWVudFBhZGRpbmciLCJoaW50UG9zaXRpb24iLCJoaW50QnV0dG9uTGFiZWwiLCJoaW50QW5pbWF0aW9uIiwiYnV0dG9uQ2xhc3MiLCJhY3RpdmUiLCJwb2ludCIsInBvc2l0aW9ucyIsIl9pbnRyb0ZvckVsZW1lbnQiLCJ0YXJnZXRFbG0iLCJncm91cCIsImJvZHlFbCIsImNsYXNzTGlzdCIsImFkZCIsImFsbEludHJvU3RlcHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW50cm9JdGVtcyIsIl9mb3JFYWNoIiwiY3VycmVudEl0ZW0iLCJfY2xvbmVPYmplY3QiLCJlbGVtZW50IiwiZmxvYXRpbmdFbGVtZW50UXVlcnkiLCJib2R5IiwicG9zaXRpb24iLCJjdXJyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInBhcnNlSW50IiwibmV4dFN0ZXAiLCJ0ZW1wSW50cm9JdGVtcyIsInoiLCJzb3J0IiwiX2FkZE92ZXJsYXlMYXllciIsIl9uZXh0U3RlcCIsIkRPTUV2ZW50Iiwib24iLCJfb25LZXlEb3duIiwiX29uUmVzaXplIiwiY29kZSIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiX3ByZXZpb3VzU3RlcCIsInNyY0VsZW1lbnQiLCJfaW50cm9Db21wbGV0ZUNhbGxiYWNrIiwiX2V4aXRJbnRybyIsImNsaWNrIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsImpRdWVyeSIsIl9nb1RvU3RlcCIsIl9nb1RvU3RlcE51bWJlciIsIl9jdXJyZW50U3RlcE51bWJlciIsIl9kaXJlY3Rpb24iLCJjb250aW51ZVN0ZXAiLCJfaW50cm9CZWZvcmVDaGFuZ2VDYWxsYmFjayIsIl9zaG93RWxlbWVudCIsIl9yZWZyZXNoIiwiX3NldEhlbHBlckxheWVyUG9zaXRpb24iLCJvbGRIZWxwZXJOdW1iZXJMYXllciIsIm9sZEFycm93TGF5ZXIiLCJvbGR0b29sdGlwQ29udGFpbmVyIiwiX3BsYWNlVG9vbHRpcCIsIl9yZUFsaWduSGludHMiLCJ0YXJnZXRFbGVtZW50IiwiZm9yY2UiLCJjb250aW51ZUV4aXQiLCJfaW50cm9CZWZvcmVFeGl0Q2FsbGJhY2siLCJvdmVybGF5TGF5ZXJzIiwib3ZlcmxheUxheWVyIiwib3BhY2l0eSIsImhlbHBlckxheWVyIiwicmVmZXJlbmNlTGF5ZXIiLCJkaXNhYmxlSW50ZXJhY3Rpb25MYXllciIsImZsb2F0aW5nRWxlbWVudCIsIl9yZW1vdmVTaG93RWxlbWVudCIsInBhcmVudCIsIl9yZW1vdmVDbGFzcyIsIm9mZiIsIl9pbnRyb0V4aXRDYWxsYmFjayIsInRvb2x0aXBMYXllciIsImFycm93TGF5ZXIiLCJoZWxwZXJOdW1iZXJMYXllciIsImhpbnRNb2RlIiwiY3VycmVudFN0ZXBPYmoiLCJ0b29sdGlwT2Zmc2V0IiwidGFyZ2V0T2Zmc2V0Iiwid2luZG93U2l6ZSIsImN1cnJlbnRUb29sdGlwUG9zaXRpb24iLCJ0b29sdGlwQ3NzQ2xhc3MiLCJyaWdodCIsImJvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5Ub3AiLCJfZGV0ZXJtaW5lQXV0b1Bvc2l0aW9uIiwiYWJzQ2xpZW50V2lkdGgiLCJfZ2V0T2Zmc2V0IiwiX2dldFdpblNpemUiLCJfYWRkQ2xhc3MiLCJ0b29sdGlwTGF5ZXJTdHlsZVJpZ2h0IiwiX2NoZWNrTGVmdCIsImhlaWdodCIsInRvb2x0aXBMYXllclN0eWxlTGVmdFJpZ2h0Iiwid2lkdGgiLCJfY2hlY2tSaWdodCIsInRvb2x0aXBMYXllclN0eWxlTGVmdCIsImRlc2lyZWRUb29sdGlwUG9zaXRpb24iLCJwb3NzaWJsZVBvc2l0aW9ucyIsInRvb2x0aXBIZWlnaHQiLCJ0b29sdGlwV2lkdGgiLCJ0YXJnZXRFbGVtZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNhbGN1bGF0ZWRQb3NpdGlvbiIsIl9yZW1vdmVFbnRyeSIsInBvcyIsImh5cGhlbkluZGV4IiwiZGVzaXJlZEFsaWdubWVudCIsInN1YnN0ciIsIm9mZnNldExlZnQiLCJoYWxmVG9vbHRpcFdpZHRoIiwid2luV2lkdGgiLCJzY3JlZW4iLCJwb3NzaWJsZUFsaWdubWVudHMiLCJfZGV0ZXJtaW5lQXV0b0FsaWdubWVudCIsInN0cmluZ0FycmF5Iiwic3RyaW5nVG9SZW1vdmUiLCJlbGVtZW50UG9zaXRpb24iLCJ3aWR0aEhlaWdodFBhZGRpbmciLCJfaXNGaXhlZCIsIl9kaXNhYmxlSW50ZXJhY3Rpb24iLCJfc2V0QW5jaG9yQXNCdXR0b24iLCJhbmNob3IiLCJ0YWJJbmRleCIsIl9pbnRyb0NoYW5nZUNhbGxiYWNrIiwibmV4dFRvb2x0aXBCdXR0b24iLCJwcmV2VG9vbHRpcEJ1dHRvbiIsInNraXBUb29sdGlwQnV0dG9uIiwic2Nyb2xsUGFyZW50Iiwib2xkSGVscGVyTGF5ZXIiLCJvbGRSZWZlcmVuY2VMYXllciIsIm9sZHRvb2x0aXBMYXllciIsImlubmVySFRNTCIsImxhc3RJbnRyb0l0ZW0iLCJfZ2V0U2Nyb2xsUGFyZW50IiwiX3Njcm9sbFBhcmVudFRvRWxlbWVudCIsIl9sYXN0U2hvd0VsZW1lbnRUaW1lciIsImNsZWFyVGltZW91dCIsIl9nZXRQcm9ncmVzcyIsImZvY3VzIiwiX3Njcm9sbFRvIiwidG9vbHRpcFRleHRMYXllciIsImJ1bGxldHNMYXllciIsInByb2dyZXNzTGF5ZXIiLCJidXR0b25zTGF5ZXIiLCJ1bENvbnRhaW5lciIsImFuY2hvckNsaWNrIiwiZ29Ub1N0ZXAiLCJpbm5lckxpIiwiYW5jaG9yTGluayIsIm9uY2xpY2siLCJwcm9ncmVzc0JhciIsIl9pbnRyb1NraXBDYWxsYmFjayIsInBhcmVudEVsbSIsIlNWR0VsZW1lbnQiLCJ0YWdOYW1lIiwiY3VycmVudEVsZW1lbnRQb3NpdGlvbiIsIl9nZXRQcm9wVmFsdWUiLCJ6SW5kZXgiLCJwYXJzZUZsb2F0IiwidHJhbnNmb3JtIiwiX3NldFNob3dFbGVtZW50IiwiX2ludHJvQWZ0ZXJDaGFuZ2VDYWxsYmFjayIsInJlY3QiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJfZWxlbWVudEluVmlld3BvcnQiLCJ3aW5IZWlnaHQiLCJzY3JvbGxUb09wdGlvbnMiLCJwYWdlWU9mZnNldCIsImNsaWVudEhlaWdodCIsImVsbSIsImFyciIsImZvckVhY2hGbmMiLCJjb21wbGV0ZUZuYyIsImxlbiIsIl9zdGFtcCIsImV2ZW50c19rZXkiLCJfaWQiLCJsaXN0ZW5lciIsImNvbnRleHQiLCJ1c2VDYXB0dXJlIiwiaGFuZGxlciIsImV2ZW50IiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJwcmUiLCJjbHMiLCJjbGFzc05hbWVSZWdleCIsInByb3BOYW1lIiwicHJvcFZhbHVlIiwiY3VycmVudFN0eWxlIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5vZGVOYW1lIiwiRCIsInN0eWxlVGV4dCIsIl9yZW1vdmVIaW50VG9vbHRpcCIsInRvb2x0aXAiLCJfcG9wdWxhdGVIaW50cyIsImhpbnRzIiwiaGludCIsIl9hZGRIaW50cyIsIl9hbGlnbkhpbnRQb3NpdGlvbiIsIl9oaW50UXVlcnlTZWxlY3RvckFsbCIsInNlbGVjdG9yIiwiaGludHNXcmFwcGVyIiwiX2hpZGVIaW50Iiwic3RlcElkIiwiX2hpbnRDbG9zZUNhbGxiYWNrIiwiX2hpZGVIaW50cyIsIl9zaG93SGludHMiLCJfc2hvd0hpbnQiLCJfcmVtb3ZlSGludHMiLCJfcmVtb3ZlSGludCIsImV2dCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsIl9zaG93SGludERpYWxvZyIsImdldEhpbnRDbGljayIsImhpbnREb3QiLCJoaW50UHVsc2UiLCJfaGludHNBZGRlZENhbGxiYWNrIiwib2Zmc2V0IiwiaGludEVsZW1lbnQiLCJfaGludENsaWNrQ2FsbGJhY2siLCJyZW1vdmVkU3RlcCIsInRvb2x0aXBXcmFwcGVyIiwiY2xvc2VCdXR0b24iLCJkb2NFbCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsImV4Y2x1ZGVTdGF0aWNQYXJlbnQiLCJvdmVyZmxvd1JlZ2V4IiwicGFyZW50RWxlbWVudCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwib2Zmc2V0VG9wIiwiaW5zdGFuY2UiLCJpbnN0YW5jZXMiLCJjbG9uZSIsInNldE9wdGlvbiIsIm9wdGlvbiIsIm9iajEiLCJvYmoyIiwiYXR0cm5hbWUiLCJvYmozIiwiX21lcmdlT3B0aW9ucyIsImFkZFN0ZXAiLCJhZGRTdGVwcyIsImdvVG9TdGVwTnVtYmVyIiwicHJldmlvdXNTdGVwIiwicHJvdmlkZWRDYWxsYmFjayIsIm9uY2hhbmdlIiwib25hZnRlcmNoYW5nZSIsIm9uY29tcGxldGUiLCJvbmhpbnRzYWRkZWQiLCJvbmhpbnRjbGljayIsIm9uaGludGNsb3NlIiwib25leGl0Iiwib25za2lwIiwib25iZWZvcmVleGl0IiwiYWRkSGludHMiLCJoaWRlSGludCIsImhpZGVIaW50cyIsInNob3dIaW50Iiwic2hvd0hpbnRzIiwicmVtb3ZlSGludHMiLCJyZW1vdmVIaW50Iiwic2hvd0hpbnREaWFsb2ciLCJ3YXJuIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxP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RVRvcEIsVUFBVyxXQUVULE9BREF4RCxFQUFXaG9CLEtBQUtvQyxNQUNUQSxNQUVUcXBCLFNBQVUsU0FBVTNELEdBRWxCLE9BREFJLEVBQVVsb0IsS0FBS29DLEtBQU0wbEIsR0FDZDFsQixNQUVUc3BCLFVBQVcsV0FFVCxPQURBekQsRUFBV2pvQixLQUFLb0MsTUFDVEEsTUFFVHVwQixZQUFhLFdBRVgsT0FEQXhELEVBQWFub0IsS0FBS29DLE1BQ1hBLE1BRVR3cEIsV0FBWSxTQUFVOUQsR0FFcEIsT0FEQU0sRUFBWXBvQixLQUFLb0MsS0FBTTBsQixHQUNoQjFsQixNQUVUeXBCLGVBQWdCLFNBQVUvRCxHQUV4QixPQURBVSxFQUFnQnhvQixLQUFLb0MsS0FBTTBsQixHQUNwQjFsQixPQUlKa1MsR0F6aEZEMVUsRUFBT0QsUUFBVXNJLElBR2pCckksRUFBT0QsUUFBUTJVLFFBQVUsV0FHdkIsT0FGQXVCLFFBQVFpVyxLQUFLLHNHQUVON2pCLElBQUltSyxNQUFNaFEsS0FBTW9LIiwiZmlsZSI6ImpzL29uYm9hcmRpbmcuanM/M2YwOWRmMDliNzcyNWNiMGIzZjAiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODYpO1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuOC4zJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY2FjaGUgPSB7fTtcblxudmFyIHRocm93ZXIgPSBmdW5jdGlvbiAoaXQpIHsgdGhyb3cgaXQ7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBvcHRpb25zKSB7XG4gIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXTtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHZhciBBQ0NFU1NPUlMgPSBoYXMob3B0aW9ucywgJ0FDQ0VTU09SUycpID8gb3B0aW9ucy5BQ0NFU1NPUlMgOiBmYWxzZTtcbiAgdmFyIGFyZ3VtZW50MCA9IGhhcyhvcHRpb25zLCAwKSA/IG9wdGlvbnNbMF0gOiB0aHJvd2VyO1xuICB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdID0gISFtZXRob2QgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQUNDRVNTT1JTICYmICFERVNDUklQVE9SUykgcmV0dXJuIHRydWU7XG4gICAgdmFyIE8gPSB7IGxlbmd0aDogLTEgfTtcblxuICAgIGlmIChBQ0NFU1NPUlMpIGRlZmluZVByb3BlcnR5KE8sIDEsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiB0aHJvd2VyIH0pO1xuICAgIGVsc2UgT1sxXSA9IDE7XG5cbiAgICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCwgZmlsdGVyT3V0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIElTX0ZJTFRFUl9PVVQgPSBUWVBFID09IDc7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfT1VUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJPdXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlck91dGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJPdXQ6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdzbGljZScsIHsgQUNDRVNTT1JTOiB0cnVlLCAwOiAwLCAxOiAyIH0pO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS0zLTEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/P3JlZi0tMi0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTItMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTItMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMi00IS4vb25ib2FyZGluZy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgaW50cm9KcyA9IHJlcXVpcmUoJ0A2M3Bva3Vwa2kvb25ib2FyZGluZy1jb3JlJyk7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgdG9vbHRpcENsYXNzOiAnb25ib2FyZGluZy1iYXNlLXN0ZXBzJyxcbiAgc2tpcExhYmVsOiAn0J/RgNC+0L/Rg9GB0YLQuNGC0YwnLFxuICBkb25lTGFiZWw6ICfQl9Cw0LrQvtC90YfQuNGC0YwnLFxuICBwcmV2TGFiZWw6ICfQndCw0LfQsNC0JyxcbiAgbmV4dExhYmVsOiAn0JTQsNC70LXQtScsXG4gIGhpZGVQcmV2OiB0cnVlLFxuICBoaWRlTmV4dDogdHJ1ZSxcbiAgc2hvd1Byb2dyZXNzOiB0cnVlLFxuICBzaG93QnVsbGV0czogZmFsc2UsXG4gIHNob3dTdGVwTnVtYmVyczogZmFsc2UsXG4gIHNjcm9sbFRvOiAndG9vbHRpcCcsXG4gIGRpc2FibGVJbnRlcmFjdGlvbjogdHJ1ZSxcbiAgZXhpdE9uT3ZlcmxheUNsaWNrOiBmYWxzZSxcbn07XG5cbmNvbnN0IHRvdWNocG9pbnQgPSAxMDI0O1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZNYWluKTtcblxuLyoqXG4gKiDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQu9C+0LPQuNC60LhcbiAqL1xuZnVuY3Rpb24gZk1haW4oKSB7XG4gIHRyeSB7XG4gICAgaWYgKCF3aW5kb3cuc3RlcHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign0KjQsNCz0Lgg0L7RgtGB0YPRgtGB0YLQstGD0Y7RgicpO1xuICAgIH1cblxuICAgIGxldCBpbnRybyA9IGludHJvSnMoKTtcbiAgICBjb25zdCBzdGVwcyA9IF9nZXRTdGVwc0J5TWVkaWFNb2RlKHRvdWNocG9pbnQpO1xuXG4gICAgaW50cm8gPSBmVXBkYXRlUHJvcGVydGllc1N0ZXBCeVN0ZXBIb29rKGludHJvLCBERUZBVUxUX09QVElPTlMsIHN0ZXBzKTtcblxuICAgIGludHJvLnN0YXJ0KCk7XG5cbiAgICBmSW5pdENsb3NlQnV0dG9uKGludHJvKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gZlNjcm9sbFRvKCksIDUwMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICB9XG59XG5cbi8qKlxuICog0J7Qv9GA0LXQtNC10LvQtdC90LjQtSDRgNC10LbQuNC80LAg0L/QvtC60LDQt9CwIC0g0LzQvtCx0LjQu9GM0L3Ri9C1L9C00LXRgdC60YLQvtC/XG4gKi9cbmZ1bmN0aW9uIF9nZXRTdGVwc0J5TWVkaWFNb2RlKG1lZGlhKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblxuICAgIGlmICh3IDw9IG1lZGlhKSB7XG4gICAgICByZXR1cm4gd2luZG93LnN0ZXBzLnRvdWNoKCk7XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cuc3RlcHMuZGVzY3RvcCgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgfVxufVxuXG4vKipcbiAqINCf0YDQvtCy0LXRgNC60LAg0LLQuNC00LjQvNC+0YHRgtC4ICjRgdGD0YnQtdGB0YLQstC+0LLQsNC90LjRjykg0Y3Qu9C10LzQtdC90YLQsFxuICogQHBhcmFtIHt9IGVsZW1lbnQgLSDRjdC70LXQvNC10L3RglxuICovXG5mdW5jdGlvbiBfaXNFbGVtZW50RXhpc3QoZWxlbWVudCkge1xuICB0cnkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQrdC70LXQvNC10L3RgiDQvdC1INC/0LXRgNC10LTQsNC9Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKGhlaWdodCAhPT0gMCAmJiB3aWR0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gIH1cbn1cblxuLyoqXG4gKiDQn9C+0LvRg9GH0LXQvdC40LUg0LLQuNC00LjQvNC+0LPQviDRjdC70LXQvNC10L3RgtCwINC/0L4gY3NzINGB0LXQu9C10LrRgtC+0YDRg1xuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yIC0gY3NzINCy0LDQu9C40LTQvdGL0Lkg0YHQtdC70LXQutGC0L7RgFxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50KHNlbGVjdG9yKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQodC10LvQtdC60YLQvtGAINC90LUg0L/QtdGA0LXQtNCw0L0nKTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksXG4gICAgKTtcblxuICAgIGNvbnN0IHZpc2libGVFbGVtZW50ID0gZWxlbWVudHMuZmluZCgoZWwpID0+IF9pc0VsZW1lbnRFeGlzdChlbCkpO1xuXG4gICAgaWYgKCF2aXNpYmxlRWxlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfQktC40LTQuNC80YvQuSDRjdC70LXQvNC10L3RgiDQvdC1INC90LDQudC00LXQvScpO1xuICAgIH1cblxuICAgIHJldHVybiB2aXNpYmxlRWxlbWVudDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gIH1cbn1cblxuLyoqXG4gKiDQn9GA0L7QutGA0YPRgtC60LBcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0g0LrQvtC+0YDQtNC40L3QsNGC0LAgWCDQv9GA0L7QutGA0YPRgtC60LhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IC0g0LrQvtC+0YDQtNC40L3QsNGC0LAgWSDQv9GA0L7QutGA0YPRgtC60LhcbiAqL1xuZnVuY3Rpb24gZlNjcm9sbFRvKHggPSAwLCB5ID0gMCkge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICB0b3A6IHgsXG4gICAgICBsZWZ0OiB5LFxuICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgIH07XG4gICAgd2luZG93LnNjcm9sbFRvKG9wdGlvbnMpO1xuICB9IGNhdGNoIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oeCwgeSk7XG4gIH1cbn1cblxuLyoqXG4gKiDQntCx0L3QvtCy0LvQtdC90LjQtSDQvdCw0YHRgtGA0L7QtdC6INC/0L7QtCDQutCw0LbQtNGL0Lkg0YjQsNCzINC/0L7QtNGB0LrQsNC30L7Quiwg0YHQvNC10L3QsCDRgtC10LrRgdGC0LAsINC+0YTQvtGA0LzQu9C10L3QuNGPINC4INGC0LRcbiAqIEBwYXJhbSAge30gb25ib2FyZGluZyAtINC+0LHRitC10LrRgiDQv9C+0LTRgdC60LDQt9C+0LpcbiAqIEBwYXJhbSAge30gZGVmYXVsdF9vcHRpb25zIC0g0YHRgtCw0L3QtNCw0YDRgtC90YvQtSDQvdCw0YHRgtGA0L7QudC60LhcbiAqIEBwYXJhbSAge30gc3RlcHMgLSDQvtCx0YrQtdC60YIg0YjQsNCz0L7QsiDRgSDQvdC10YHRgtCw0L3QtNCw0YDRgtC90YvQvNC4INC90LDRgdGC0YDQvtC50LrQsNC80LhcbiAqL1xuZnVuY3Rpb24gZlVwZGF0ZVByb3BlcnRpZXNTdGVwQnlTdGVwSG9vayhvbmJvYXJkaW5nLCBkZWZhdWx0X29wdGlvbnMsIHN0ZXBzKSB7XG4gIHRyeSB7XG4gICAgLy8g0YPRgdGC0LDQvdC+0LLQutCwINGB0YLQsNC90LTQsNGA0YLQvdGL0YUg0L3QsNGB0YLRgNC+0LXQulxuICAgIG9uYm9hcmRpbmcuc2V0T3B0aW9ucyh7XG4gICAgICAuLi5kZWZhdWx0X29wdGlvbnMsXG4gICAgICBzdGVwcyxcbiAgICB9KTtcblxuICAgIC8vINC/0LXRgNC10L7Qv9GA0LXQtNC10LvQtdC90LjQtSDQvdCw0YHRgtGA0L7QtdC6INC/0L7QtCDQutCw0LbQtNGL0Lkg0YjQsNCzXG4gICAgb25ib2FyZGluZy5vbmJlZm9yZWNoYW5nZSgoKSA9PiB7XG4gICAgICBjb25zdCBzdGVwID0gc3RlcHNbb25ib2FyZGluZy5fY3VycmVudFN0ZXBdO1xuXG4gICAgICBvbmJvYXJkaW5nLnNldE9wdGlvbnMoe1xuICAgICAgICAuLi5kZWZhdWx0X29wdGlvbnMsXG4gICAgICAgIG5leHRMYWJlbDogc3RlcC5uZXh0TGFiZWwgfHwgZGVmYXVsdF9vcHRpb25zLm5leHRMYWJlbCxcbiAgICAgICAgcHJldkxhYmVsOiBzdGVwLnByZXZMYWJlbCB8fCBkZWZhdWx0X29wdGlvbnMucHJldkxhYmVsLFxuICAgICAgICBkb25lTGFiZWw6IHN0ZXAuZG9uZUxhYmVsIHx8IGRlZmF1bHRfb3B0aW9ucy5kb25lTGFiZWwsXG4gICAgICAgIHNraXBMYWJlbDogc3RlcC5za2lwTGFiZWwgfHwgZGVmYXVsdF9vcHRpb25zLnNraXBMYWJlbCxcbiAgICAgICAgdG9vbHRpcENsYXNzOiBzdGVwLnRvb2x0aXBDbGFzcyB8fCBkZWZhdWx0X29wdGlvbnMudG9vbHRpcENsYXNzLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChzdGVwLmJlZm9yZVN0ZXApIHtcbiAgICAgICAgc3RlcC5iZWZvcmVTdGVwKCk7XG4gICAgICAgIG9uYm9hcmRpbmcucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9uYm9hcmRpbmc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICB9XG59XG5cbi8qKlxuICog0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0LrQvdC+0L/QutC4INCX0LDQutGA0YvRgtGMXG4gKiBAcGFyYW0gIHt9IG9uYm9hcmRpbmcgLSDQvtCx0YrQtdC60YIg0L/QvtC00YHQutCw0LfQvtC6XG4gKi9cbmZ1bmN0aW9uIGZJbml0Q2xvc2VCdXR0b24ob25ib2FyZGluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtdG9vbHRpcCcpO1xuXG4gICAgLy8g0YHQvtC30LTQsNC90LjQtSDQuNC60L7QvdC60Lgg0LrRgNC10YHRgtC40LrQsFxuICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgaWNvbi5jbGFzc05hbWUgPSAnZHMtaWNvbiBpY29uLWNsb3NlJztcblxuICAgIC8vINGB0L7Qt9C00LDQvdC40LUg0LrQvdC+0L/QutC4XG4gICAgY29uc3QgY2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBjbG9zZS5hcHBlbmQoaWNvbik7XG4gICAgY2xvc2UuY2xhc3NOYW1lID0gJ2ludHJvanMtdG9vbHRpcF9fY2xvc2UnO1xuICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gb25ib2FyZGluZy5leGl0KHRydWUpKTtcblxuICAgIC8vINC00L7QsdCw0LLQu9C10L3QuNC1INC60L3QvtC/0LrQuFxuICAgIGlmIChlbCkge1xuICAgICAgZWwuYXBwZW5kKGNsb3NlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoRklORCk7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EKTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eVwiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQyOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCIvKipcbiAqIEludHJvLmpzIHYyLjkuM1xuICogaHR0cHM6Ly9naXRodWIuY29tL3VzYWJsaWNhL2ludHJvLmpzXG4gKlxuICogQ29weXJpZ2h0IChDKSAyMDE3IEFmc2hpbiBNZWhyYWJhbmkgKEBhZnNoaW5tZWgpXG4gKi9cblxuKGZ1bmN0aW9uKGYpIHtcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGYoKTtcbiAgICAgICAgLy8gZGVwcmVjYXRlZCBmdW5jdGlvblxuICAgICAgICAvLyBAc2luY2UgMi44LjBcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMuaW50cm9KcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQ6IHBsZWFzZSB1c2UgcmVxdWlyZShcImludHJvLmpzXCIpIGRpcmVjdGx5LCBpbnN0ZWFkIG9mIHRoZSBpbnRyb0pzIG1ldGhvZCBvZiB0aGUgZnVuY3Rpb24nKTtcbiAgICAgICAgICAvLyBpbnRyb0pzKClcbiAgICAgICAgICByZXR1cm4gZigpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW10sIGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBnO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgZyA9IHdpbmRvdztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBnID0gZ2xvYmFsO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBnID0gc2VsZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGcgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGcuaW50cm9KcyA9IGYoKTtcbiAgICB9XG59KShmdW5jdGlvbiAoKSB7XG4gIC8vRGVmYXVsdCBjb25maWcvdmFyaWFibGVzXG4gIHZhciBWRVJTSU9OID0gJzIuOS4zJztcblxuICAvKipcbiAgICogSW50cm9KcyBtYWluIGNsYXNzXG4gICAqXG4gICAqIEBjbGFzcyBJbnRyb0pzXG4gICAqL1xuICBmdW5jdGlvbiBJbnRyb0pzKG9iaikge1xuICAgIHRoaXMuX3RhcmdldEVsZW1lbnQgPSBvYmo7XG4gICAgdGhpcy5faW50cm9JdGVtcyA9IFtdO1xuXG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgIC8qIE5leHQgYnV0dG9uIGxhYmVsIGluIHRvb2x0aXAgYm94ICovXG4gICAgICBuZXh0TGFiZWw6ICdOZXh0ICZyYXJyOycsXG4gICAgICAvKiBQcmV2aW91cyBidXR0b24gbGFiZWwgaW4gdG9vbHRpcCBib3ggKi9cbiAgICAgIHByZXZMYWJlbDogJyZsYXJyOyBCYWNrJyxcbiAgICAgIC8qIFNraXAgYnV0dG9uIGxhYmVsIGluIHRvb2x0aXAgYm94ICovXG4gICAgICBza2lwTGFiZWw6ICdTa2lwJyxcbiAgICAgIC8qIERvbmUgYnV0dG9uIGxhYmVsIGluIHRvb2x0aXAgYm94ICovXG4gICAgICBkb25lTGFiZWw6ICdEb25lJyxcbiAgICAgIC8qIEhpZGUgcHJldmlvdXMgYnV0dG9uIGluIHRoZSBmaXJzdCBzdGVwPyBPdGhlcndpc2UsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYnV0dG9uLiAqL1xuICAgICAgaGlkZVByZXY6IGZhbHNlLFxuICAgICAgLyogSGlkZSBuZXh0IGJ1dHRvbiBpbiB0aGUgbGFzdCBzdGVwPyBPdGhlcndpc2UsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYnV0dG9uLiAqL1xuICAgICAgaGlkZU5leHQ6IGZhbHNlLFxuICAgICAgLyogRGVmYXVsdCB0b29sdGlwIGJveCBwb3NpdGlvbiAqL1xuICAgICAgdG9vbHRpcFBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgIC8qIE5leHQgQ1NTIGNsYXNzIGZvciB0b29sdGlwIGJveGVzICovXG4gICAgICB0b29sdGlwQ2xhc3M6ICcnLFxuICAgICAgLyogQ1NTIGNsYXNzIHRoYXQgaXMgYWRkZWQgdG8gdGhlIGhlbHBlckxheWVyICovXG4gICAgICBoaWdobGlnaHRDbGFzczogJycsXG4gICAgICAvKiBDbG9zZSBpbnRyb2R1Y3Rpb24gd2hlbiBwcmVzc2luZyBFc2NhcGUgYnV0dG9uPyAqL1xuICAgICAgZXhpdE9uRXNjOiB0cnVlLFxuICAgICAgLyogQ2xvc2UgaW50cm9kdWN0aW9uIHdoZW4gY2xpY2tpbmcgb24gb3ZlcmxheSBsYXllcj8gKi9cbiAgICAgIGV4aXRPbk92ZXJsYXlDbGljazogdHJ1ZSxcbiAgICAgIC8qIFNob3cgc3RlcCBudW1iZXJzIGluIGludHJvZHVjdGlvbj8gKi9cbiAgICAgIHNob3dTdGVwTnVtYmVyczogdHJ1ZSxcbiAgICAgIC8qIExldCB1c2VyIHVzZSBrZXlib2FyZCB0byBuYXZpZ2F0ZSB0aGUgdG91cj8gKi9cbiAgICAgIGtleWJvYXJkTmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgIC8qIFNob3cgdG91ciBjb250cm9sIGJ1dHRvbnM/ICovXG4gICAgICBzaG93QnV0dG9uczogdHJ1ZSxcbiAgICAgIC8qIFNob3cgdG91ciBidWxsZXRzPyAqL1xuICAgICAgc2hvd0J1bGxldHM6IHRydWUsXG4gICAgICAvKiBTaG93IHRvdXIgcHJvZ3Jlc3M/ICovXG4gICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgLyogU2Nyb2xsIHRvIGhpZ2hsaWdodGVkIGVsZW1lbnQ/ICovXG4gICAgICBzY3JvbGxUb0VsZW1lbnQ6IHRydWUsXG4gICAgICAvKlxuICAgICAgICogU2hvdWxkIHdlIHNjcm9sbCB0aGUgdG9vbHRpcCBvciB0YXJnZXQgZWxlbWVudD9cbiAgICAgICAqXG4gICAgICAgKiBPcHRpb25zIGFyZTogJ2VsZW1lbnQnIG9yICd0b29sdGlwJ1xuICAgICAgICovXG4gICAgICBzY3JvbGxUbzogJ2VsZW1lbnQnLFxuICAgICAgLyogUGFkZGluZyB0byBhZGQgYWZ0ZXIgc2Nyb2xsaW5nIHdoZW4gZWxlbWVudCBpcyBub3QgaW4gdGhlIHZpZXdwb3J0IChpbiBwaXhlbHMpICovXG4gICAgICBzY3JvbGxQYWRkaW5nOiAzMCxcbiAgICAgIC8qIFNldCB0aGUgb3ZlcmxheSBvcGFjaXR5ICovXG4gICAgICBvdmVybGF5T3BhY2l0eTogMC44LFxuICAgICAgLyogUHJlY2VkZW5jZSBvZiBwb3NpdGlvbnMsIHdoZW4gYXV0byBpcyBlbmFibGVkICovXG4gICAgICBwb3NpdGlvblByZWNlZGVuY2U6IFtcImJvdHRvbVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwibGVmdFwiXSxcbiAgICAgIC8qIERpc2FibGUgYW4gaW50ZXJhY3Rpb24gd2l0aCBlbGVtZW50PyAqL1xuICAgICAgZGlzYWJsZUludGVyYWN0aW9uOiBmYWxzZSxcbiAgICAgIC8qIFNldCBob3cgbXVjaCBwYWRkaW5nIHRvIGJlIHVzZWQgYXJvdW5kIGhlbHBlciBlbGVtZW50ICovXG4gICAgICBoZWxwZXJFbGVtZW50UGFkZGluZzogMTAsXG4gICAgICAvKiBEZWZhdWx0IGhpbnQgcG9zaXRpb24gKi9cbiAgICAgIGhpbnRQb3NpdGlvbjogJ3RvcC1taWRkbGUnLFxuICAgICAgLyogSGludCBidXR0b24gbGFiZWwgKi9cbiAgICAgIGhpbnRCdXR0b25MYWJlbDogJ0dvdCBpdCcsXG4gICAgICAvKiBBZGRpbmcgYW5pbWF0aW9uIHRvIGhpbnRzPyAqL1xuICAgICAgaGludEFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgIC8qIGFkZGl0aW9uYWwgY2xhc3NlcyB0byBwdXQgb24gdGhlIGJ1dHRvbnMgKi9cbiAgICAgIGJ1dHRvbkNsYXNzOiBcImludHJvanMtYnV0dG9uXCIsXG4gICAgICAvKiBjaGFuZ2UgcG9zaXRpb24ncyBiZWhhdmlvciBvbiBtZWRpYSBpZiBuZWVkXG4gICAgICBtb2JpbGUgZmlyc3Qgb3JpZW50ZWRcbiAgICAgICovXG4gICAgICBtZWRpYTogW1xuICAgICAgICB7XG4gICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgIHBvaW50OiA3NjgsXG4gICAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgICBcInRvcC1taWRkbGUtYWxpZ25lZFwiOiBcInRvcC1taWRkbGUtYWxpZ25lZFwiLFxuICAgICAgICAgICAgXCJ0b3AtcmlnaHQtYWxpZ25lZFwiOiBcInRvcC1yaWdodC1hbGlnbmVkXCIsXG4gICAgICAgICAgICBcInRvcC1sZWZ0LWFsaWduZWRcIjogXCJ0b3AtbGVmdC1hbGlnbmVkXCIsXG4gICAgICAgICAgICBcImJvdHRvbS1taWRkbGUtYWxpZ25lZFwiOiBcInRvcC1taWRkbGUtYWxpZ25lZFwiLFxuICAgICAgICAgICAgXCJib3R0b20tcmlnaHQtYWxpZ25lZFwiOiBcInRvcC1yaWdodC1hbGlnbmVkXCIsXG4gICAgICAgICAgICBcImJvdHRvbS1sZWZ0LWFsaWduZWRcIjogXCJ0b3AtbGVmdC1hbGlnbmVkXCIsXG4gICAgICAgICAgICBcInRvcFwiOiBcInRvcFwiLFxuICAgICAgICAgICAgXCJsZWZ0XCI6IFwibGVmdFwiLFxuICAgICAgICAgICAgXCJyaWdodFwiOiBcInJpZ2h0XCIsXG4gICAgICAgICAgICBcImJvdHRvbVwiOiBcInRvcFwiLFxuICAgICAgICAgICAgXCJmbG9hdGluZ1wiOiBcImZsb2F0aW5nXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYXRlIGEgbmV3IGludHJvZHVjdGlvbi9ndWlkZSBmcm9tIGFuIGVsZW1lbnQgaW4gdGhlIHBhZ2VcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2ludHJvRm9yRWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0RWxtXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gU3VjY2VzcyBvciBub3Q/XG4gICAqL1xuICBmdW5jdGlvbiBfaW50cm9Gb3JFbGVtZW50KHRhcmdldEVsbSwgZ3JvdXApIHtcblxuICAgIHZhciBib2R5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbiAgICBpZiAoYm9keUVsKSB7XG4gICAgICBib2R5RWwuY2xhc3NMaXN0LmFkZChcImRpc2FibGUtb3ZlcmZsb3cteFwiKTtcbiAgICB9XG5cbiAgICB2YXIgYWxsSW50cm9TdGVwcyA9IHRhcmdldEVsbS5xdWVyeVNlbGVjdG9yQWxsKFwiKltkYXRhLWludHJvXVwiKSxcbiAgICAgICAgaW50cm9JdGVtcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuc3RlcHMpIHtcbiAgICAgIC8vdXNlIHN0ZXBzIHBhc3NlZCBwcm9ncmFtbWF0aWNhbGx5XG4gICAgICBfZm9yRWFjaCh0aGlzLl9vcHRpb25zLnN0ZXBzLCBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICB2YXIgY3VycmVudEl0ZW0gPSBfY2xvbmVPYmplY3Qoc3RlcCk7XG5cbiAgICAgICAgLy9zZXQgdGhlIHN0ZXBcbiAgICAgICAgY3VycmVudEl0ZW0uc3RlcCA9IGludHJvSXRlbXMubGVuZ3RoICsgMTtcblxuICAgICAgICAvL3VzZSBxdWVyeVNlbGVjdG9yIGZ1bmN0aW9uIG9ubHkgd2hlbiBkZXZlbG9wZXIgdXNlZCBDU1Mgc2VsZWN0b3JcbiAgICAgICAgaWYgKHR5cGVvZiAoY3VycmVudEl0ZW0uZWxlbWVudCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy9ncmFiIHRoZSBlbGVtZW50IHdpdGggZ2l2ZW4gc2VsZWN0b3IgZnJvbSB0aGUgcGFnZVxuICAgICAgICAgIGN1cnJlbnRJdGVtLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGN1cnJlbnRJdGVtLmVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pbnRybyB3aXRob3V0IGVsZW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiAoY3VycmVudEl0ZW0uZWxlbWVudCkgPT09ICd1bmRlZmluZWQnIHx8IGN1cnJlbnRJdGVtLmVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgZmxvYXRpbmdFbGVtZW50UXVlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludHJvanNGbG9hdGluZ0VsZW1lbnRcIik7XG5cbiAgICAgICAgICBpZiAoZmxvYXRpbmdFbGVtZW50UXVlcnkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGZsb2F0aW5nRWxlbWVudFF1ZXJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBmbG9hdGluZ0VsZW1lbnRRdWVyeS5jbGFzc05hbWUgPSAnaW50cm9qc0Zsb2F0aW5nRWxlbWVudCc7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmxvYXRpbmdFbGVtZW50UXVlcnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRJdGVtLmVsZW1lbnQgID0gZmxvYXRpbmdFbGVtZW50UXVlcnk7XG4gICAgICAgICAgY3VycmVudEl0ZW0ucG9zaXRpb24gPSAnZmxvYXRpbmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEl0ZW0uc2Nyb2xsVG8gPSBjdXJyZW50SXRlbS5zY3JvbGxUbyB8fCB0aGlzLl9vcHRpb25zLnNjcm9sbFRvO1xuXG4gICAgICAgIGlmICh0eXBlb2YgKGN1cnJlbnRJdGVtLmRpc2FibGVJbnRlcmFjdGlvbikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY3VycmVudEl0ZW0uZGlzYWJsZUludGVyYWN0aW9uID0gdGhpcy5fb3B0aW9ucy5kaXNhYmxlSW50ZXJhY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudEl0ZW0uZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIGludHJvSXRlbXMucHVzaChjdXJyZW50SXRlbSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAvL3VzZSBzdGVwcyBmcm9tIGRhdGEtKiBhbm5vdGF0aW9uc1xuICAgICAgdmFyIGVsbXNMZW5ndGggPSBhbGxJbnRyb1N0ZXBzLmxlbmd0aDtcbiAgICAgIHZhciBkaXNhYmxlSW50ZXJhY3Rpb247XG4gICAgICBcbiAgICAgIC8vaWYgdGhlcmUncyBubyBlbGVtZW50IHRvIGludHJvXG4gICAgICBpZiAoZWxtc0xlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfZm9yRWFjaChhbGxJbnRyb1N0ZXBzLCBmdW5jdGlvbiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFBSICM4MFxuICAgICAgICAvLyBzdGFydCBpbnRybyBmb3IgZ3JvdXBzIG9mIGVsZW1lbnRzXG4gICAgICAgIGlmIChncm91cCAmJiAoY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnRyby1ncm91cFwiKSAhPT0gZ3JvdXApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2tpcCBoaWRkZW4gZWxlbWVudHNcbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGVwID0gcGFyc2VJbnQoY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAnKSwgMTApO1xuXG4gICAgICAgIGlmICh0eXBlb2YgKGN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1kaXNhYmxlLWludGVyYWN0aW9uJykpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGRpc2FibGVJbnRlcmFjdGlvbiA9ICEhY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc2FibGUtaW50ZXJhY3Rpb24nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXNhYmxlSW50ZXJhY3Rpb24gPSB0aGlzLl9vcHRpb25zLmRpc2FibGVJbnRlcmFjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgIGludHJvSXRlbXNbc3RlcCAtIDFdID0ge1xuICAgICAgICAgICAgZWxlbWVudDogY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICBpbnRybzogY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWludHJvJyksXG4gICAgICAgICAgICBzdGVwOiBwYXJzZUludChjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcCcpLCAxMCksXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6IGN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwY2xhc3MnKSxcbiAgICAgICAgICAgIGhpZ2hsaWdodENsYXNzOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlnaGxpZ2h0Y2xhc3MnKSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zaXRpb24nKSB8fCB0aGlzLl9vcHRpb25zLnRvb2x0aXBQb3NpdGlvbixcbiAgICAgICAgICAgIHNjcm9sbFRvOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsdG8nKSB8fCB0aGlzLl9vcHRpb25zLnNjcm9sbFRvLFxuICAgICAgICAgICAgZGlzYWJsZUludGVyYWN0aW9uOiBkaXNhYmxlSW50ZXJhY3Rpb25cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAvL25leHQgYWRkIGludHJvIGl0ZW1zIHdpdGhvdXQgZGF0YS1zdGVwXG4gICAgICAvL3RvZG86IHdlIG5lZWQgYSBjbGVhbnVwIGhlcmUsIHR3byBsb29wcyBhcmUgcmVkdW5kYW50XG4gICAgICB2YXIgbmV4dFN0ZXAgPSAwO1xuXG4gICAgICBfZm9yRWFjaChhbGxJbnRyb1N0ZXBzLCBmdW5jdGlvbiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFBSICM4MFxuICAgICAgICAvLyBzdGFydCBpbnRybyBmb3IgZ3JvdXBzIG9mIGVsZW1lbnRzXG4gICAgICAgIGlmIChncm91cCAmJiAoY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnRyby1ncm91cFwiKSAhPT0gZ3JvdXApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAnKSA9PT0gbnVsbCkge1xuXG4gICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW50cm9JdGVtc1tuZXh0U3RlcF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV4dFN0ZXArKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IFxuXG4gICAgICAgICAgaWYgKHR5cGVvZiAoY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWRpc2FibGUtaW50ZXJhY3Rpb24nKSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkaXNhYmxlSW50ZXJhY3Rpb24gPSAhIWN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1kaXNhYmxlLWludGVyYWN0aW9uJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc2FibGVJbnRlcmFjdGlvbiA9IHRoaXMuX29wdGlvbnMuZGlzYWJsZUludGVyYWN0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGludHJvSXRlbXNbbmV4dFN0ZXBdID0ge1xuICAgICAgICAgICAgZWxlbWVudDogY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICBpbnRybzogY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWludHJvJyksXG4gICAgICAgICAgICBzdGVwOiBuZXh0U3RlcCArIDEsXG4gICAgICAgICAgICB0b29sdGlwQ2xhc3M6IGN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10b29sdGlwY2xhc3MnKSxcbiAgICAgICAgICAgIGhpZ2hsaWdodENsYXNzOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlnaGxpZ2h0Y2xhc3MnKSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zaXRpb24nKSB8fCB0aGlzLl9vcHRpb25zLnRvb2x0aXBQb3NpdGlvbixcbiAgICAgICAgICAgIHNjcm9sbFRvOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsdG8nKSB8fCB0aGlzLl9vcHRpb25zLnNjcm9sbFRvLFxuICAgICAgICAgICAgZGlzYWJsZUludGVyYWN0aW9uOiBkaXNhYmxlSW50ZXJhY3Rpb25cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8vcmVtb3ZpbmcgdW5kZWZpbmVkL251bGwgZWxlbWVudHNcbiAgICB2YXIgdGVtcEludHJvSXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciB6ID0gMDsgeiA8IGludHJvSXRlbXMubGVuZ3RoOyB6KyspIHtcbiAgICAgIGlmIChpbnRyb0l0ZW1zW3pdKSB7XG4gICAgICAgIC8vIGNvcHkgbm9uLWZhbHN5IHZhbHVlcyB0byB0aGUgZW5kIG9mIHRoZSBhcnJheVxuICAgICAgICB0ZW1wSW50cm9JdGVtcy5wdXNoKGludHJvSXRlbXNbel0pOyAgXG4gICAgICB9IFxuICAgIH1cblxuICAgIGludHJvSXRlbXMgPSB0ZW1wSW50cm9JdGVtcztcblxuICAgIC8vT2ssIHNvcnQgYWxsIGl0ZW1zIHdpdGggZ2l2ZW4gc3RlcHNcbiAgICBpbnRyb0l0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnN0ZXAgLSBiLnN0ZXA7XG4gICAgfSk7XG5cbiAgICAvL3NldCBpdCB0byB0aGUgaW50cm9KcyBvYmplY3RcbiAgICB0aGlzLl9pbnRyb0l0ZW1zID0gaW50cm9JdGVtcztcblxuICAgIC8vYWRkIG92ZXJsYXkgbGF5ZXIgdG8gdGhlIHBhZ2VcbiAgICBpZihfYWRkT3ZlcmxheUxheWVyLmNhbGwodGhpcywgdGFyZ2V0RWxtKSkge1xuICAgICAgLy90aGVuLCBzdGFydCB0aGUgc2hvd1xuICAgICAgX25leHRTdGVwLmNhbGwodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICBET01FdmVudC5vbih3aW5kb3csICdrZXlkb3duJywgX29uS2V5RG93biwgdGhpcywgdHJ1ZSk7XG4gICAgICB9XG4gICAgICAvL2ZvciB3aW5kb3cgcmVzaXplXG4gICAgICBET01FdmVudC5vbih3aW5kb3csICdyZXNpemUnLCBfb25SZXNpemUsIHRoaXMsIHRydWUpO1xuICAgICAgRE9NRXZlbnQub24od2luZG93LCAnb3JpZW50YXRpb25jaGFuZ2UnLCBfb25SZXNpemUsIHRoaXMsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBfb25SZXNpemUgKCkge1xuICAgIHRoaXMucmVmcmVzaC5jYWxsKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICogb24ga2V5Q29kZTpcbiAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlXG4gICogVGhpcyBmZWF0dXJlIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgV2ViIHN0YW5kYXJkcy5cbiAgKiBUaG91Z2ggc29tZSBicm93c2VycyBtYXkgc3RpbGwgc3VwcG9ydCBpdCwgaXQgaXMgaW5cbiAgKiB0aGUgcHJvY2VzcyBvZiBiZWluZyBkcm9wcGVkLlxuICAqIEluc3RlYWQsIHlvdSBzaG91bGQgdXNlIEtleWJvYXJkRXZlbnQuY29kZSxcbiAgKiBpZiBpdCdzIGltcGxlbWVudGVkLlxuICAqXG4gICogalF1ZXJ5J3MgYXBwcm9hY2ggaXMgdG8gdGVzdCBmb3JcbiAgKiAgICgxKSBlLndoaWNoLCB0aGVuXG4gICogICAoMikgZS5jaGFyQ29kZSwgdGhlblxuICAqICAgKDMpIGUua2V5Q29kZVxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvYTZiMDcwNTI5NGQzMzZhZTJmNjNmNzI3NmRlMGRhMTE5NTQ5NTM2My9zcmMvZXZlbnQuanMjTDYzOFxuICAqXG4gICogQHBhcmFtIHR5cGUgdmFyXG4gICogQHJldHVybiB0eXBlXG4gICovXG4gIGZ1bmN0aW9uIF9vbktleURvd24gKGUpIHtcbiAgICB2YXIgY29kZSA9IChlLmNvZGUgPT09IG51bGwpID8gZS53aGljaCA6IGUuY29kZTtcblxuICAgIC8vIGlmIGNvZGUvZS53aGljaCBpcyBudWxsXG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGNvZGUgPSAoZS5jaGFyQ29kZSA9PT0gbnVsbCkgPyBlLmtleUNvZGUgOiBlLmNoYXJDb2RlO1xuICAgIH1cbiAgICBcbiAgICBpZiAoKGNvZGUgPT09ICdFc2NhcGUnIHx8IGNvZGUgPT09IDI3KSAmJiB0aGlzLl9vcHRpb25zLmV4aXRPbkVzYyA9PT0gdHJ1ZSkge1xuICAgICAgLy9lc2NhcGUga2V5IHByZXNzZWQsIGV4aXQgdGhlIGludHJvXG4gICAgICAvL2NoZWNrIGlmIGV4aXQgY2FsbGJhY2sgaXMgZGVmaW5lZFxuICAgICAgX2V4aXRJbnRyby5jYWxsKHRoaXMsIHRoaXMuX3RhcmdldEVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gJ0Fycm93TGVmdCcgfHwgY29kZSA9PT0gMzcpIHtcbiAgICAgIC8vbGVmdCBhcnJvd1xuICAgICAgX3ByZXZpb3VzU3RlcC5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gJ0Fycm93UmlnaHQnIHx8IGNvZGUgPT09IDM5KSB7XG4gICAgICAvL3JpZ2h0IGFycm93XG4gICAgICBfbmV4dFN0ZXAuY2FsbCh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09ICdFbnRlcicgfHwgY29kZSA9PT0gMTMpIHtcbiAgICAgIC8vc3JjRWxlbWVudCA9PT0gaWVcbiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5jbGFzc05hbWUubWF0Y2goJ2ludHJvanMtcHJldmJ1dHRvbicpKSB7XG4gICAgICAgIC8vdXNlciBoaXQgZW50ZXIgd2hpbGUgZm9jdXNpbmcgb24gcHJldmlvdXMgYnV0dG9uXG4gICAgICAgIF9wcmV2aW91c1N0ZXAuY2FsbCh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHRhcmdldC5jbGFzc05hbWUubWF0Y2goJ2ludHJvanMtc2tpcGJ1dHRvbicpKSB7XG4gICAgICAgIC8vdXNlciBoaXQgZW50ZXIgd2hpbGUgZm9jdXNpbmcgb24gc2tpcCBidXR0b25cbiAgICAgICAgaWYgKHRoaXMuX2ludHJvSXRlbXMubGVuZ3RoIC0gMSA9PT0gdGhpcy5fY3VycmVudFN0ZXAgJiYgdHlwZW9mICh0aGlzLl9pbnRyb0NvbXBsZXRlQ2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRyb0NvbXBsZXRlQ2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9leGl0SW50cm8uY2FsbCh0aGlzLCB0aGlzLl90YXJnZXRFbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcG51bWJlcicpKSB7XG4gICAgICAgIC8vIHVzZXIgaGl0IGVudGVyIHdoaWxlIGZvY3VzaW5nIG9uIHN0ZXAgYnVsbGV0XG4gICAgICAgIHRhcmdldC5jbGljaygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9kZWZhdWx0IGJlaGF2aW9yIGZvciByZXNwb25kaW5nIHRvIGVudGVyXG4gICAgICAgIF9uZXh0U3RlcC5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAvL3ByZXZlbnQgZGVmYXVsdCBiZWhhdmlvdXIgb24gaGl0dGluZyBFbnRlciwgdG8gcHJldmVudCBzdGVwcyBiZWluZyBza2lwcGVkIGluIHNvbWUgYnJvd3NlcnNcbiAgICAgIGlmKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gLypcbiAgICogbWFrZXMgYSBjb3B5IG9mIHRoZSBvYmplY3RcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2Nsb25lT2JqZWN0XG4gICovXG4gIGZ1bmN0aW9uIF9jbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT09IG51bGwgfHwgdHlwZW9mIChvYmplY3QpICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgKG9iamVjdC5ub2RlVHlwZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgdGVtcCA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mKHdpbmRvdy5qUXVlcnkpICE9PSAndW5kZWZpbmVkJyAmJiBvYmplY3Rba2V5XSBpbnN0YW5jZW9mIHdpbmRvdy5qUXVlcnkpIHtcbiAgICAgICAgICB0ZW1wW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZW1wW2tleV0gPSBfY2xvbmVPYmplY3Qob2JqZWN0W2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVtcDtcbiAgfVxuICAvKipcbiAgICogR28gdG8gc3BlY2lmaWMgc3RlcCBvZiBpbnRyb2R1Y3Rpb25cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2dvVG9TdGVwXG4gICAqL1xuICBmdW5jdGlvbiBfZ29Ub1N0ZXAoc3RlcCkge1xuICAgIC8vYmVjYXVzZSBzdGVwcyBzdGFydHMgd2l0aCB6ZXJvXG4gICAgdGhpcy5fY3VycmVudFN0ZXAgPSBzdGVwIC0gMjtcbiAgICBpZiAodHlwZW9mICh0aGlzLl9pbnRyb0l0ZW1zKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF9uZXh0U3RlcC5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHbyB0byB0aGUgc3BlY2lmaWMgc3RlcCBvZiBpbnRyb2R1Y3Rpb24gd2l0aCB0aGUgZXhwbGljaXQgW2RhdGEtc3RlcF0gbnVtYmVyXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9nb1RvU3RlcE51bWJlclxuICAgKi9cbiAgZnVuY3Rpb24gX2dvVG9TdGVwTnVtYmVyKHN0ZXApIHtcbiAgICB0aGlzLl9jdXJyZW50U3RlcE51bWJlciA9IHN0ZXA7XG4gICAgaWYgKHR5cGVvZiAodGhpcy5faW50cm9JdGVtcykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfbmV4dFN0ZXAuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR28gdG8gbmV4dCBzdGVwIG9uIGludHJvXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9uZXh0U3RlcFxuICAgKi9cbiAgZnVuY3Rpb24gX25leHRTdGVwKCkge1xuICAgIHRoaXMuX2RpcmVjdGlvbiA9ICdmb3J3YXJkJztcblxuICAgIGlmICh0eXBlb2YgKHRoaXMuX2N1cnJlbnRTdGVwTnVtYmVyKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIF9mb3JFYWNoKHRoaXMuX2ludHJvSXRlbXMsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgIGlmKCBpdGVtLnN0ZXAgPT09IHRoaXMuX2N1cnJlbnRTdGVwTnVtYmVyICkge1xuICAgICAgICAgIHRoaXMuX2N1cnJlbnRTdGVwID0gaSAtIDE7XG4gICAgICAgICAgdGhpcy5fY3VycmVudFN0ZXBOdW1iZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiAodGhpcy5fY3VycmVudFN0ZXApID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5fY3VycmVudFN0ZXAgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3RoaXMuX2N1cnJlbnRTdGVwO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RlcCA9IHRoaXMuX2ludHJvSXRlbXNbdGhpcy5fY3VycmVudFN0ZXBdO1xuICAgIHZhciBjb250aW51ZVN0ZXAgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiAodGhpcy5faW50cm9CZWZvcmVDaGFuZ2VDYWxsYmFjaykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb250aW51ZVN0ZXAgPSB0aGlzLl9pbnRyb0JlZm9yZUNoYW5nZUNhbGxiYWNrLmNhbGwodGhpcywgbmV4dFN0ZXAuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gaWYgYG9uYmVmb3JlY2hhbmdlYCByZXR1cm5lZCBgZmFsc2VgLCBzdG9wIGRpc3BsYXlpbmcgdGhlIGVsZW1lbnRcbiAgICBpZiAoY29udGludWVTdGVwID09PSBmYWxzZSkge1xuICAgICAgLS10aGlzLl9jdXJyZW50U3RlcDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMuX2ludHJvSXRlbXMubGVuZ3RoKSA8PSB0aGlzLl9jdXJyZW50U3RlcCkge1xuICAgICAgLy9lbmQgb2YgdGhlIGludHJvXG4gICAgICAvL2NoZWNrIGlmIGFueSBjYWxsYmFjayBpcyBkZWZpbmVkXG4gICAgICBpZiAodHlwZW9mICh0aGlzLl9pbnRyb0NvbXBsZXRlQ2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX2ludHJvQ29tcGxldGVDYWxsYmFjay5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgX2V4aXRJbnRyby5jYWxsKHRoaXMsIHRoaXMuX3RhcmdldEVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zaG93RWxlbWVudC5jYWxsKHRoaXMsIG5leHRTdGVwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHbyB0byBwcmV2aW91cyBzdGVwIG9uIGludHJvXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9wcmV2aW91c1N0ZXBcbiAgICovXG4gIGZ1bmN0aW9uIF9wcmV2aW91c1N0ZXAoKSB7XG4gICAgdGhpcy5fZGlyZWN0aW9uID0gJ2JhY2t3YXJkJztcblxuICAgIGlmICh0aGlzLl9jdXJyZW50U3RlcCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC0tdGhpcy5fY3VycmVudFN0ZXA7XG5cbiAgICB2YXIgbmV4dFN0ZXAgPSB0aGlzLl9pbnRyb0l0ZW1zW3RoaXMuX2N1cnJlbnRTdGVwXTtcbiAgICB2YXIgY29udGludWVTdGVwID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgKHRoaXMuX2ludHJvQmVmb3JlQ2hhbmdlQ2FsbGJhY2spICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udGludWVTdGVwID0gdGhpcy5faW50cm9CZWZvcmVDaGFuZ2VDYWxsYmFjay5jYWxsKHRoaXMsIG5leHRTdGVwLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIGlmIGBvbmJlZm9yZWNoYW5nZWAgcmV0dXJuZWQgYGZhbHNlYCwgc3RvcCBkaXNwbGF5aW5nIHRoZSBlbGVtZW50XG4gICAgaWYgKGNvbnRpbnVlU3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICsrdGhpcy5fY3VycmVudFN0ZXA7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX3Nob3dFbGVtZW50LmNhbGwodGhpcywgbmV4dFN0ZXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBwbGFjZW1lbnQgb2YgdGhlIGludHJvIG9iamVjdHMgb24gdGhlIHNjcmVlblxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIF9yZWZyZXNoKCkge1xuICAgIC8vIHJlLWFsaWduIGludHJvc1xuICAgIF9zZXRIZWxwZXJMYXllclBvc2l0aW9uLmNhbGwodGhpcywgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtaGVscGVyTGF5ZXInKSk7XG4gICAgX3NldEhlbHBlckxheWVyUG9zaXRpb24uY2FsbCh0aGlzLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy10b29sdGlwUmVmZXJlbmNlTGF5ZXInKSk7XG4gICAgX3NldEhlbHBlckxheWVyUG9zaXRpb24uY2FsbCh0aGlzLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1kaXNhYmxlSW50ZXJhY3Rpb24nKSk7XG5cbiAgICAvLyByZS1hbGlnbiB0b29sdGlwXG4gICAgaWYodGhpcy5fY3VycmVudFN0ZXAgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jdXJyZW50U3RlcCAhPT0gbnVsbCkge1xuICAgICAgdmFyIG9sZEhlbHBlck51bWJlckxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtaGVscGVyTnVtYmVyTGF5ZXInKSxcbiAgICAgICAgb2xkQXJyb3dMYXllciAgICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1hcnJvdycpLFxuICAgICAgICBvbGR0b29sdGlwQ29udGFpbmVyICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLXRvb2x0aXAnKTtcbiAgICAgIF9wbGFjZVRvb2x0aXAuY2FsbCh0aGlzLCB0aGlzLl9pbnRyb0l0ZW1zW3RoaXMuX2N1cnJlbnRTdGVwXS5lbGVtZW50LCBvbGR0b29sdGlwQ29udGFpbmVyLCBvbGRBcnJvd0xheWVyLCBvbGRIZWxwZXJOdW1iZXJMYXllcik7XG4gICAgfVxuXG4gICAgLy9yZS1hbGlnbiBoaW50c1xuICAgIF9yZUFsaWduSGludHMuY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGl0IGZyb20gaW50cm9cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2V4aXRJbnRyb1xuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0RWxlbWVudFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZvcmNlIC0gU2V0dGluZyB0byBgdHJ1ZWAgd2lsbCBza2lwIHRoZSByZXN1bHQgb2YgYmVmb3JlRXhpdCBjYWxsYmFja1xuICAgKi9cbiAgZnVuY3Rpb24gX2V4aXRJbnRybyh0YXJnZXRFbGVtZW50LCBmb3JjZSkge1xuICAgIHZhciBjb250aW51ZUV4aXQgPSB0cnVlO1xuXG4gICAgLy8gY2FsbGluZyBvbmJlZm9yZWV4aXQgY2FsbGJhY2tcbiAgICAvL1xuICAgIC8vIElmIHRoaXMgY2FsbGJhY2sgcmV0dXJuIGBmYWxzZWAsIGl0IHdvdWxkIGhhbHQgdGhlIHByb2Nlc3NcbiAgICBpZiAodGhpcy5faW50cm9CZWZvcmVFeGl0Q2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWVFeGl0ID0gdGhpcy5faW50cm9CZWZvcmVFeGl0Q2FsbGJhY2suY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBza2lwIHRoaXMgY2hlY2sgaWYgYGZvcmNlYCBwYXJhbWV0ZXIgaXMgYHRydWVgXG4gICAgLy8gb3RoZXJ3aXNlLCBpZiBgb25iZWZvcmVleGl0YCByZXR1cm5lZCBgZmFsc2VgLCBkb24ndCBleGl0IHRoZSBpbnRyb1xuICAgIGlmICghZm9yY2UgJiYgY29udGludWVFeGl0ID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgLy9yZW1vdmUgb3ZlcmxheSBsYXllcnMgZnJvbSB0aGUgcGFnZVxuICAgIHZhciBvdmVybGF5TGF5ZXJzID0gdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW50cm9qcy1vdmVybGF5Jyk7XG5cbiAgICBpZiAob3ZlcmxheUxheWVycyAmJiBvdmVybGF5TGF5ZXJzLmxlbmd0aCkge1xuICAgICAgX2ZvckVhY2gob3ZlcmxheUxheWVycywgZnVuY3Rpb24gKG92ZXJsYXlMYXllcikge1xuICAgICAgICBvdmVybGF5TGF5ZXIuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LmJpbmQob3ZlcmxheUxheWVyKSwgNTAwKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLy9yZW1vdmUgYWxsIGhlbHBlciBsYXllcnNcbiAgICB2YXIgaGVscGVyTGF5ZXIgPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLWhlbHBlckxheWVyJyk7XG4gICAgaWYgKGhlbHBlckxheWVyKSB7XG4gICAgICBoZWxwZXJMYXllci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGhlbHBlckxheWVyKTtcbiAgICB9XG5cbiAgICB2YXIgcmVmZXJlbmNlTGF5ZXIgPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLXRvb2x0aXBSZWZlcmVuY2VMYXllcicpO1xuICAgIGlmIChyZWZlcmVuY2VMYXllcikge1xuICAgICAgcmVmZXJlbmNlTGF5ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZWZlcmVuY2VMYXllcik7XG4gICAgfVxuXG4gICAgLy9yZW1vdmUgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXJcbiAgICB2YXIgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIgPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLWRpc2FibGVJbnRlcmFjdGlvbicpO1xuICAgIGlmIChkaXNhYmxlSW50ZXJhY3Rpb25MYXllcikge1xuICAgICAgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXNhYmxlSW50ZXJhY3Rpb25MYXllcik7XG4gICAgfVxuXG4gICAgLy9yZW1vdmUgaW50cm8gZmxvYXRpbmcgZWxlbWVudFxuICAgIHZhciBmbG9hdGluZ0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qc0Zsb2F0aW5nRWxlbWVudCcpO1xuICAgIGlmIChmbG9hdGluZ0VsZW1lbnQpIHtcbiAgICAgIGZsb2F0aW5nRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGZsb2F0aW5nRWxlbWVudCk7XG4gICAgfVxuXG4gICAgX3JlbW92ZVNob3dFbGVtZW50KCk7XG5cbiAgICAvL3JlbW92ZSBgaW50cm9qcy1maXhQYXJlbnRgIGNsYXNzIGZyb20gdGhlIGVsZW1lbnRzXG4gICAgdmFyIGZpeFBhcmVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW50cm9qcy1maXhQYXJlbnQnKTtcbiAgICBfZm9yRWFjaChmaXhQYXJlbnRzLCBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICBfcmVtb3ZlQ2xhc3MocGFyZW50LCAvaW50cm9qcy1maXhQYXJlbnQvZyk7XG4gICAgfSk7XG5cbiAgICAvL2NsZWFuIGxpc3RlbmVyc1xuICAgIERPTUV2ZW50Lm9mZih3aW5kb3csICdrZXlkb3duJywgX29uS2V5RG93biwgdGhpcywgdHJ1ZSk7XG4gICAgRE9NRXZlbnQub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIF9vblJlc2l6ZSwgdGhpcywgdHJ1ZSk7XG5cbiAgICAvL2NoZWNrIGlmIGFueSBjYWxsYmFjayBpcyBkZWZpbmVkXG4gICAgaWYgKHRoaXMuX2ludHJvRXhpdENhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2ludHJvRXhpdENhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLy9zZXQgdGhlIHN0ZXAgdG8gemVyb1xuICAgIHRoaXMuX2N1cnJlbnRTdGVwID0gdW5kZWZpbmVkO1xuXG4gICAgdmFyIGJvZHlFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICAgIGlmIChib2R5RWwpIHtcbiAgICAgIGJvZHlFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZS1vdmVyZmxvdy14XCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdG9vbHRpcCBib3ggaW4gdGhlIHBhZ2VcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX3BsYWNlVG9vbHRpcFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRvb2x0aXBMYXllclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBhcnJvd0xheWVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGhlbHBlck51bWJlckxheWVyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaGludE1vZGVcbiAgICovXG4gIGZ1bmN0aW9uIF9wbGFjZVRvb2x0aXAodGFyZ2V0RWxlbWVudCwgdG9vbHRpcExheWVyLCBhcnJvd0xheWVyLCBoZWxwZXJOdW1iZXJMYXllciwgaGludE1vZGUpIHtcbiAgICB2YXIgdG9vbHRpcENzc0NsYXNzID0gJycsXG4gICAgICAgIGN1cnJlbnRTdGVwT2JqLFxuICAgICAgICB0b29sdGlwT2Zmc2V0LFxuICAgICAgICB0YXJnZXRPZmZzZXQsXG4gICAgICAgIHdpbmRvd1NpemUsXG4gICAgICAgIGN1cnJlbnRUb29sdGlwUG9zaXRpb247XG5cbiAgICBoaW50TW9kZSA9IGhpbnRNb2RlIHx8IGZhbHNlO1xuXG4gICAgLy9yZXNldCB0aGUgb2xkIHN0eWxlXG4gICAgdG9vbHRpcExheWVyLnN0eWxlLnRvcCAgICAgICAgPSBudWxsO1xuICAgIHRvb2x0aXBMYXllci5zdHlsZS5yaWdodCAgICAgID0gbnVsbDtcbiAgICB0b29sdGlwTGF5ZXIuc3R5bGUuYm90dG9tICAgICA9IG51bGw7XG4gICAgdG9vbHRpcExheWVyLnN0eWxlLmxlZnQgICAgICAgPSBudWxsO1xuICAgIHRvb2x0aXBMYXllci5zdHlsZS5tYXJnaW5MZWZ0ID0gbnVsbDtcbiAgICB0b29sdGlwTGF5ZXIuc3R5bGUubWFyZ2luVG9wICA9IG51bGw7XG5cbiAgICBhcnJvd0xheWVyLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG5cbiAgICBpZiAodHlwZW9mKGhlbHBlck51bWJlckxheWVyKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaGVscGVyTnVtYmVyTGF5ZXIgIT09IG51bGwpIHtcbiAgICAgIGhlbHBlck51bWJlckxheWVyLnN0eWxlLnRvcCAgPSBudWxsO1xuICAgICAgaGVscGVyTnVtYmVyTGF5ZXIuc3R5bGUubGVmdCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy9wcmV2ZW50IGVycm9yIHdoZW4gYHRoaXMuX2N1cnJlbnRTdGVwYCBpcyB1bmRlZmluZWRcbiAgICBpZiAoIXRoaXMuX2ludHJvSXRlbXNbdGhpcy5fY3VycmVudFN0ZXBdKSByZXR1cm47XG5cbiAgICAvL2lmIHdlIGhhdmUgYSBjdXN0b20gY3NzIGNsYXNzIGZvciBlYWNoIHN0ZXBcbiAgICBjdXJyZW50U3RlcE9iaiA9IHRoaXMuX2ludHJvSXRlbXNbdGhpcy5fY3VycmVudFN0ZXBdO1xuICAgIGlmICh0eXBlb2YgKGN1cnJlbnRTdGVwT2JqLnRvb2x0aXBDbGFzcykgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0b29sdGlwQ3NzQ2xhc3MgPSBjdXJyZW50U3RlcE9iai50b29sdGlwQ2xhc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvb2x0aXBDc3NDbGFzcyA9IHRoaXMuX29wdGlvbnMudG9vbHRpcENsYXNzO1xuICAgIH1cblxuICAgIHRvb2x0aXBMYXllci5jbGFzc05hbWUgPSAoJ2ludHJvanMtdG9vbHRpcCAnICsgdG9vbHRpcENzc0NsYXNzKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gICAgdG9vbHRpcExheWVyLnNldEF0dHJpYnV0ZSgncm9sZScsICdkaWFsb2cnKTtcblxuICAgIGN1cnJlbnRUb29sdGlwUG9zaXRpb24gPSB0aGlzLl9pbnRyb0l0ZW1zW3RoaXMuX2N1cnJlbnRTdGVwXS5wb3NpdGlvbjtcblxuICAgIC8vIEZsb2F0aW5nIGlzIGFsd2F5cyB2YWxpZCwgbm8gcG9pbnQgaW4gY2FsY3VsYXRpbmdcbiAgICBpZiAoY3VycmVudFRvb2x0aXBQb3NpdGlvbiAhPT0gXCJmbG9hdGluZ1wiKSB7IFxuICAgICAgY3VycmVudFRvb2x0aXBQb3NpdGlvbiA9IF9kZXRlcm1pbmVBdXRvUG9zaXRpb24uY2FsbCh0aGlzLCB0YXJnZXRFbGVtZW50LCB0b29sdGlwTGF5ZXIsIGN1cnJlbnRUb29sdGlwUG9zaXRpb24pO1xuICAgIH1cblxuICAgIC8qIFxuICAgIGNoYW5nZSBwb3NpdGlvbidzIGJlaGF2aW9yIG9uIG1lZGlhIGlmIG5lZWRcbiAgICBtb2JpbGUgZmlyc3Qgb3JpZW50ZWRcbiAgICAqL1xuXG4gICAgdmFyIGFic0NsaWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIHZhciBtZWRpYSA9IHRoaXMuX29wdGlvbnMubWVkaWFcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIChpKSB7cmV0dXJuIGkuYWN0aXZlICYmIGFic0NsaWVudFdpZHRoIDw9IGkucG9pbnR9KVxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnBvaW50IC0gYS5wb2ludCB9KTtcbiAgICBcbiAgICBpZiAobWVkaWEubGVuZ3RoID4gMCkge1xuICAgICAgbWVkaWEgPSBtZWRpYVttZWRpYS5sZW5ndGggLSAxXVxuICAgICAgY3VycmVudFRvb2x0aXBQb3NpdGlvbiA9IG1lZGlhLnBvc2l0aW9uc1tjdXJyZW50VG9vbHRpcFBvc2l0aW9uXTtcbiAgICB9XG5cbiAgICB2YXIgdG9vbHRpcExheWVyU3R5bGVMZWZ0O1xuICAgIHRhcmdldE9mZnNldCAgPSBfZ2V0T2Zmc2V0KHRhcmdldEVsZW1lbnQpO1xuICAgIHRvb2x0aXBPZmZzZXQgPSBfZ2V0T2Zmc2V0KHRvb2x0aXBMYXllcik7XG4gICAgd2luZG93U2l6ZSAgICA9IF9nZXRXaW5TaXplKCk7XG5cbiAgICBfYWRkQ2xhc3ModG9vbHRpcExheWVyLCAnaW50cm9qcy0nICsgY3VycmVudFRvb2x0aXBQb3NpdGlvbik7XG5cbiAgICBzd2l0Y2ggKGN1cnJlbnRUb29sdGlwUG9zaXRpb24pIHtcbiAgICAgIGNhc2UgJ3RvcC1yaWdodC1hbGlnbmVkJzpcbiAgICAgICAgYXJyb3dMYXllci5jbGFzc05hbWUgICAgICA9ICdpbnRyb2pzLWFycm93IGJvdHRvbS1yaWdodCc7XG5cbiAgICAgICAgdmFyIHRvb2x0aXBMYXllclN0eWxlUmlnaHQgPSAwO1xuICAgICAgICBfY2hlY2tMZWZ0KHRhcmdldE9mZnNldCwgdG9vbHRpcExheWVyU3R5bGVSaWdodCwgdG9vbHRpcE9mZnNldCwgdG9vbHRpcExheWVyKTtcbiAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLmJvdHRvbSAgICA9ICh0YXJnZXRPZmZzZXQuaGVpZ2h0ICsgIDIwKSArICdweCc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0b3AtbWlkZGxlLWFsaWduZWQnOlxuICAgICAgICBhcnJvd0xheWVyLmNsYXNzTmFtZSAgICAgID0gJ2ludHJvanMtYXJyb3cgYm90dG9tLW1pZGRsZSc7XG5cbiAgICAgICAgdmFyIHRvb2x0aXBMYXllclN0eWxlTGVmdFJpZ2h0ID0gdGFyZ2V0T2Zmc2V0LndpZHRoIC8gMiAtIHRvb2x0aXBPZmZzZXQud2lkdGggLyAyO1xuXG4gICAgICAgIC8vIGEgZml4IGZvciBtaWRkbGUgYWxpZ25lZCBoaW50c1xuICAgICAgICBpZiAoaGludE1vZGUpIHtcbiAgICAgICAgICB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCArPSA1O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jaGVja0xlZnQodGFyZ2V0T2Zmc2V0LCB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCwgdG9vbHRpcE9mZnNldCwgdG9vbHRpcExheWVyKSkge1xuICAgICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS5yaWdodCA9IG51bGw7XG4gICAgICAgICAgX2NoZWNrUmlnaHQodGFyZ2V0T2Zmc2V0LCB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCwgdG9vbHRpcE9mZnNldCwgd2luZG93U2l6ZSwgdG9vbHRpcExheWVyKTtcbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwTGF5ZXIuc3R5bGUuYm90dG9tID0gKHRhcmdldE9mZnNldC5oZWlnaHQgKyAyMCkgKyAncHgnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndG9wLWxlZnQtYWxpZ25lZCc6XG4gICAgICAvLyB0b3AtbGVmdC1hbGlnbmVkIGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IHRvcFxuICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgYXJyb3dMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy1hcnJvdyBib3R0b20nO1xuXG4gICAgICAgIHRvb2x0aXBMYXllclN0eWxlTGVmdCA9IChoaW50TW9kZSkgPyAwIDogMTU7XG5cbiAgICAgICAgX2NoZWNrUmlnaHQodGFyZ2V0T2Zmc2V0LCB0b29sdGlwTGF5ZXJTdHlsZUxlZnQsIHRvb2x0aXBPZmZzZXQsIHdpbmRvd1NpemUsIHRvb2x0aXBMYXllcik7XG4gICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS5ib3R0b20gPSAodGFyZ2V0T2Zmc2V0LmhlaWdodCArICAyMCkgKyAncHgnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLmxlZnQgPSAodGFyZ2V0T2Zmc2V0LndpZHRoICsgMjApICsgJ3B4JztcbiAgICAgICAgaWYgKHRhcmdldE9mZnNldC50b3AgKyB0b29sdGlwT2Zmc2V0LmhlaWdodCA+IHdpbmRvd1NpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCByaWdodCB3b3VsZCBoYXZlIGZhbGxlbiBiZWxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4uXG4gICAgICAgICAgLy8gTW9kaWZ5IHNvIHRoYXQgdGhlIGJvdHRvbSBvZiB0aGUgdG9vbHRpcCBjb25uZWN0cyB3aXRoIHRoZSB0YXJnZXRcbiAgICAgICAgICBhcnJvd0xheWVyLmNsYXNzTmFtZSA9IFwiaW50cm9qcy1hcnJvdyBsZWZ0LWJvdHRvbVwiO1xuICAgICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS50b3AgPSBcIi1cIiArICh0b29sdGlwT2Zmc2V0LmhlaWdodCAtIHRhcmdldE9mZnNldC5oZWlnaHQgLSAyMCkgKyBcInB4XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyb3dMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy1hcnJvdyBsZWZ0JztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICBpZiAoIWhpbnRNb2RlICYmIHRoaXMuX29wdGlvbnMuc2hvd1N0ZXBOdW1iZXJzID09PSB0cnVlKSB7XG4gICAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLnRvcCA9ICcxNXB4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRPZmZzZXQudG9wICsgdG9vbHRpcE9mZnNldC5oZWlnaHQgPiB3aW5kb3dTaXplLmhlaWdodCkge1xuICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgbGVmdCB3b3VsZCBoYXZlIGZhbGxlbiBiZWxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4uXG4gICAgICAgICAgLy8gTW9kaWZ5IHNvIHRoYXQgdGhlIGJvdHRvbSBvZiB0aGUgdG9vbHRpcCBjb25uZWN0cyB3aXRoIHRoZSB0YXJnZXRcbiAgICAgICAgICB0b29sdGlwTGF5ZXIuc3R5bGUudG9wID0gXCItXCIgKyAodG9vbHRpcE9mZnNldC5oZWlnaHQgLSB0YXJnZXRPZmZzZXQuaGVpZ2h0IC0gMjApICsgXCJweFwiO1xuICAgICAgICAgIGFycm93TGF5ZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtYXJyb3cgcmlnaHQtYm90dG9tJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnJvd0xheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLWFycm93IHJpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwTGF5ZXIuc3R5bGUucmlnaHQgPSAodGFyZ2V0T2Zmc2V0LndpZHRoICsgMjApICsgJ3B4JztcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Zsb2F0aW5nJzpcbiAgICAgICAgYXJyb3dMYXllci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIC8vd2UgaGF2ZSB0byBhZGp1c3QgdGhlIHRvcCBhbmQgbGVmdCBvZiBsYXllciBtYW51YWxseSBmb3IgaW50cm8gaXRlbXMgd2l0aG91dCBlbGVtZW50XG4gICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS5sZWZ0ICAgPSAnNTAlJztcbiAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLnRvcCAgICA9ICc1MCUnO1xuICAgICAgICB0b29sdGlwTGF5ZXIuc3R5bGUubWFyZ2luTGVmdCA9ICctJyArICh0b29sdGlwT2Zmc2V0LndpZHRoIC8gMikgICsgJ3B4JztcbiAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLm1hcmdpblRvcCAgPSAnLScgKyAodG9vbHRpcE9mZnNldC5oZWlnaHQgLyAyKSArICdweCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZihoZWxwZXJOdW1iZXJMYXllcikgIT09ICd1bmRlZmluZWQnICYmIGhlbHBlck51bWJlckxheWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgaGVscGVyTnVtYmVyTGF5ZXIuc3R5bGUubGVmdCA9ICctJyArICgodG9vbHRpcE9mZnNldC53aWR0aCAvIDIpICsgMTgpICsgJ3B4JztcbiAgICAgICAgICBoZWxwZXJOdW1iZXJMYXllci5zdHlsZS50b3AgID0gJy0nICsgKCh0b29sdGlwT2Zmc2V0LmhlaWdodCAvIDIpICsgMTgpICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0LWFsaWduZWQnOlxuICAgICAgICBhcnJvd0xheWVyLmNsYXNzTmFtZSAgICAgID0gJ2ludHJvanMtYXJyb3cgdG9wLXJpZ2h0JztcblxuICAgICAgICB0b29sdGlwTGF5ZXJTdHlsZVJpZ2h0ID0gMDtcbiAgICAgICAgX2NoZWNrTGVmdCh0YXJnZXRPZmZzZXQsIHRvb2x0aXBMYXllclN0eWxlUmlnaHQsIHRvb2x0aXBPZmZzZXQsIHRvb2x0aXBMYXllcik7XG4gICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS50b3AgICAgPSAodGFyZ2V0T2Zmc2V0LmhlaWdodCArICAyMCkgKyAncHgnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnYm90dG9tLW1pZGRsZS1hbGlnbmVkJzpcbiAgICAgICAgYXJyb3dMYXllci5jbGFzc05hbWUgICAgICA9ICdpbnRyb2pzLWFycm93IHRvcC1taWRkbGUnO1xuXG4gICAgICAgIHRvb2x0aXBMYXllclN0eWxlTGVmdFJpZ2h0ID0gdGFyZ2V0T2Zmc2V0LndpZHRoIC8gMiAtIHRvb2x0aXBPZmZzZXQud2lkdGggLyAyO1xuXG4gICAgICAgIC8vIGEgZml4IGZvciBtaWRkbGUgYWxpZ25lZCBoaW50c1xuICAgICAgICBpZiAoaGludE1vZGUpIHtcbiAgICAgICAgICB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCArPSA1O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9jaGVja0xlZnQodGFyZ2V0T2Zmc2V0LCB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCwgdG9vbHRpcE9mZnNldCwgdG9vbHRpcExheWVyKSkge1xuICAgICAgICAgIHRvb2x0aXBMYXllci5zdHlsZS5yaWdodCA9IG51bGw7XG4gICAgICAgICAgX2NoZWNrUmlnaHQodGFyZ2V0T2Zmc2V0LCB0b29sdGlwTGF5ZXJTdHlsZUxlZnRSaWdodCwgdG9vbHRpcE9mZnNldCwgd2luZG93U2l6ZSwgdG9vbHRpcExheWVyKTtcbiAgICAgICAgfVxuICAgICAgICB0b29sdGlwTGF5ZXIuc3R5bGUudG9wID0gKHRhcmdldE9mZnNldC5oZWlnaHQgKyAyMCkgKyAncHgnO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gY2FzZSAnYm90dG9tLWxlZnQtYWxpZ25lZCc6XG4gICAgICAvLyBCb3R0b20tbGVmdC1hbGlnbmVkIGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IGJvdHRvbVxuICAgICAgLy8gY2FzZSAnYm90dG9tJzpcbiAgICAgIC8vIEJvdHRvbSBnb2luZyB0byBmb2xsb3cgdGhlIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFycm93TGF5ZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtYXJyb3cgdG9wJztcblxuICAgICAgICB0b29sdGlwTGF5ZXJTdHlsZUxlZnQgPSAwO1xuICAgICAgICBfY2hlY2tSaWdodCh0YXJnZXRPZmZzZXQsIHRvb2x0aXBMYXllclN0eWxlTGVmdCwgdG9vbHRpcE9mZnNldCwgd2luZG93U2l6ZSwgdG9vbHRpcExheWVyKTtcbiAgICAgICAgdG9vbHRpcExheWVyLnN0eWxlLnRvcCAgICA9ICh0YXJnZXRPZmZzZXQuaGVpZ2h0ICsgIDIwKSArICdweCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0b29sdGlwIGxlZnQgc28gaXQgZG9lc24ndCBnbyBvZmYgdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHdpbmRvd1xuICAgKlxuICAgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSwgaWYgdG9vbHRpcExheWVyU3R5bGVMZWZ0IGlzIG9rLiAgZmFsc2UsIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIF9jaGVja1JpZ2h0KHRhcmdldE9mZnNldCwgdG9vbHRpcExheWVyU3R5bGVMZWZ0LCB0b29sdGlwT2Zmc2V0LCB3aW5kb3dTaXplLCB0b29sdGlwTGF5ZXIpIHtcbiAgICBpZiAodGFyZ2V0T2Zmc2V0LmxlZnQgKyB0b29sdGlwTGF5ZXJTdHlsZUxlZnQgKyB0b29sdGlwT2Zmc2V0LndpZHRoID4gd2luZG93U2l6ZS53aWR0aCkge1xuICAgICAgLy8gb2ZmIHRoZSByaWdodCBzaWRlIG9mIHRoZSB3aW5kb3dcbiAgICAgIHRvb2x0aXBMYXllci5zdHlsZS5sZWZ0ID0gKHdpbmRvd1NpemUud2lkdGggLSB0b29sdGlwT2Zmc2V0LndpZHRoIC0gdGFyZ2V0T2Zmc2V0LmxlZnQpICsgJ3B4JztcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdG9vbHRpcExheWVyLnN0eWxlLmxlZnQgPSB0b29sdGlwTGF5ZXJTdHlsZUxlZnQgKyAncHgnO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0b29sdGlwIHJpZ2h0IHNvIGl0IGRvZXNuJ3QgZ28gb2ZmIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHdpbmRvd1xuICAgKlxuICAgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSwgaWYgdG9vbHRpcExheWVyU3R5bGVSaWdodCBpcyBvay4gIGZhbHNlLCBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBfY2hlY2tMZWZ0KHRhcmdldE9mZnNldCwgdG9vbHRpcExheWVyU3R5bGVSaWdodCwgdG9vbHRpcE9mZnNldCwgdG9vbHRpcExheWVyKSB7XG4gICAgaWYgKHRhcmdldE9mZnNldC5sZWZ0ICsgdGFyZ2V0T2Zmc2V0LndpZHRoIC0gdG9vbHRpcExheWVyU3R5bGVSaWdodCAtIHRvb2x0aXBPZmZzZXQud2lkdGggPCAwKSB7XG4gICAgICAvLyBvZmYgdGhlIGxlZnQgc2lkZSBvZiB0aGUgd2luZG93XG4gICAgICB0b29sdGlwTGF5ZXIuc3R5bGUubGVmdCA9ICgtdGFyZ2V0T2Zmc2V0LmxlZnQpICsgJ3B4JztcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdG9vbHRpcExheWVyLnN0eWxlLnJpZ2h0ID0gdG9vbHRpcExheWVyU3R5bGVSaWdodCArICdweCc7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcG9zaXRpb24gb2YgdGhlIHRvb2x0aXAgYmFzZWQgb24gdGhlIHBvc2l0aW9uIHByZWNlZGVuY2UgYW5kIGF2YWlsYWJpbGl0eVxuICAgKiBvZiBzY3JlZW4gc3BhY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAgICB0YXJnZXRFbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSAgICB0b29sdGlwTGF5ZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9ICAgIGRlc2lyZWRUb29sdGlwUG9zaXRpb25cbiAgICogQHJldHVybiB7U3RyaW5nfSAgIGNhbGN1bGF0ZWRQb3NpdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gX2RldGVybWluZUF1dG9Qb3NpdGlvbih0YXJnZXRFbGVtZW50LCB0b29sdGlwTGF5ZXIsIGRlc2lyZWRUb29sdGlwUG9zaXRpb24pIHtcblxuICAgIC8vIFRha2UgYSBjbG9uZSBvZiBwb3NpdGlvbiBwcmVjZWRlbmNlLiBUaGVzZSB3aWxsIGJlIHRoZSBhdmFpbGFibGVcbiAgICB2YXIgcG9zc2libGVQb3NpdGlvbnMgPSB0aGlzLl9vcHRpb25zLnBvc2l0aW9uUHJlY2VkZW5jZS5zbGljZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSBfZ2V0V2luU2l6ZSgpO1xuICAgIHZhciB0b29sdGlwSGVpZ2h0ID0gX2dldE9mZnNldCh0b29sdGlwTGF5ZXIpLmhlaWdodCArIDEwO1xuICAgIHZhciB0b29sdGlwV2lkdGggPSBfZ2V0T2Zmc2V0KHRvb2x0aXBMYXllcikud2lkdGggKyAyMDtcbiAgICB2YXIgdGFyZ2V0RWxlbWVudFJlY3QgPSB0YXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgLy8gSWYgd2UgY2hlY2sgYWxsIHRoZSBwb3NzaWJsZSBhcmVhcywgYW5kIHRoZXJlIGFyZSBubyB2YWxpZCBwbGFjZXMgZm9yIHRoZSB0b29sdGlwLCB0aGUgZWxlbWVudFxuICAgIC8vIG11c3QgdGFrZSB1cCBtb3N0IG9mIHRoZSBzY3JlZW4gcmVhbCBlc3RhdGUuIFNob3cgdGhlIHRvb2x0aXAgZmxvYXRpbmcgaW4gdGhlIG1pZGRsZSBvZiB0aGUgc2NyZWVuLlxuICAgIHZhciBjYWxjdWxhdGVkUG9zaXRpb24gPSBcImZsb2F0aW5nXCI7XG5cbiAgICAvKlxuICAgICogYXV0byBkZXRlcm1pbmUgcG9zaXRpb24gXG4gICAgKi9cblxuICAgIC8vIENoZWNrIGZvciBzcGFjZSBiZWxvd1xuICAgIGlmICh0YXJnZXRFbGVtZW50UmVjdC5ib3R0b20gKyB0b29sdGlwSGVpZ2h0ID4gd2luZG93U2l6ZS5oZWlnaHQpIHtcbiAgICAgIF9yZW1vdmVFbnRyeShwb3NzaWJsZVBvc2l0aW9ucywgXCJib3R0b21cIik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHNwYWNlIGFib3ZlXG4gICAgaWYgKHRhcmdldEVsZW1lbnRSZWN0LnRvcCAtIHRvb2x0aXBIZWlnaHQgPCAwKSB7XG4gICAgICBfcmVtb3ZlRW50cnkocG9zc2libGVQb3NpdGlvbnMsIFwidG9wXCIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBzcGFjZSB0byB0aGUgcmlnaHRcbiAgICBpZiAodGFyZ2V0RWxlbWVudFJlY3QucmlnaHQgKyB0b29sdGlwV2lkdGggPiB3aW5kb3dTaXplLndpZHRoKSB7XG4gICAgICBfcmVtb3ZlRW50cnkocG9zc2libGVQb3NpdGlvbnMsIFwicmlnaHRcIik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHNwYWNlIHRvIHRoZSBsZWZ0XG4gICAgaWYgKHRhcmdldEVsZW1lbnRSZWN0LmxlZnQgLSB0b29sdGlwV2lkdGggPCAwKSB7XG4gICAgICBfcmVtb3ZlRW50cnkocG9zc2libGVQb3NpdGlvbnMsIFwibGVmdFwiKTtcbiAgICB9XG5cbiAgICAvLyBAdmFyIHtTdHJpbmd9ICBleDogJ3JpZ2h0LWFsaWduZWQnXG4gICAgdmFyIGRlc2lyZWRBbGlnbm1lbnQgPSAoZnVuY3Rpb24gKHBvcykge1xuICAgICAgdmFyIGh5cGhlbkluZGV4ID0gcG9zLmluZGV4T2YoJy0nKTtcbiAgICAgIGlmIChoeXBoZW5JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgLy8gaGFzIGFsaWdubWVudFxuICAgICAgICByZXR1cm4gcG9zLnN1YnN0cihoeXBoZW5JbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSkoZGVzaXJlZFRvb2x0aXBQb3NpdGlvbiB8fCAnJyk7XG5cbiAgICAvLyBzdHJpcCBhbGlnbm1lbnQgZnJvbSBwb3NpdGlvblxuICAgIGlmIChkZXNpcmVkVG9vbHRpcFBvc2l0aW9uKSB7XG4gICAgICAvLyBleDogXCJib3R0b20tcmlnaHQtYWxpZ25lZFwiXG4gICAgICAvLyBzaG91bGQgcmV0dXJuICdib3R0b20nXG4gICAgICBkZXNpcmVkVG9vbHRpcFBvc2l0aW9uID0gZGVzaXJlZFRvb2x0aXBQb3NpdGlvbi5zcGxpdCgnLScpWzBdO1xuICAgIH1cblxuICAgIGlmIChwb3NzaWJsZVBvc2l0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGlmIChkZXNpcmVkVG9vbHRpcFBvc2l0aW9uICE9PSBcImF1dG9cIiAmJlxuICAgICAgICAgIHBvc3NpYmxlUG9zaXRpb25zLmluZGV4T2YoZGVzaXJlZFRvb2x0aXBQb3NpdGlvbikgPiAtMSkge1xuICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdGVkIHBvc2l0aW9uIGlzIGluIHRoZSBsaXN0LCBjaG9vc2UgdGhhdFxuICAgICAgICBjYWxjdWxhdGVkUG9zaXRpb24gPSBkZXNpcmVkVG9vbHRpcFBvc2l0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUGljayB0aGUgZmlyc3QgdmFsaWQgcG9zaXRpb24sIGluIG9yZGVyXG4gICAgICAgIGNhbGN1bGF0ZWRQb3NpdGlvbiA9IHBvc3NpYmxlUG9zaXRpb25zWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG9ubHkgdG9wIGFuZCBib3R0b20gcG9zaXRpb25zIGhhdmUgb3B0aW9uYWwgYWxpZ25tZW50c1xuICAgIGlmIChbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKGNhbGN1bGF0ZWRQb3NpdGlvbikgIT09IC0xKSB7XG4gICAgICBjYWxjdWxhdGVkUG9zaXRpb24gKz0gX2RldGVybWluZUF1dG9BbGlnbm1lbnQodGFyZ2V0RWxlbWVudFJlY3QubGVmdCwgdG9vbHRpcFdpZHRoLCB3aW5kb3dTaXplLCBkZXNpcmVkQWxpZ25tZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsY3VsYXRlZFBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICogYXV0by1kZXRlcm1pbmUgYWxpZ25tZW50XG4gICogQHBhcmFtIHtJbnRlZ2VyfSAgb2Zmc2V0TGVmdFxuICAqIEBwYXJhbSB7SW50ZWdlcn0gIHRvb2x0aXBXaWR0aFxuICAqIEBwYXJhbSB7T2JqZWN0fSAgIHdpbmRvd1NpemVcbiAgKiBAcGFyYW0ge1N0cmluZ30gICBkZXNpcmVkQWxpZ25tZW50XG4gICogQHJldHVybiB7U3RyaW5nfSAgY2FsY3VsYXRlZEFsaWdubWVudFxuICAqL1xuICBmdW5jdGlvbiBfZGV0ZXJtaW5lQXV0b0FsaWdubWVudCAob2Zmc2V0TGVmdCwgdG9vbHRpcFdpZHRoLCB3aW5kb3dTaXplLCBkZXNpcmVkQWxpZ25tZW50KSB7XG4gICAgdmFyIGhhbGZUb29sdGlwV2lkdGggPSB0b29sdGlwV2lkdGggLyAyLFxuICAgICAgd2luV2lkdGggPSBNYXRoLm1pbih3aW5kb3dTaXplLndpZHRoLCB3aW5kb3cuc2NyZWVuLndpZHRoKSxcbiAgICAgIHBvc3NpYmxlQWxpZ25tZW50cyA9IFsnLWxlZnQtYWxpZ25lZCcsICctbWlkZGxlLWFsaWduZWQnLCAnLXJpZ2h0LWFsaWduZWQnXSxcbiAgICAgIGNhbGN1bGF0ZWRBbGlnbm1lbnQgPSAnJztcbiAgICBcbiAgICAvLyB2YWxpZCBsZWZ0IG11c3QgYmUgYXQgbGVhc3QgYSB0b29sdGlwV2lkdGhcbiAgICAvLyBhd2F5IGZyb20gcmlnaHQgc2lkZVxuICAgIGlmICh3aW5XaWR0aCAtIG9mZnNldExlZnQgPCB0b29sdGlwV2lkdGgpIHtcbiAgICAgIF9yZW1vdmVFbnRyeShwb3NzaWJsZUFsaWdubWVudHMsICctbGVmdC1hbGlnbmVkJyk7XG4gICAgfVxuXG4gICAgLy8gdmFsaWQgbWlkZGxlIG11c3QgYmUgYXQgbGVhc3QgaGFsZiBcbiAgICAvLyB3aWR0aCBhd2F5IGZyb20gYm90aCBzaWRlc1xuICAgIGlmIChvZmZzZXRMZWZ0IDwgaGFsZlRvb2x0aXBXaWR0aCB8fCBcbiAgICAgIHdpbldpZHRoIC0gb2Zmc2V0TGVmdCA8IGhhbGZUb29sdGlwV2lkdGgpIHtcbiAgICAgIF9yZW1vdmVFbnRyeShwb3NzaWJsZUFsaWdubWVudHMsICctbWlkZGxlLWFsaWduZWQnKTtcbiAgICB9XG5cbiAgICAvLyB2YWxpZCByaWdodCBtdXN0IGJlIGF0IGxlYXN0IGEgdG9vbHRpcFdpZHRoXG4gICAgLy8gd2lkdGggYXdheSBmcm9tIGxlZnQgc2lkZVxuICAgIC8vIC01MCBpcyBmaXggZm9yIDMyMHB4IHdpZHRoIG1vYmlsZVxuICAgIGlmIChvZmZzZXRMZWZ0IDwgdG9vbHRpcFdpZHRoIC0gNTApIHtcbiAgICAgIF9yZW1vdmVFbnRyeShwb3NzaWJsZUFsaWdubWVudHMsICctcmlnaHQtYWxpZ25lZCcpO1xuICAgIH1cblxuICAgIGlmIChwb3NzaWJsZUFsaWdubWVudHMubGVuZ3RoKSB7XG4gICAgICBpZiAocG9zc2libGVBbGlnbm1lbnRzLmluZGV4T2YoZGVzaXJlZEFsaWdubWVudCkgIT09IC0xKSB7XG4gICAgICAgIC8vIHRoZSBkZXNpcmVkIGFsaWdubWVudCBpcyB2YWxpZFxuICAgICAgICBjYWxjdWxhdGVkQWxpZ25tZW50ID0gZGVzaXJlZEFsaWdubWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBpY2sgdGhlIGZpcnN0IHZhbGlkIHBvc2l0aW9uLCBpbiBvcmRlclxuICAgICAgICBjYWxjdWxhdGVkQWxpZ25tZW50ID0gcG9zc2libGVBbGlnbm1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBzY3JlZW4gd2lkdGggaXMgdG9vIHNtYWxsIFxuICAgICAgLy8gZm9yIEFOWSBhbGlnbm1lbnQsIG1pZGRsZSBpcyBcbiAgICAgIC8vIHByb2JhYmx5IHRoZSBiZXN0IGZvciB2aXNpYmlsaXR5XG4gICAgICBjYWxjdWxhdGVkQWxpZ25tZW50ID0gJy1taWRkbGUtYWxpZ25lZCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGN1bGF0ZWRBbGlnbm1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGVudHJ5IGZyb20gYSBzdHJpbmcgYXJyYXkgaWYgaXQncyB0aGVyZSwgZG9lcyBub3RoaW5nIGlmIGl0IGlzbid0IHRoZXJlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJpbmdBcnJheVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nVG9SZW1vdmVcbiAgICovXG4gIGZ1bmN0aW9uIF9yZW1vdmVFbnRyeShzdHJpbmdBcnJheSwgc3RyaW5nVG9SZW1vdmUpIHtcbiAgICBpZiAoc3RyaW5nQXJyYXkuaW5kZXhPZihzdHJpbmdUb1JlbW92ZSkgPiAtMSkge1xuICAgICAgc3RyaW5nQXJyYXkuc3BsaWNlKHN0cmluZ0FycmF5LmluZGV4T2Yoc3RyaW5nVG9SZW1vdmUpLCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGVscGVyIGxheWVyIG9uIHRoZSBzY3JlZW5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX3NldEhlbHBlckxheWVyUG9zaXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGhlbHBlckxheWVyXG4gICAqL1xuICBmdW5jdGlvbiBfc2V0SGVscGVyTGF5ZXJQb3NpdGlvbihoZWxwZXJMYXllcikge1xuICAgIGlmIChoZWxwZXJMYXllcikge1xuICAgICAgLy9wcmV2ZW50IGVycm9yIHdoZW4gYHRoaXMuX2N1cnJlbnRTdGVwYCBpbiB1bmRlZmluZWRcbiAgICAgIGlmICghdGhpcy5faW50cm9JdGVtc1t0aGlzLl9jdXJyZW50U3RlcF0pIHJldHVybjtcblxuICAgICAgdmFyIGN1cnJlbnRFbGVtZW50ICA9IHRoaXMuX2ludHJvSXRlbXNbdGhpcy5fY3VycmVudFN0ZXBdLFxuICAgICAgICAgIGVsZW1lbnRQb3NpdGlvbiA9IF9nZXRPZmZzZXQoY3VycmVudEVsZW1lbnQuZWxlbWVudCksXG4gICAgICAgICAgd2lkdGhIZWlnaHRQYWRkaW5nID0gdGhpcy5fb3B0aW9ucy5oZWxwZXJFbGVtZW50UGFkZGluZztcblxuICAgICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGZpeGVkLCB0aGUgdG9vbHRpcCBzaG91bGQgYmUgZml4ZWQgYXMgd2VsbC5cbiAgICAgIC8vIE90aGVyd2lzZSwgcmVtb3ZlIGEgZml4ZWQgY2xhc3MgdGhhdCBtYXkgYmUgbGVmdCBvdmVyIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAvLyBzdGVwLlxuICAgICAgaWYgKF9pc0ZpeGVkKGN1cnJlbnRFbGVtZW50LmVsZW1lbnQpKSB7XG4gICAgICAgIF9hZGRDbGFzcyhoZWxwZXJMYXllciwgJ2ludHJvanMtZml4ZWRUb29sdGlwJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVtb3ZlQ2xhc3MoaGVscGVyTGF5ZXIsICdpbnRyb2pzLWZpeGVkVG9vbHRpcCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudEVsZW1lbnQucG9zaXRpb24gPT09ICdmbG9hdGluZycpIHtcbiAgICAgICAgd2lkdGhIZWlnaHRQYWRkaW5nID0gMDtcbiAgICAgIH1cblxuICAgICAgLy9zZXQgbmV3IHBvc2l0aW9uIHRvIGhlbHBlciBsYXllclxuICAgICAgaGVscGVyTGF5ZXIuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDogJyArIChlbGVtZW50UG9zaXRpb24ud2lkdGggICsgd2lkdGhIZWlnaHRQYWRkaW5nKSAgKyAncHg7ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQ6JyArIChlbGVtZW50UG9zaXRpb24uaGVpZ2h0ICsgd2lkdGhIZWlnaHRQYWRkaW5nKSAgKyAncHg7ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b3A6JyAgICArIChlbGVtZW50UG9zaXRpb24udG9wICAgIC0gd2lkdGhIZWlnaHRQYWRkaW5nIC8gMikgICArICdweDsnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGVmdDogJyAgKyAoZWxlbWVudFBvc2l0aW9uLmxlZnQgICAtIHdpZHRoSGVpZ2h0UGFkZGluZyAvIDIpICAgKyAncHg7JztcblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZGlzYWJsZWludGVyYWN0aW9uIGxheWVyIGFuZCBhZGp1c3QgdGhlIHNpemUgYW5kIHBvc2l0aW9uIG9mIHRoZSBsYXllclxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfZGlzYWJsZUludGVyYWN0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBfZGlzYWJsZUludGVyYWN0aW9uKCkge1xuICAgIHZhciBkaXNhYmxlSW50ZXJhY3Rpb25MYXllciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLWRpc2FibGVJbnRlcmFjdGlvbicpO1xuXG4gICAgaWYgKGRpc2FibGVJbnRlcmFjdGlvbkxheWVyID09PSBudWxsKSB7XG4gICAgICBkaXNhYmxlSW50ZXJhY3Rpb25MYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtZGlzYWJsZUludGVyYWN0aW9uJztcbiAgICAgIHRoaXMuX3RhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIpO1xuICAgIH1cblxuICAgIF9zZXRIZWxwZXJMYXllclBvc2l0aW9uLmNhbGwodGhpcywgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRpbmcgYW5jaG9ycyB0byBiZWhhdmUgbGlrZSBidXR0b25zXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9zZXRBbmNob3JBc0J1dHRvblxuICAgKi9cbiAgZnVuY3Rpb24gX3NldEFuY2hvckFzQnV0dG9uKGFuY2hvcil7XG4gICAgYW5jaG9yLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICBhbmNob3IudGFiSW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgYW4gZWxlbWVudCBvbiB0aGUgcGFnZVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfc2hvd0VsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldEVsZW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIF9zaG93RWxlbWVudCh0YXJnZXRFbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiAodGhpcy5faW50cm9DaGFuZ2VDYWxsYmFjaykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLl9pbnRyb0NoYW5nZUNhbGxiYWNrLmNhbGwodGhpcywgdGFyZ2V0RWxlbWVudC5lbGVtZW50KTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIG9sZEhlbHBlckxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtaGVscGVyTGF5ZXInKSxcbiAgICAgICAgb2xkUmVmZXJlbmNlTGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy10b29sdGlwUmVmZXJlbmNlTGF5ZXInKSxcbiAgICAgICAgaGlnaGxpZ2h0Q2xhc3MgPSAnaW50cm9qcy1oZWxwZXJMYXllcicsXG4gICAgICAgIG5leHRUb29sdGlwQnV0dG9uLFxuICAgICAgICBwcmV2VG9vbHRpcEJ1dHRvbixcbiAgICAgICAgc2tpcFRvb2x0aXBCdXR0b24sXG4gICAgICAgIHNjcm9sbFBhcmVudDtcblxuICAgIC8vY2hlY2sgZm9yIGEgY3VycmVudCBzdGVwIGhpZ2hsaWdodCBjbGFzc1xuICAgIGlmICh0eXBlb2YgKHRhcmdldEVsZW1lbnQuaGlnaGxpZ2h0Q2xhc3MpID09PSAnc3RyaW5nJykge1xuICAgICAgaGlnaGxpZ2h0Q2xhc3MgKz0gKCcgJyArIHRhcmdldEVsZW1lbnQuaGlnaGxpZ2h0Q2xhc3MpO1xuICAgIH1cbiAgICAvL2NoZWNrIGZvciBvcHRpb25zIGhpZ2hsaWdodCBjbGFzc1xuICAgIGlmICh0eXBlb2YgKHRoaXMuX29wdGlvbnMuaGlnaGxpZ2h0Q2xhc3MpID09PSAnc3RyaW5nJykge1xuICAgICAgaGlnaGxpZ2h0Q2xhc3MgKz0gKCcgJyArIHRoaXMuX29wdGlvbnMuaGlnaGxpZ2h0Q2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChvbGRIZWxwZXJMYXllciAhPT0gbnVsbCkge1xuICAgICAgdmFyIG9sZEhlbHBlck51bWJlckxheWVyID0gb2xkUmVmZXJlbmNlTGF5ZXIucXVlcnlTZWxlY3RvcignLmludHJvanMtaGVscGVyTnVtYmVyTGF5ZXInKSxcbiAgICAgICAgICBvbGR0b29sdGlwTGF5ZXIgICAgICA9IG9sZFJlZmVyZW5jZUxheWVyLnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLXRvb2x0aXB0ZXh0JyksXG4gICAgICAgICAgb2xkQXJyb3dMYXllciAgICAgICAgPSBvbGRSZWZlcmVuY2VMYXllci5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1hcnJvdycpLFxuICAgICAgICAgIG9sZHRvb2x0aXBDb250YWluZXIgID0gb2xkUmVmZXJlbmNlTGF5ZXIucXVlcnlTZWxlY3RvcignLmludHJvanMtdG9vbHRpcCcpO1xuICAgICAgICAgIFxuICAgICAgc2tpcFRvb2x0aXBCdXR0b24gICAgPSBvbGRSZWZlcmVuY2VMYXllci5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1za2lwYnV0dG9uJyk7XG4gICAgICBwcmV2VG9vbHRpcEJ1dHRvbiAgICA9IG9sZFJlZmVyZW5jZUxheWVyLnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLXByZXZidXR0b24nKTtcbiAgICAgIG5leHRUb29sdGlwQnV0dG9uICAgID0gb2xkUmVmZXJlbmNlTGF5ZXIucXVlcnlTZWxlY3RvcignLmludHJvanMtbmV4dGJ1dHRvbicpO1xuXG4gICAgICAvL3VwZGF0ZSBvciByZXNldCB0aGUgaGVscGVyIGhpZ2hsaWdodCBjbGFzc1xuICAgICAgb2xkSGVscGVyTGF5ZXIuY2xhc3NOYW1lID0gaGlnaGxpZ2h0Q2xhc3M7XG4gICAgICAvL2hpZGUgdGhlIHRvb2x0aXBcbiAgICAgIG9sZHRvb2x0aXBDb250YWluZXIuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICBvbGR0b29sdGlwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgc2tpcFRvb2x0aXBCdXR0b24uaW5uZXJIVE1MID0gdGhpcy5fb3B0aW9ucy5za2lwTGFiZWw7XG4gICAgICBwcmV2VG9vbHRpcEJ1dHRvbi5pbm5lckhUTUwgPSB0aGlzLl9vcHRpb25zLnByZXZMYWJlbDtcbiAgICAgIG5leHRUb29sdGlwQnV0dG9uLmlubmVySFRNTCA9IHRoaXMuX29wdGlvbnMubmV4dExhYmVsO1xuXG4gICAgICBpZiAob2xkSGVscGVyTnVtYmVyTGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGxhc3RJbnRyb0l0ZW0gPSB0aGlzLl9pbnRyb0l0ZW1zWyh0YXJnZXRFbGVtZW50LnN0ZXAgLSAyID49IDAgPyB0YXJnZXRFbGVtZW50LnN0ZXAgLSAyIDogMCldO1xuXG4gICAgICAgIGlmIChsYXN0SW50cm9JdGVtICE9PSBudWxsICYmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdmb3J3YXJkJyAmJiBsYXN0SW50cm9JdGVtLnBvc2l0aW9uID09PSAnZmxvYXRpbmcnKSB8fCAodGhpcy5fZGlyZWN0aW9uID09PSAnYmFja3dhcmQnICYmIHRhcmdldEVsZW1lbnQucG9zaXRpb24gPT09ICdmbG9hdGluZycpKSB7XG4gICAgICAgICAgb2xkSGVscGVyTnVtYmVyTGF5ZXIuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIHRvIGVsZW1lbnRcbiAgICAgIHNjcm9sbFBhcmVudCA9IF9nZXRTY3JvbGxQYXJlbnQoIHRhcmdldEVsZW1lbnQuZWxlbWVudCApO1xuXG4gICAgICBpZiAoc2Nyb2xsUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIC8vIHRhcmdldCBpcyB3aXRoaW4gYSBzY3JvbGxhYmxlIGVsZW1lbnRcbiAgICAgICAgX3Njcm9sbFBhcmVudFRvRWxlbWVudChzY3JvbGxQYXJlbnQsIHRhcmdldEVsZW1lbnQuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBuZXcgcG9zaXRpb24gdG8gaGVscGVyIGxheWVyXG4gICAgICBfc2V0SGVscGVyTGF5ZXJQb3NpdGlvbi5jYWxsKHNlbGYsIG9sZEhlbHBlckxheWVyKTtcbiAgICAgIF9zZXRIZWxwZXJMYXllclBvc2l0aW9uLmNhbGwoc2VsZiwgb2xkUmVmZXJlbmNlTGF5ZXIpO1xuXG4gICAgICAvL3JlbW92ZSBgaW50cm9qcy1maXhQYXJlbnRgIGNsYXNzIGZyb20gdGhlIGVsZW1lbnRzXG4gICAgICB2YXIgZml4UGFyZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnRyb2pzLWZpeFBhcmVudCcpO1xuICAgICAgX2ZvckVhY2goZml4UGFyZW50cywgZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICBfcmVtb3ZlQ2xhc3MocGFyZW50LCAvaW50cm9qcy1maXhQYXJlbnQvZyk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy9yZW1vdmUgb2xkIGNsYXNzZXMgaWYgdGhlIGVsZW1lbnQgc3RpbGwgZXhpc3RcbiAgICAgIF9yZW1vdmVTaG93RWxlbWVudCgpO1xuXG4gICAgICAvL3dlIHNob3VsZCB3YWl0IHVudGlsIHRoZSBDU1MzIHRyYW5zaXRpb24gaXMgY29tcGV0ZWQgKGl0J3MgMC4zIHNlYykgdG8gcHJldmVudCBpbmNvcnJlY3QgYGhlaWdodGAgYW5kIGB3aWR0aGAgY2FsY3VsYXRpb25cbiAgICAgIGlmIChzZWxmLl9sYXN0U2hvd0VsZW1lbnRUaW1lcikge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNlbGYuX2xhc3RTaG93RWxlbWVudFRpbWVyKTtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fbGFzdFNob3dFbGVtZW50VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgLy9zZXQgY3VycmVudCBzdGVwIHRvIHRoZSBsYWJlbFxuICAgICAgICBpZiAob2xkSGVscGVyTnVtYmVyTGF5ZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBvbGRIZWxwZXJOdW1iZXJMYXllci5pbm5lckhUTUwgPSB0YXJnZXRFbGVtZW50LnN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgLy9zZXQgY3VycmVudCB0b29sdGlwIHRleHRcbiAgICAgICAgb2xkdG9vbHRpcExheWVyLmlubmVySFRNTCA9IHRhcmdldEVsZW1lbnQuaW50cm87XG4gICAgICAgIC8vc2V0IHRoZSB0b29sdGlwIHBvc2l0aW9uXG4gICAgICAgIG9sZHRvb2x0aXBDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgX3BsYWNlVG9vbHRpcC5jYWxsKHNlbGYsIHRhcmdldEVsZW1lbnQuZWxlbWVudCwgb2xkdG9vbHRpcENvbnRhaW5lciwgb2xkQXJyb3dMYXllciwgb2xkSGVscGVyTnVtYmVyTGF5ZXIpO1xuXG4gICAgICAgIC8vY2hhbmdlIGFjdGl2ZSBidWxsZXRcbiAgICAgICAgaWYgKHNlbGYuX29wdGlvbnMuc2hvd0J1bGxldHMpIHtcbiAgICAgICAgICAgIG9sZFJlZmVyZW5jZUxheWVyLnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLWJ1bGxldHMgbGkgPiBhLmFjdGl2ZScpLmNsYXNzTmFtZSA9ICcnO1xuICAgICAgICAgICAgb2xkUmVmZXJlbmNlTGF5ZXIucXVlcnlTZWxlY3RvcignLmludHJvanMtYnVsbGV0cyBsaSA+IGFbZGF0YS1zdGVwbnVtYmVyPVwiJyArIHRhcmdldEVsZW1lbnQuc3RlcCArICdcIl0nKS5jbGFzc05hbWUgPSAnYWN0aXZlJztcbiAgICAgICAgfVxuICAgICAgICBvbGRSZWZlcmVuY2VMYXllci5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1wcm9ncmVzcyAuaW50cm9qcy1wcm9ncmVzc2JhcicpLnN0eWxlLmNzc1RleHQgPSAnd2lkdGg6JyArIF9nZXRQcm9ncmVzcy5jYWxsKHNlbGYpICsgJyU7JztcbiAgICAgICAgb2xkUmVmZXJlbmNlTGF5ZXIucXVlcnlTZWxlY3RvcignLmludHJvanMtcHJvZ3Jlc3MgLmludHJvanMtcHJvZ3Jlc3NiYXInKS5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCBfZ2V0UHJvZ3Jlc3MuY2FsbChzZWxmKSk7XG5cbiAgICAgICAgLy9zaG93IHRoZSB0b29sdGlwXG4gICAgICAgIG9sZHRvb2x0aXBDb250YWluZXIuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIGlmIChvbGRIZWxwZXJOdW1iZXJMYXllcikgb2xkSGVscGVyTnVtYmVyTGF5ZXIuc3R5bGUub3BhY2l0eSA9IDE7XG5cbiAgICAgICAgLy9yZXNldCBidXR0b24gZm9jdXNcbiAgICAgICAgaWYgKHR5cGVvZiBza2lwVG9vbHRpcEJ1dHRvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBza2lwVG9vbHRpcEJ1dHRvbiAhPT0gbnVsbCAmJiAvaW50cm9qcy1kb25lYnV0dG9uL2dpLnRlc3Qoc2tpcFRvb2x0aXBCdXR0b24uY2xhc3NOYW1lKSkge1xuICAgICAgICAgIC8vIHNraXAgYnV0dG9uIGlzIG5vdyBcImRvbmVcIiBidXR0b25cbiAgICAgICAgICBza2lwVG9vbHRpcEJ1dHRvbi5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXh0VG9vbHRpcEJ1dHRvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuZXh0VG9vbHRpcEJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vc3RpbGwgaW4gdGhlIHRvdXIsIGZvY3VzIG9uIG5leHRcbiAgICAgICAgICBuZXh0VG9vbHRpcEJ1dHRvbi5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hhbmdlIHRoZSBzY3JvbGwgb2YgdGhlIHdpbmRvdywgaWYgbmVlZGVkXG4gICAgICAgIF9zY3JvbGxUby5jYWxsKHNlbGYsIHRhcmdldEVsZW1lbnQuc2Nyb2xsVG8sIHRhcmdldEVsZW1lbnQsIG9sZHRvb2x0aXBMYXllcik7XG4gICAgICB9LCAzNTApO1xuXG4gICAgICAvLyBlbmQgb2Ygb2xkIGVsZW1lbnQgaWYtZWxzZSBjb25kaXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhlbHBlckxheWVyICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgcmVmZXJlbmNlTGF5ZXIgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICBhcnJvd0xheWVyICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgIHRvb2x0aXBMYXllciAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgdG9vbHRpcFRleHRMYXllciAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICBidWxsZXRzTGF5ZXIgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgIHByb2dyZXNzTGF5ZXIgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgYnV0dG9uc0xheWVyICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgaGVscGVyTGF5ZXIuY2xhc3NOYW1lID0gaGlnaGxpZ2h0Q2xhc3M7XG4gICAgICByZWZlcmVuY2VMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy10b29sdGlwUmVmZXJlbmNlTGF5ZXInO1xuXG4gICAgICAvLyBzY3JvbGwgdG8gZWxlbWVudFxuICAgICAgc2Nyb2xsUGFyZW50ID0gX2dldFNjcm9sbFBhcmVudCggdGFyZ2V0RWxlbWVudC5lbGVtZW50ICk7XG5cbiAgICAgIGlmIChzY3JvbGxQYXJlbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgLy8gdGFyZ2V0IGlzIHdpdGhpbiBhIHNjcm9sbGFibGUgZWxlbWVudFxuICAgICAgICBfc2Nyb2xsUGFyZW50VG9FbGVtZW50KHNjcm9sbFBhcmVudCwgdGFyZ2V0RWxlbWVudC5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy9zZXQgbmV3IHBvc2l0aW9uIHRvIGhlbHBlciBsYXllclxuICAgICAgX3NldEhlbHBlckxheWVyUG9zaXRpb24uY2FsbChzZWxmLCBoZWxwZXJMYXllcik7XG4gICAgICBfc2V0SGVscGVyTGF5ZXJQb3NpdGlvbi5jYWxsKHNlbGYsIHJlZmVyZW5jZUxheWVyKTtcblxuICAgICAgLy9hZGQgaGVscGVyIGxheWVyIHRvIHRhcmdldCBlbGVtZW50XG4gICAgICB0aGlzLl90YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKGhlbHBlckxheWVyKTtcbiAgICAgIHRoaXMuX3RhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQocmVmZXJlbmNlTGF5ZXIpO1xuXG4gICAgICBhcnJvd0xheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLWFycm93JztcblxuICAgICAgdG9vbHRpcFRleHRMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy10b29sdGlwdGV4dCc7XG4gICAgICB0b29sdGlwVGV4dExheWVyLmlubmVySFRNTCA9IHRhcmdldEVsZW1lbnQuaW50cm87XG5cbiAgICAgIGJ1bGxldHNMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy1idWxsZXRzJztcblxuICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2hvd0J1bGxldHMgPT09IGZhbHNlKSB7XG4gICAgICAgIGJ1bGxldHNMYXllci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICB2YXIgdWxDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgdWxDb250YWluZXIuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3RhYmxpc3QnKTtcblxuICAgICAgdmFyIGFuY2hvckNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYuZ29Ub1N0ZXAodGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcG51bWJlcicpKTtcbiAgICAgIH07XG5cbiAgICAgIF9mb3JFYWNoKHRoaXMuX2ludHJvSXRlbXMsIGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgIHZhciBpbm5lckxpICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgdmFyIGFuY2hvckxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIFxuICAgICAgICBpbm5lckxpLnNldEF0dHJpYnV0ZSgncm9sZScsICdwcmVzZW50YXRpb24nKTtcbiAgICAgICAgYW5jaG9yTGluay5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGFiJyk7XG5cbiAgICAgICAgYW5jaG9yTGluay5vbmNsaWNrID0gYW5jaG9yQ2xpY2s7XG5cbiAgICAgICAgaWYgKGkgPT09ICh0YXJnZXRFbGVtZW50LnN0ZXAtMSkpIHtcbiAgICAgICAgICBhbmNob3JMaW5rLmNsYXNzTmFtZSA9ICdhY3RpdmUnO1xuICAgICAgICB9IFxuXG4gICAgICAgIF9zZXRBbmNob3JBc0J1dHRvbihhbmNob3JMaW5rKTtcbiAgICAgICAgYW5jaG9yTGluay5pbm5lckhUTUwgPSBcIiZuYnNwO1wiO1xuICAgICAgICBhbmNob3JMaW5rLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGVwbnVtYmVyJywgaXRlbS5zdGVwKTtcblxuICAgICAgICBpbm5lckxpLmFwcGVuZENoaWxkKGFuY2hvckxpbmspO1xuICAgICAgICB1bENvbnRhaW5lci5hcHBlbmRDaGlsZChpbm5lckxpKTtcbiAgICAgIH0pO1xuXG4gICAgICBidWxsZXRzTGF5ZXIuYXBwZW5kQ2hpbGQodWxDb250YWluZXIpO1xuXG4gICAgICBwcm9ncmVzc0xheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLXByb2dyZXNzJztcblxuICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2hvd1Byb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICBwcm9ncmVzc0xheWVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICB2YXIgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHByb2dyZXNzQmFyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLXByb2dyZXNzYmFyJztcbiAgICAgIHByb2dyZXNzQmFyLnNldEF0dHJpYnV0ZSgncm9sZScsICdwcm9ncmVzcycpO1xuICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbWluJywgMCk7XG4gICAgICBwcm9ncmVzc0Jhci5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVtYXgnLCAxMDApO1xuICAgICAgcHJvZ3Jlc3NCYXIuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgX2dldFByb2dyZXNzLmNhbGwodGhpcykpO1xuICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDonICsgX2dldFByb2dyZXNzLmNhbGwodGhpcykgKyAnJTsnO1xuXG4gICAgICBwcm9ncmVzc0xheWVyLmFwcGVuZENoaWxkKHByb2dyZXNzQmFyKTtcblxuICAgICAgYnV0dG9uc0xheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLXRvb2x0aXBidXR0b25zJztcbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNob3dCdXR0b25zID09PSBmYWxzZSkge1xuICAgICAgICBidXR0b25zTGF5ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgdG9vbHRpcExheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLXRvb2x0aXAnO1xuICAgICAgdG9vbHRpcExheWVyLmFwcGVuZENoaWxkKHRvb2x0aXBUZXh0TGF5ZXIpO1xuICAgICAgdG9vbHRpcExheWVyLmFwcGVuZENoaWxkKGJ1bGxldHNMYXllcik7XG4gICAgICB0b29sdGlwTGF5ZXIuYXBwZW5kQ2hpbGQocHJvZ3Jlc3NMYXllcik7XG5cbiAgICAgIC8vYWRkIGhlbHBlciBsYXllciBudW1iZXJcbiAgICAgIHZhciBoZWxwZXJOdW1iZXJMYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLnNob3dTdGVwTnVtYmVycyA9PT0gdHJ1ZSkge1xuICAgICAgICBoZWxwZXJOdW1iZXJMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy1oZWxwZXJOdW1iZXJMYXllcic7XG4gICAgICAgIGhlbHBlck51bWJlckxheWVyLmlubmVySFRNTCA9IHRhcmdldEVsZW1lbnQuc3RlcDtcbiAgICAgICAgcmVmZXJlbmNlTGF5ZXIuYXBwZW5kQ2hpbGQoaGVscGVyTnVtYmVyTGF5ZXIpO1xuICAgICAgfVxuXG4gICAgICB0b29sdGlwTGF5ZXIuYXBwZW5kQ2hpbGQoYXJyb3dMYXllcik7XG4gICAgICByZWZlcmVuY2VMYXllci5hcHBlbmRDaGlsZCh0b29sdGlwTGF5ZXIpO1xuXG4gICAgICAvL25leHQgYnV0dG9uXG4gICAgICBuZXh0VG9vbHRpcEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgICAgbmV4dFRvb2x0aXBCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc2VsZi5faW50cm9JdGVtcy5sZW5ndGggLSAxICE9PSBzZWxmLl9jdXJyZW50U3RlcCkge1xuICAgICAgICAgIF9uZXh0U3RlcC5jYWxsKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfc2V0QW5jaG9yQXNCdXR0b24obmV4dFRvb2x0aXBCdXR0b24pO1xuICAgICAgbmV4dFRvb2x0aXBCdXR0b24uaW5uZXJIVE1MID0gdGhpcy5fb3B0aW9ucy5uZXh0TGFiZWw7XG5cbiAgICAgIC8vcHJldmlvdXMgYnV0dG9uXG4gICAgICBwcmV2VG9vbHRpcEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgICAgcHJldlRvb2x0aXBCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc2VsZi5fY3VycmVudFN0ZXAgIT09IDApIHtcbiAgICAgICAgICBfcHJldmlvdXNTdGVwLmNhbGwoc2VsZik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9zZXRBbmNob3JBc0J1dHRvbihwcmV2VG9vbHRpcEJ1dHRvbik7XG4gICAgICBwcmV2VG9vbHRpcEJ1dHRvbi5pbm5lckhUTUwgPSB0aGlzLl9vcHRpb25zLnByZXZMYWJlbDtcblxuICAgICAgLy9za2lwIGJ1dHRvblxuICAgICAgc2tpcFRvb2x0aXBCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICBza2lwVG9vbHRpcEJ1dHRvbi5jbGFzc05hbWUgPSB0aGlzLl9vcHRpb25zLmJ1dHRvbkNsYXNzICsgJyBpbnRyb2pzLXNraXBidXR0b24gJztcbiAgICAgIF9zZXRBbmNob3JBc0J1dHRvbihza2lwVG9vbHRpcEJ1dHRvbik7XG4gICAgICBza2lwVG9vbHRpcEJ1dHRvbi5pbm5lckhUTUwgPSB0aGlzLl9vcHRpb25zLnNraXBMYWJlbDtcblxuICAgICAgc2tpcFRvb2x0aXBCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoc2VsZi5faW50cm9JdGVtcy5sZW5ndGggLSAxID09PSBzZWxmLl9jdXJyZW50U3RlcCAmJiB0eXBlb2YgKHNlbGYuX2ludHJvQ29tcGxldGVDYWxsYmFjaykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzZWxmLl9pbnRyb0NvbXBsZXRlQ2FsbGJhY2suY2FsbChzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLl9pbnRyb0l0ZW1zLmxlbmd0aCAtIDEgIT09IHNlbGYuX2N1cnJlbnRTdGVwICYmIHR5cGVvZiAoc2VsZi5faW50cm9FeGl0Q2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgc2VsZi5faW50cm9FeGl0Q2FsbGJhY2suY2FsbChzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Yoc2VsZi5faW50cm9Ta2lwQ2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgc2VsZi5faW50cm9Ta2lwQ2FsbGJhY2suY2FsbChzZWxmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9leGl0SW50cm8uY2FsbChzZWxmLCBzZWxmLl90YXJnZXRFbGVtZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGJ1dHRvbnNMYXllci5hcHBlbmRDaGlsZChza2lwVG9vbHRpcEJ1dHRvbik7XG5cbiAgICAgIC8vaW4gb3JkZXIgdG8gcHJldmVudCBkaXNwbGF5aW5nIG5leHQvcHJldmlvdXMgYnV0dG9uIGFsd2F5c1xuICAgICAgaWYgKHRoaXMuX2ludHJvSXRlbXMubGVuZ3RoID4gMSkge1xuICAgICAgICBidXR0b25zTGF5ZXIuYXBwZW5kQ2hpbGQocHJldlRvb2x0aXBCdXR0b24pO1xuICAgICAgICBidXR0b25zTGF5ZXIuYXBwZW5kQ2hpbGQobmV4dFRvb2x0aXBCdXR0b24pO1xuICAgICAgfVxuXG4gICAgICB0b29sdGlwTGF5ZXIuYXBwZW5kQ2hpbGQoYnV0dG9uc0xheWVyKTtcblxuICAgICAgLy9zZXQgcHJvcGVyIHBvc2l0aW9uXG4gICAgICBfcGxhY2VUb29sdGlwLmNhbGwoc2VsZiwgdGFyZ2V0RWxlbWVudC5lbGVtZW50LCB0b29sdGlwTGF5ZXIsIGFycm93TGF5ZXIsIGhlbHBlck51bWJlckxheWVyKTtcblxuICAgICAgLy8gY2hhbmdlIHRoZSBzY3JvbGwgb2YgdGhlIHdpbmRvdywgaWYgbmVlZGVkXG4gICAgICBfc2Nyb2xsVG8uY2FsbCh0aGlzLCB0YXJnZXRFbGVtZW50LnNjcm9sbFRvLCB0YXJnZXRFbGVtZW50LCB0b29sdGlwTGF5ZXIpO1xuXG4gICAgICAvL2VuZCBvZiBuZXcgZWxlbWVudCBpZi1lbHNlIGNvbmRpdGlvblxuICAgIH1cblxuICAgIC8vIHJlbW92aW5nIHByZXZpb3VzIGRpc2FibGUgaW50ZXJhY3Rpb24gbGF5ZXJcbiAgICB2YXIgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIgPSBzZWxmLl90YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnRyb2pzLWRpc2FibGVJbnRlcmFjdGlvbicpO1xuICAgIGlmIChkaXNhYmxlSW50ZXJhY3Rpb25MYXllcikge1xuICAgICAgZGlzYWJsZUludGVyYWN0aW9uTGF5ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXNhYmxlSW50ZXJhY3Rpb25MYXllcik7XG4gICAgfVxuXG4gICAgLy9kaXNhYmxlIGludGVyYWN0aW9uXG4gICAgaWYgKHRhcmdldEVsZW1lbnQuZGlzYWJsZUludGVyYWN0aW9uKSB7XG4gICAgICBfZGlzYWJsZUludGVyYWN0aW9uLmNhbGwoc2VsZik7XG4gICAgfVxuXG4gICAgLy8gd2hlbiBpdCdzIHRoZSBmaXJzdCBzdGVwIG9mIHRvdXJcbiAgICBpZiAodGhpcy5fY3VycmVudFN0ZXAgPT09IDAgJiYgdGhpcy5faW50cm9JdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAodHlwZW9mIHNraXBUb29sdGlwQnV0dG9uICE9PSBcInVuZGVmaW5lZFwiICYmIHNraXBUb29sdGlwQnV0dG9uICE9PSBudWxsKSB7XG4gICAgICAgIHNraXBUb29sdGlwQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbnMuYnV0dG9uQ2xhc3MgKyAnIGludHJvanMtc2tpcGJ1dHRvbic7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG5leHRUb29sdGlwQnV0dG9uICE9PSBcInVuZGVmaW5lZFwiICYmIG5leHRUb29sdGlwQnV0dG9uICE9PSBudWxsKSB7XG4gICAgICAgIG5leHRUb29sdGlwQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbnMuYnV0dG9uQ2xhc3MgKyAnIGludHJvanMtbmV4dGJ1dHRvbic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldlRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgcHJldlRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgICBwcmV2VG9vbHRpcEJ1dHRvbi5jbGFzc05hbWUgPSB0aGlzLl9vcHRpb25zLmJ1dHRvbkNsYXNzICsgJyBpbnRyb2pzLXByZXZidXR0b24gaW50cm9qcy1oaWRkZW4nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgbmV4dFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgICBfYWRkQ2xhc3MobmV4dFRvb2x0aXBCdXR0b24sICdpbnRyb2pzLWZ1bGxidXR0b24nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2VG9vbHRpcEJ1dHRvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwcmV2VG9vbHRpcEJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgIHByZXZUb29sdGlwQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbnMuYnV0dG9uQ2xhc3MgKyAnIGludHJvanMtcHJldmJ1dHRvbiBpbnRyb2pzLWRpc2FibGVkJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNraXBUb29sdGlwQnV0dG9uICE9PSBcInVuZGVmaW5lZFwiICYmIHNraXBUb29sdGlwQnV0dG9uICE9PSBudWxsKSB7XG4gICAgICAgIHNraXBUb29sdGlwQnV0dG9uLmlubmVySFRNTCA9IHRoaXMuX29wdGlvbnMuc2tpcExhYmVsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5faW50cm9JdGVtcy5sZW5ndGggLSAxID09PSB0aGlzLl9jdXJyZW50U3RlcCB8fCB0aGlzLl9pbnRyb0l0ZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gbGFzdCBzdGVwIG9mIHRvdXJcbiAgICAgIGlmICh0eXBlb2Ygc2tpcFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgc2tpcFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgc2tpcFRvb2x0aXBCdXR0b24uaW5uZXJIVE1MID0gdGhpcy5fb3B0aW9ucy5kb25lTGFiZWw7XG4gICAgICAgIC8vIGFkZGluZyBkb25lYnV0dG9uIGNsYXNzIGluIGFkZGl0aW9uIHRvIHNraXBidXR0b25cbiAgICAgICAgX2FkZENsYXNzKHNraXBUb29sdGlwQnV0dG9uLCAnaW50cm9qcy1kb25lYnV0dG9uJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByZXZUb29sdGlwQnV0dG9uICE9PSBcInVuZGVmaW5lZFwiICYmIHByZXZUb29sdGlwQnV0dG9uICE9PSBudWxsKSB7XG4gICAgICAgIHByZXZUb29sdGlwQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbnMuYnV0dG9uQ2xhc3MgKyAnIGludHJvanMtcHJldmJ1dHRvbic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmhpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgbmV4dFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgICBuZXh0VG9vbHRpcEJ1dHRvbi5jbGFzc05hbWUgPSB0aGlzLl9vcHRpb25zLmJ1dHRvbkNsYXNzICsgJyBpbnRyb2pzLW5leHRidXR0b24gaW50cm9qcy1oaWRkZW4nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcHJldlRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgcHJldlRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgICBfYWRkQ2xhc3MocHJldlRvb2x0aXBCdXR0b24sICdpbnRyb2pzLWZ1bGxidXR0b24nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0VG9vbHRpcEJ1dHRvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBuZXh0VG9vbHRpcEJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgIG5leHRUb29sdGlwQnV0dG9uLmNsYXNzTmFtZSA9IHRoaXMuX29wdGlvbnMuYnV0dG9uQ2xhc3MgKyAnIGludHJvanMtbmV4dGJ1dHRvbiBpbnRyb2pzLWRpc2FibGVkJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdGVwcyBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmRcbiAgICAgIGlmICh0eXBlb2Ygc2tpcFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgc2tpcFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgc2tpcFRvb2x0aXBCdXR0b24uY2xhc3NOYW1lID0gdGhpcy5fb3B0aW9ucy5idXR0b25DbGFzcyArICcgaW50cm9qcy1za2lwYnV0dG9uJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJldlRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgcHJldlRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgcHJldlRvb2x0aXBCdXR0b24uY2xhc3NOYW1lID0gdGhpcy5fb3B0aW9ucy5idXR0b25DbGFzcyArICcgaW50cm9qcy1wcmV2YnV0dG9uJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbmV4dFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgbmV4dFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgbmV4dFRvb2x0aXBCdXR0b24uY2xhc3NOYW1lID0gdGhpcy5fb3B0aW9ucy5idXR0b25DbGFzcyArICcgaW50cm9qcy1uZXh0YnV0dG9uJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygc2tpcFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgc2tpcFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgICAgc2tpcFRvb2x0aXBCdXR0b24uaW5uZXJIVE1MID0gdGhpcy5fb3B0aW9ucy5za2lwTGFiZWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldlRvb2x0aXBCdXR0b24uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgIG5leHRUb29sdGlwQnV0dG9uLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgICBza2lwVG9vbHRpcEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG5cbiAgICAvL1NldCBmb2N1cyBvbiBcIm5leHRcIiBidXR0b24sIHNvIHRoYXQgaGl0dGluZyBFbnRlciBhbHdheXMgbW92ZXMgeW91IG9udG8gdGhlIG5leHQgc3RlcFxuICAgIGlmICh0eXBlb2YgbmV4dFRvb2x0aXBCdXR0b24gIT09IFwidW5kZWZpbmVkXCIgJiYgbmV4dFRvb2x0aXBCdXR0b24gIT09IG51bGwpIHtcbiAgICAgIG5leHRUb29sdGlwQnV0dG9uLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgX3NldFNob3dFbGVtZW50KHRhcmdldEVsZW1lbnQpO1xuXG4gICAgaWYgKHR5cGVvZiAodGhpcy5faW50cm9BZnRlckNoYW5nZUNhbGxiYWNrKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuX2ludHJvQWZ0ZXJDaGFuZ2VDYWxsYmFjay5jYWxsKHRoaXMsIHRhcmdldEVsZW1lbnQuZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvIGNoYW5nZSB0aGUgc2Nyb2xsIG9mIGB3aW5kb3dgIGFmdGVyIGhpZ2hsaWdodGluZyBhbiBlbGVtZW50XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9zY3JvbGxUb1xuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsVG9cbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldEVsZW1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRvb2x0aXBMYXllclxuICAgKi9cbiAgZnVuY3Rpb24gX3Njcm9sbFRvKHNjcm9sbFRvLCB0YXJnZXRFbGVtZW50LCB0b29sdGlwTGF5ZXIpIHtcbiAgICBpZiAoc2Nyb2xsVG8gPT09ICdvZmYnKSByZXR1cm47ICBcbiAgICB2YXIgcmVjdDtcblxuICAgIGlmICghdGhpcy5fb3B0aW9ucy5zY3JvbGxUb0VsZW1lbnQpIHJldHVybjtcblxuICAgIGlmIChzY3JvbGxUbyA9PT0gJ3Rvb2x0aXAnKSB7XG4gICAgICByZWN0ID0gdG9vbHRpcExheWVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gdGFyZ2V0RWxlbWVudC5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIGlmICghX2VsZW1lbnRJblZpZXdwb3J0KHRhcmdldEVsZW1lbnQuZWxlbWVudCkpIHtcbiAgICAgIHZhciB0b3AgPSByZWN0LmJvdHRvbSAtIChyZWN0LmJvdHRvbSAtIHJlY3QudG9wKTtcblxuICAgICAgdmFyIHdpbkhlaWdodCA9IF9nZXRXaW5TaXplKCkuaGVpZ2h0O1xuICAgICAgdmFyIGFic1kgPSByZWN0LnRvcCArIHBhZ2VZT2Zmc2V0O1xuICAgICAgdmFyIHdpbkhhbGZIZWlnaHQgPSB3aW5IZWlnaHQgLyAyO1xuICAgICAgdmFyIGVsZW1IYWxmSGVpZ2h0ID0gcmVjdC5oZWlnaHQgLyAyO1xuICAgICAgdmFyIGFic1lTY3JvbGwgPSBhYnNZIC0gd2luSGFsZkhlaWdodCArIGVsZW1IYWxmSGVpZ2h0O1xuICAgICAgdmFyIHNjcm9sbFRvT3B0aW9ucyA9IHt0b3A6IGFic1lTY3JvbGwsIGxlZnQ6IDAsIGJlaGF2aW9yOiBcInNtb290aFwifVxuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICAvLyBpZiBzY3JvbGxUbyB3aXRoIG9wdGlvbnMgaXMgd29ya2luZ1xuICAgICAgICBpZiAodG9wIDwgMCB8fCB0YXJnZXRFbGVtZW50LmVsZW1lbnQuY2xpZW50SGVpZ2h0ID4gd2luSGVpZ2h0KSB7XG4gICAgICAgICAgc2Nyb2xsVG9PcHRpb25zLnRvcCAtPSB0aGlzLl9vcHRpb25zLnNjcm9sbFBhZGRpbmc7XG4gICAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Nyb2xsVG9PcHRpb25zLnRvcCArPSB0aGlzLl9vcHRpb25zLnNjcm9sbFBhZGRpbmc7XG4gICAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1jYXRjaChlKSB7XG4gICAgICAgIGlmICh0b3AgPCAwIHx8IHRhcmdldEVsZW1lbnQuZWxlbWVudC5jbGllbnRIZWlnaHQgPiB3aW5IZWlnaHQpIHtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsVG9PcHRpb25zLnRvcCAtIDMwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsVG9PcHRpb25zLnRvcCArIDMwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZW1vdmUgYWxsIHNob3cgZWxlbWVudChzKVxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfcmVtb3ZlU2hvd0VsZW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIF9yZW1vdmVTaG93RWxlbWVudCgpIHtcbiAgICB2YXIgZWxtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnRyb2pzLXNob3dFbGVtZW50Jyk7XG5cbiAgICBfZm9yRWFjaChlbG1zLCBmdW5jdGlvbiAoZWxtKSB7XG4gICAgICBfcmVtb3ZlQ2xhc3MoZWxtLCAvaW50cm9qcy1bYS16QS1aXSsvZyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG8gc2V0IHRoZSBzaG93IGVsZW1lbnRcbiAgICogVGhpcyBmdW5jdGlvbiBzZXQgYSByZWxhdGl2ZSAoaW4gbW9zdCBjYXNlcykgcG9zaXRpb24gYW5kIGNoYW5nZXMgdGhlIHotaW5kZXhcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX3NldFNob3dFbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRFbGVtZW50XG4gICAqL1xuICBmdW5jdGlvbiBfc2V0U2hvd0VsZW1lbnQodGFyZ2V0RWxlbWVudCkge1xuICAgIHZhciBwYXJlbnRFbG07XG4gICAgLy8gd2UgbmVlZCB0byBhZGQgdGhpcyBzaG93IGVsZW1lbnQgY2xhc3MgdG8gdGhlIHBhcmVudCBvZiBTVkcgZWxlbWVudHNcbiAgICAvLyBiZWNhdXNlIHRoZSBTVkcgZWxlbWVudHMgY2FuJ3QgaGF2ZSBpbmRlcGVuZGVudCB6LWluZGV4XG4gICAgaWYgKHRhcmdldEVsZW1lbnQuZWxlbWVudCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpIHtcbiAgICAgIHBhcmVudEVsbSA9IHRhcmdldEVsZW1lbnQuZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgICB3aGlsZSAodGFyZ2V0RWxlbWVudC5lbGVtZW50LnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFwYXJlbnRFbG0udGFnTmFtZSB8fCBwYXJlbnRFbG0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScpIGJyZWFrO1xuXG4gICAgICAgIGlmIChwYXJlbnRFbG0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc3ZnJykge1xuICAgICAgICAgIF9hZGRDbGFzcyhwYXJlbnRFbG0sICdpbnRyb2pzLXNob3dFbGVtZW50IGludHJvanMtcmVsYXRpdmVQb3NpdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50RWxtID0gcGFyZW50RWxtLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2FkZENsYXNzKHRhcmdldEVsZW1lbnQuZWxlbWVudCwgJ2ludHJvanMtc2hvd0VsZW1lbnQnKTtcblxuICAgIHZhciBjdXJyZW50RWxlbWVudFBvc2l0aW9uID0gX2dldFByb3BWYWx1ZSh0YXJnZXRFbGVtZW50LmVsZW1lbnQsICdwb3NpdGlvbicpO1xuICAgIGlmIChjdXJyZW50RWxlbWVudFBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmXG4gICAgICAgIGN1cnJlbnRFbGVtZW50UG9zaXRpb24gIT09ICdyZWxhdGl2ZScgJiZcbiAgICAgICAgY3VycmVudEVsZW1lbnRQb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgLy9jaGFuZ2UgdG8gbmV3IGludHJvIGl0ZW1cbiAgICAgIF9hZGRDbGFzcyh0YXJnZXRFbGVtZW50LmVsZW1lbnQsICdpbnRyb2pzLXJlbGF0aXZlUG9zaXRpb24nKTtcbiAgICB9XG5cbiAgICBwYXJlbnRFbG0gPSB0YXJnZXRFbGVtZW50LmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAocGFyZW50RWxtICE9PSBudWxsKSB7XG4gICAgICBpZiAoIXBhcmVudEVsbS50YWdOYW1lIHx8IHBhcmVudEVsbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5JykgYnJlYWs7XG5cbiAgICAgIC8vZml4IFRoZSBTdGFja2luZyBDb250ZXh0IHByb2JsZW0uXG4gICAgICAvL01vcmUgZGV0YWlsOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9HdWlkZS9DU1MvVW5kZXJzdGFuZGluZ196X2luZGV4L1RoZV9zdGFja2luZ19jb250ZXh0XG4gICAgICB2YXIgekluZGV4ID0gX2dldFByb3BWYWx1ZShwYXJlbnRFbG0sICd6LWluZGV4Jyk7XG4gICAgICB2YXIgb3BhY2l0eSA9IHBhcnNlRmxvYXQoX2dldFByb3BWYWx1ZShwYXJlbnRFbG0sICdvcGFjaXR5JykpO1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IF9nZXRQcm9wVmFsdWUocGFyZW50RWxtLCAndHJhbnNmb3JtJykgfHwgX2dldFByb3BWYWx1ZShwYXJlbnRFbG0sICctd2Via2l0LXRyYW5zZm9ybScpIHx8IF9nZXRQcm9wVmFsdWUocGFyZW50RWxtLCAnLW1vei10cmFuc2Zvcm0nKSB8fCBfZ2V0UHJvcFZhbHVlKHBhcmVudEVsbSwgJy1tcy10cmFuc2Zvcm0nKSB8fCBfZ2V0UHJvcFZhbHVlKHBhcmVudEVsbSwgJy1vLXRyYW5zZm9ybScpO1xuICAgICAgaWYgKC9bMC05XSsvLnRlc3QoekluZGV4KSB8fCBvcGFjaXR5IDwgMSB8fCAodHJhbnNmb3JtICE9PSAnbm9uZScgJiYgdHJhbnNmb3JtICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIF9hZGRDbGFzcyhwYXJlbnRFbG0sICdpbnRyb2pzLWZpeFBhcmVudCcpO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnRFbG0gPSBwYXJlbnRFbG0ucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBJdGVyYXRlcyBhcnJheXNcbiAgKlxuICAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICAqIEBwYXJhbSB7RnVuY3Rpb259IGZvckVhY2hGbmNcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wbGV0ZUZuY1xuICAqIEByZXR1cm4ge051bGx9XG4gICovXG4gIGZ1bmN0aW9uIF9mb3JFYWNoKGFyciwgZm9yRWFjaEZuYywgY29tcGxldGVGbmMpIHtcbiAgICAvLyBpbiBjYXNlIGFyciBpcyBhbiBlbXB0eSBxdWVyeSBzZWxlY3RvciBub2RlIGxpc3RcbiAgICBpZiAoYXJyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZvckVhY2hGbmMoYXJyW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mKGNvbXBsZXRlRm5jKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcGxldGVGbmMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBNYXJrIGFueSBvYmplY3Qgd2l0aCBhbiBpbmNyZW1lbnRpbmcgbnVtYmVyXG4gICogdXNlZCBmb3Iga2VlcGluZyB0cmFjayBvZiBvYmplY3RzXG4gICpcbiAgKiBAcGFyYW0gT2JqZWN0IG9iaiAgIEFueSBvYmplY3Qgb3IgRE9NIEVsZW1lbnRcbiAgKiBAcGFyYW0gU3RyaW5nIGtleVxuICAqIEByZXR1cm4gT2JqZWN0XG4gICovXG4gIHZhciBfc3RhbXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBrZXlzID0ge307XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN0YW1wIChvYmosIGtleSkge1xuICAgICAgXG4gICAgICAvLyBnZXQgZ3JvdXAga2V5XG4gICAgICBrZXkgPSBrZXkgfHwgJ2ludHJvanMtc3RhbXAnO1xuXG4gICAgICAvLyBlYWNoIGdyb3VwIGluY3JlbWVudHMgZnJvbSAwXG4gICAgICBrZXlzW2tleV0gPSBrZXlzW2tleV0gfHwgMDtcblxuICAgICAgLy8gc3RhbXAgb25seSBvbmNlIHBlciBvYmplY3RcbiAgICAgIGlmIChvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGluY3JlbWVudCBrZXkgZm9yIGVhY2ggbmV3IG9iamVjdFxuICAgICAgICBvYmpba2V5XSA9IGtleXNba2V5XSsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfTtcbiAgfSkoKTtcblxuICAvKipcbiAgKiBET01FdmVudCBIYW5kbGVzIGFsbCBET00gZXZlbnRzXG4gICpcbiAgKiBtZXRob2RzOlxuICAqXG4gICogb24gLSBhZGQgZXZlbnQgaGFuZGxlclxuICAqIG9mZiAtIHJlbW92ZSBldmVudFxuICAqL1xuICB2YXIgRE9NRXZlbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERPTUV2ZW50ICgpIHtcbiAgICAgIHZhciBldmVudHNfa2V5ID0gJ2ludHJvanNfZXZlbnQnO1xuICAgICAgXG4gICAgICAvKipcbiAgICAgICogR2V0cyBhIHVuaXF1ZSBJRCBmb3IgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgICpcbiAgICAgICogQHBhcmFtIE9iamVjdCBvYmpcbiAgICAgICogQHBhcmFtIFN0cmluZyB0eXBlICAgICAgICBldmVudCB0eXBlXG4gICAgICAqIEBwYXJhbSBGdW5jdGlvbiBsaXN0ZW5lclxuICAgICAgKiBAcGFyYW0gT2JqZWN0IGNvbnRleHRcbiAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICovXG4gICAgICB0aGlzLl9pZCA9IGZ1bmN0aW9uIChvYmosIHR5cGUsIGxpc3RlbmVyLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0eXBlICsgX3N0YW1wKGxpc3RlbmVyKSArIChjb250ZXh0ID8gJ18nICsgX3N0YW1wKGNvbnRleHQpIDogJycpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJcbiAgICAgICpcbiAgICAgICogQHBhcmFtIE9iamVjdCBvYmpcbiAgICAgICogQHBhcmFtIFN0cmluZyB0eXBlICAgICAgICBldmVudCB0eXBlXG4gICAgICAqIEBwYXJhbSBGdW5jdGlvbiBsaXN0ZW5lclxuICAgICAgKiBAcGFyYW0gT2JqZWN0IGNvbnRleHRcbiAgICAgICogQHBhcmFtIEJvb2xlYW4gdXNlQ2FwdHVyZVxuICAgICAgKiBAcmV0dXJuIG51bGxcbiAgICAgICovXG4gICAgICB0aGlzLm9uID0gZnVuY3Rpb24gKG9iaiwgdHlwZSwgbGlzdGVuZXIsIGNvbnRleHQsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5faWQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIuY2FsbChjb250ZXh0IHx8IG9iaiwgZSB8fCB3aW5kb3cuZXZlbnQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluIG9iaikge1xuICAgICAgICAgIG9iai5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKCdhdHRhY2hFdmVudCcgaW4gb2JqKSB7XG4gICAgICAgICAgb2JqLmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ialtldmVudHNfa2V5XSA9IG9ialtldmVudHNfa2V5XSB8fCB7fTtcbiAgICAgICAgb2JqW2V2ZW50c19rZXldW2lkXSA9IGhhbmRsZXI7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lclxuICAgICAgKlxuICAgICAgKiBAcGFyYW0gT2JqZWN0IG9ialxuICAgICAgKiBAcGFyYW0gU3RyaW5nIHR5cGUgICAgICAgIGV2ZW50IHR5cGVcbiAgICAgICogQHBhcmFtIEZ1bmN0aW9uIGxpc3RlbmVyXG4gICAgICAqIEBwYXJhbSBPYmplY3QgY29udGV4dFxuICAgICAgKiBAcGFyYW0gQm9vbGVhbiB1c2VDYXB0dXJlXG4gICAgICAqIEByZXR1cm4gbnVsbFxuICAgICAgKi9cbiAgICAgIHRoaXMub2ZmID0gZnVuY3Rpb24gKG9iaiwgdHlwZSwgbGlzdGVuZXIsIGNvbnRleHQsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5faWQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBvYmpbZXZlbnRzX2tleV0gJiYgb2JqW2V2ZW50c19rZXldW2lkXTtcblxuICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ3JlbW92ZUV2ZW50TGlzdGVuZXInIGluIG9iaikge1xuICAgICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKCdkZXRhY2hFdmVudCcgaW4gb2JqKSB7XG4gICAgICAgICAgb2JqLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ialtldmVudHNfa2V5XVtpZF0gPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERPTUV2ZW50KCk7XG4gIH0pKCk7XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBhIGNsYXNzIHRvIGFuIGVsZW1lbnRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2FkZENsYXNzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWVcbiAgICogQHJldHVybnMgbnVsbFxuICAgKi9cbiAgZnVuY3Rpb24gX2FkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgICAgLy8gc3ZnXG4gICAgICB2YXIgcHJlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG5cbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHByZSArICcgJyArIGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBtb2Rlcm4gY2xhc3NMaXN0IHByb3BlcnR5XG4gICAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgIF9mb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uIChjbHMpIHtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoIGNscyApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQuY2xhc3NOYW1lLm1hdGNoKCBjbGFzc05hbWUgKSkge1xuICAgICAgICAvLyBjaGVjayBpZiBlbGVtZW50IGRvZXNuJ3QgYWxyZWFkeSBoYXZlIGNsYXNzTmFtZVxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNsYXNzIGZyb20gYW4gZWxlbWVudFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfcmVtb3ZlQ2xhc3NcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBjbGFzc05hbWVSZWdleCBjYW4gYmUgcmVnZXggb3Igc3RyaW5nXG4gICAqIEByZXR1cm5zIG51bGxcbiAgICovXG4gIGZ1bmN0aW9uIF9yZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWVSZWdleCkge1xuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgICAgdmFyIHByZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnO1xuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBwcmUucmVwbGFjZShjbGFzc05hbWVSZWdleCwgJycpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShjbGFzc05hbWVSZWdleCwgJycpLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGVsZW1lbnQgQ1NTIHByb3BlcnR5IG9uIHRoZSBwYWdlXG4gICAqIFRoYW5rcyB0byBKYXZhU2NyaXB0IEtpdDogaHR0cDovL3d3dy5qYXZhc2NyaXB0a2l0LmNvbS9kaHRtbHR1dG9ycy9kaHRtbGNhc2NhZGU0LnNodG1sXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9nZXRQcm9wVmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4gICAqIEByZXR1cm5zIEVsZW1lbnQncyBwcm9wZXJ0eSB2YWx1ZVxuICAgKi9cbiAgZnVuY3Rpb24gX2dldFByb3BWYWx1ZSAoZWxlbWVudCwgcHJvcE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gJyc7XG4gICAgaWYgKGVsZW1lbnQuY3VycmVudFN0eWxlKSB7IC8vSUVcbiAgICAgIHByb3BWYWx1ZSA9IGVsZW1lbnQuY3VycmVudFN0eWxlW3Byb3BOYW1lXTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHsgLy9PdGhlcnNcbiAgICAgIHByb3BWYWx1ZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wTmFtZSk7XG4gICAgfVxuXG4gICAgLy9QcmV2ZW50IGV4Y2VwdGlvbiBpbiBJRVxuICAgIGlmIChwcm9wVmFsdWUgJiYgcHJvcFZhbHVlLnRvTG93ZXJDYXNlKSB7XG4gICAgICByZXR1cm4gcHJvcFZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcm9wVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0byBzZWUgaWYgdGFyZ2V0IGVsZW1lbnQgKG9yIHBhcmVudHMpIHBvc2l0aW9uIGlzIGZpeGVkIG9yIG5vdFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfaXNGaXhlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudFxuICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAqL1xuICBmdW5jdGlvbiBfaXNGaXhlZCAoZWxlbWVudCkge1xuICAgIHZhciBwID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwIHx8IHAubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChfZ2V0UHJvcFZhbHVlKGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2lzRml4ZWQocCk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBjcm9zcy1icm93c2VyIHdheSB0byBnZXQgdGhlIHNjcmVlbiBkaW1lbnNpb25zXG4gICAqIHZpYTogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81ODY0NDY3L2ludGVybmV0LWV4cGxvcmVyLWlubmVyaGVpZ2h0XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9nZXRXaW5TaXplXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHdpZHRoIGFuZCBoZWlnaHQgYXR0cmlidXRlc1xuICAgKi9cbiAgZnVuY3Rpb24gX2dldFdpblNpemUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBEID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIHsgd2lkdGg6IEQuY2xpZW50V2lkdGgsIGhlaWdodDogRC5jbGllbnRIZWlnaHQgfTtcbiAgICB9Y2F0Y2goZSkge1xuICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0IG9yIG5vdFxuICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyMzk5OS9ob3ctdG8tdGVsbC1pZi1hLWRvbS1lbGVtZW50LWlzLXZpc2libGUtaW4tdGhlLWN1cnJlbnQtdmlld3BvcnRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2VsZW1lbnRJblZpZXdwb3J0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbFxuICAgKi9cbiAgZnVuY3Rpb24gX2VsZW1lbnRJblZpZXdwb3J0KGVsKSB7XG4gICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHJldHVybiAoXG4gICAgICByZWN0LnRvcCA+PSAwICYmXG4gICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgKHJlY3QuYm90dG9tKzgwKSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQgJiYgLy8gYWRkIDgwIHRvIGdldCB0aGUgdGV4dCByaWdodFxuICAgICAgcmVjdC5yaWdodCA8PSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG92ZXJsYXkgbGF5ZXIgdG8gdGhlIHBhZ2VcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX2FkZE92ZXJsYXlMYXllclxuICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0RWxtXG4gICAqL1xuICBmdW5jdGlvbiBfYWRkT3ZlcmxheUxheWVyKHRhcmdldEVsbSkge1xuICAgIHZhciBvdmVybGF5TGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgc3R5bGVUZXh0ID0gJycsXG4gICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgLy9zZXQgY3NzIGNsYXNzIG5hbWVcbiAgICBvdmVybGF5TGF5ZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtb3ZlcmxheSc7XG5cbiAgICAvL2NoZWNrIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBib2R5LCB3ZSBzaG91bGQgY2FsY3VsYXRlIHRoZSBzaXplIG9mIG92ZXJsYXkgbGF5ZXIgaW4gYSBiZXR0ZXIgd2F5XG4gICAgaWYgKCF0YXJnZXRFbG0udGFnTmFtZSB8fCB0YXJnZXRFbG0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScpIHtcbiAgICAgIHN0eWxlVGV4dCArPSAndG9wOiAwO2JvdHRvbTogMDsgbGVmdDogMDtyaWdodDogMDtwb3NpdGlvbjogZml4ZWQ7JztcbiAgICAgIG92ZXJsYXlMYXllci5zdHlsZS5jc3NUZXh0ID0gc3R5bGVUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3NldCBvdmVybGF5IGxheWVyIHBvc2l0aW9uXG4gICAgICB2YXIgZWxlbWVudFBvc2l0aW9uID0gX2dldE9mZnNldCh0YXJnZXRFbG0pO1xuICAgICAgaWYgKGVsZW1lbnRQb3NpdGlvbikge1xuICAgICAgICBzdHlsZVRleHQgKz0gJ3dpZHRoOiAnICsgZWxlbWVudFBvc2l0aW9uLndpZHRoICsgJ3B4OyBoZWlnaHQ6JyArIGVsZW1lbnRQb3NpdGlvbi5oZWlnaHQgKyAncHg7IHRvcDonICsgZWxlbWVudFBvc2l0aW9uLnRvcCArICdweDtsZWZ0OiAnICsgZWxlbWVudFBvc2l0aW9uLmxlZnQgKyAncHg7JztcbiAgICAgICAgb3ZlcmxheUxheWVyLnN0eWxlLmNzc1RleHQgPSBzdHlsZVRleHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGFyZ2V0RWxtLmFwcGVuZENoaWxkKG92ZXJsYXlMYXllcik7XG5cbiAgICBvdmVybGF5TGF5ZXIub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuX29wdGlvbnMuZXhpdE9uT3ZlcmxheUNsaWNrID09PSB0cnVlKSB7XG4gICAgICAgIF9leGl0SW50cm8uY2FsbChzZWxmLCB0YXJnZXRFbG0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHN0eWxlVGV4dCArPSAnb3BhY2l0eTogJyArIHNlbGYuX29wdGlvbnMub3ZlcmxheU9wYWNpdHkudG9TdHJpbmcoKSArICc7JztcbiAgICAgIG92ZXJsYXlMYXllci5zdHlsZS5jc3NUZXh0ID0gc3R5bGVUZXh0O1xuICAgIH0sIDEwKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgb3BlbiBoaW50ICh0b29sdGlwIGhpbnQpXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9yZW1vdmVIaW50VG9vbHRpcFxuICAgKi9cbiAgZnVuY3Rpb24gX3JlbW92ZUhpbnRUb29sdGlwKCkge1xuICAgIHZhciB0b29sdGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtaGludFJlZmVyZW5jZScpO1xuXG4gICAgaWYgKHRvb2x0aXApIHtcbiAgICAgIHZhciBzdGVwID0gdG9vbHRpcC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcCcpO1xuICAgICAgdG9vbHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvb2x0aXApO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHBhcnNpbmcgaGludCBpdGVtc1xuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldEVsbVxuICAgKiBAbWV0aG9kIF9zdGFydEhpbnRcbiAgICovXG4gIGZ1bmN0aW9uIF9wb3B1bGF0ZUhpbnRzKHRhcmdldEVsbSkge1xuXG4gICAgdGhpcy5faW50cm9JdGVtcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuaGludHMpIHtcbiAgICAgIF9mb3JFYWNoKHRoaXMuX29wdGlvbnMuaGludHMsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50SXRlbSA9IF9jbG9uZU9iamVjdChoaW50KTtcblxuICAgICAgICBpZiAodHlwZW9mKGN1cnJlbnRJdGVtLmVsZW1lbnQpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vZ3JhYiB0aGUgZWxlbWVudCB3aXRoIGdpdmVuIHNlbGVjdG9yIGZyb20gdGhlIHBhZ2VcbiAgICAgICAgICBjdXJyZW50SXRlbS5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjdXJyZW50SXRlbS5lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRJdGVtLmhpbnRQb3NpdGlvbiA9IGN1cnJlbnRJdGVtLmhpbnRQb3NpdGlvbiB8fCB0aGlzLl9vcHRpb25zLmhpbnRQb3NpdGlvbjtcbiAgICAgICAgY3VycmVudEl0ZW0uaGludEFuaW1hdGlvbiA9IGN1cnJlbnRJdGVtLmhpbnRBbmltYXRpb24gfHwgdGhpcy5fb3B0aW9ucy5oaW50QW5pbWF0aW9uO1xuXG4gICAgICAgIGlmIChjdXJyZW50SXRlbS5lbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5faW50cm9JdGVtcy5wdXNoKGN1cnJlbnRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGhpbnRzID0gdGFyZ2V0RWxtLnF1ZXJ5U2VsZWN0b3JBbGwoJypbZGF0YS1oaW50XScpO1xuXG4gICAgICBpZiAoIWhpbnRzIHx8ICFoaW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvL2ZpcnN0IGFkZCBpbnRybyBpdGVtcyB3aXRoIGRhdGEtc3RlcFxuICAgICAgX2ZvckVhY2goaGludHMsIGZ1bmN0aW9uIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAvLyBoaW50IGFuaW1hdGlvblxuICAgICAgICB2YXIgaGludEFuaW1hdGlvbiA9IGN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1oaW50YW5pbWF0aW9uJyk7XG5cbiAgICAgICAgaWYgKGhpbnRBbmltYXRpb24pIHtcbiAgICAgICAgICBoaW50QW5pbWF0aW9uID0gKGhpbnRBbmltYXRpb24gPT09ICd0cnVlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGludEFuaW1hdGlvbiA9IHRoaXMuX29wdGlvbnMuaGludEFuaW1hdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ludHJvSXRlbXMucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgaGludDogY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWhpbnQnKSxcbiAgICAgICAgICBoaW50UG9zaXRpb246IGN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1oaW50cG9zaXRpb24nKSB8fCB0aGlzLl9vcHRpb25zLmhpbnRQb3NpdGlvbixcbiAgICAgICAgICBoaW50QW5pbWF0aW9uOiBoaW50QW5pbWF0aW9uLFxuICAgICAgICAgIHRvb2x0aXBDbGFzczogY3VycmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRvb2x0aXBjbGFzcycpLFxuICAgICAgICAgIHBvc2l0aW9uOiBjdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zaXRpb24nKSB8fCB0aGlzLl9vcHRpb25zLnRvb2x0aXBQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgX2FkZEhpbnRzLmNhbGwodGhpcyk7XG5cbiAgICAvKiBcbiAgICB0b2RvOlxuICAgIHRoZXNlIGV2ZW50cyBzaG91bGQgYmUgcmVtb3ZlZCBhdCBzb21lIHBvaW50IFxuICAgICovXG4gICAgRE9NRXZlbnQub24oZG9jdW1lbnQsICdjbGljaycsIF9yZW1vdmVIaW50VG9vbHRpcCwgdGhpcywgZmFsc2UpO1xuICAgIERPTUV2ZW50Lm9uKHdpbmRvdywgJ3Jlc2l6ZScsIF9yZUFsaWduSGludHMsIHRoaXMsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlLWFsaWducyBhbGwgaGludCBlbGVtZW50c1xuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfcmVBbGlnbkhpbnRzXG4gICAqL1xuICBmdW5jdGlvbiBfcmVBbGlnbkhpbnRzKCkge1xuICAgIF9mb3JFYWNoKHRoaXMuX2ludHJvSXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBpZiAodHlwZW9mKGl0ZW0udGFyZ2V0RWxlbWVudCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX2FsaWduSGludFBvc2l0aW9uLmNhbGwodGhpcywgaXRlbS5oaW50UG9zaXRpb24sIGl0ZW0uZWxlbWVudCwgaXRlbS50YXJnZXRFbGVtZW50KTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICogR2V0IGEgcXVlcnlzZWxlY3RvciB3aXRoaW4gdGhlIGhpbnQgd3JhcHBlclxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXG4gICogQHJldHVybiB7Tm9kZUxpc3R8QXJyYXl9XG4gICovXG4gIGZ1bmN0aW9uIF9oaW50UXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHZhciBoaW50c1dyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1oaW50cycpO1xuICAgIHJldHVybiAoaGludHNXcmFwcGVyKSA/IGhpbnRzV3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgYSBoaW50XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9oaWRlSGludFxuICAgKi9cbiAgZnVuY3Rpb24gX2hpZGVIaW50KHN0ZXBJZCkge1xuICAgIHZhciBoaW50ID0gX2hpbnRRdWVyeVNlbGVjdG9yQWxsKCcuaW50cm9qcy1oaW50W2RhdGEtc3RlcD1cIicgKyBzdGVwSWQgKyAnXCJdJylbMF07XG4gICAgXG4gICAgX3JlbW92ZUhpbnRUb29sdGlwLmNhbGwodGhpcyk7XG5cbiAgICBpZiAoaGludCkge1xuICAgICAgX2FkZENsYXNzKGhpbnQsICdpbnRyb2pzLWhpZGVoaW50Jyk7XG4gICAgfVxuXG4gICAgLy8gY2FsbCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIGFueSlcbiAgICBpZiAodHlwZW9mICh0aGlzLl9oaW50Q2xvc2VDYWxsYmFjaykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLl9oaW50Q2xvc2VDYWxsYmFjay5jYWxsKHRoaXMsIHN0ZXBJZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgYWxsIGhpbnRzXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9oaWRlSGludHNcbiAgICovXG4gIGZ1bmN0aW9uIF9oaWRlSGludHMoKSB7XG4gICAgdmFyIGhpbnRzID0gX2hpbnRRdWVyeVNlbGVjdG9yQWxsKCcuaW50cm9qcy1oaW50Jyk7XG5cbiAgICBfZm9yRWFjaChoaW50cywgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIF9oaWRlSGludC5jYWxsKHRoaXMsIGhpbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAnKSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGFsbCBoaW50c1xuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfc2hvd0hpbnRzXG4gICAqL1xuICBmdW5jdGlvbiBfc2hvd0hpbnRzKCkge1xuICAgIHZhciBoaW50cyA9IF9oaW50UXVlcnlTZWxlY3RvckFsbCgnLmludHJvanMtaGludCcpO1xuXG4gICAgaWYgKGhpbnRzICYmIGhpbnRzLmxlbmd0aCkge1xuICAgICAgX2ZvckVhY2goaGludHMsIGZ1bmN0aW9uIChoaW50KSB7XG4gICAgICAgIF9zaG93SGludC5jYWxsKHRoaXMsIGhpbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAnKSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcG9wdWxhdGVIaW50cy5jYWxsKHRoaXMsIHRoaXMuX3RhcmdldEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGEgaGludFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfc2hvd0hpbnRcbiAgICovXG4gIGZ1bmN0aW9uIF9zaG93SGludChzdGVwSWQpIHtcbiAgICB2YXIgaGludCA9IF9oaW50UXVlcnlTZWxlY3RvckFsbCgnLmludHJvanMtaGludFtkYXRhLXN0ZXA9XCInICsgc3RlcElkICsgJ1wiXScpWzBdO1xuXG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIF9yZW1vdmVDbGFzcyhoaW50LCAvaW50cm9qcy1oaWRlaGludC9nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgaGludCBlbGVtZW50cyBvbiB0aGUgcGFnZVxuICAgKiBVc2VmdWwgd2hlbiB5b3Ugd2FudCB0byBkZXN0cm95IHRoZSBlbGVtZW50cyBhbmQgYWRkIHRoZW0gYWdhaW4gKGUuZy4gYSBtb2RhbCBvciBwb3B1cClcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX3JlbW92ZUhpbnRzXG4gICAqL1xuICBmdW5jdGlvbiBfcmVtb3ZlSGludHMoKSB7XG4gICAgdmFyIGhpbnRzID0gX2hpbnRRdWVyeVNlbGVjdG9yQWxsKCcuaW50cm9qcy1oaW50Jyk7XG5cbiAgICBfZm9yRWFjaChoaW50cywgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIF9yZW1vdmVIaW50LmNhbGwodGhpcywgaGludC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcCcpKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBvbmUgc2luZ2xlIGhpbnQgZWxlbWVudCBmcm9tIHRoZSBwYWdlXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGRlc3Ryb3kgdGhlIGVsZW1lbnQgYW5kIGFkZCB0aGVtIGFnYWluIChlLmcuIGEgbW9kYWwgb3IgcG9wdXApXG4gICAqIFVzZSByZW1vdmVIaW50cyBpZiB5b3Ugd2FudCB0byByZW1vdmUgYWxsIGVsZW1lbnRzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfcmVtb3ZlSGludFxuICAgKi9cbiAgZnVuY3Rpb24gX3JlbW92ZUhpbnQoc3RlcElkKSB7XG4gICAgdmFyIGhpbnQgPSBfaGludFF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnRyb2pzLWhpbnRbZGF0YS1zdGVwPVwiJyArIHN0ZXBJZCArICdcIl0nKVswXTtcblxuICAgIGlmIChoaW50KSB7XG4gICAgICBoaW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaGludCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbGwgYXZhaWxhYmxlIGhpbnRzIHRvIHRoZSBwYWdlXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9hZGRIaW50c1xuICAgKi9cbiAgZnVuY3Rpb24gX2FkZEhpbnRzKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBoaW50c1dyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1oaW50cycpO1xuXG4gICAgaWYgKGhpbnRzV3JhcHBlciA9PT0gbnVsbCkge1xuICAgICAgaGludHNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBoaW50c1dyYXBwZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtaGludHMnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyBhbiBldmVudCBoYW5kbGVyIHVuaXF1ZSB0byB0aGUgaGludCBpdGVyYXRpb25cbiAgICAqIFxuICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpXG4gICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICAqL1xuICAgIHZhciBnZXRIaW50Q2xpY2sgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGV2dCA9IGUgPyBlIDogd2luZG93LmV2ZW50O1xuICAgICAgICBcbiAgICAgICAgaWYgKGV2dC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZ0LmNhbmNlbEJ1YmJsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGV2dC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgX3Nob3dIaW50RGlhbG9nLmNhbGwoc2VsZiwgaSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfZm9yRWFjaCh0aGlzLl9pbnRyb0l0ZW1zLCBmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAvLyBhdm9pZCBhcHBlbmQgYSBoaW50IHR3aWNlXG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmludHJvanMtaGludFtkYXRhLXN0ZXA9XCInICsgaSArICdcIl0nKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoaW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgX3NldEFuY2hvckFzQnV0dG9uKGhpbnQpO1xuXG4gICAgICBoaW50Lm9uY2xpY2sgPSBnZXRIaW50Q2xpY2soaSk7XG5cbiAgICAgIGhpbnQuY2xhc3NOYW1lID0gJ2ludHJvanMtaGludCc7XG5cbiAgICAgIGlmICghaXRlbS5oaW50QW5pbWF0aW9uKSB7XG4gICAgICAgIF9hZGRDbGFzcyhoaW50LCAnaW50cm9qcy1oaW50LW5vLWFuaW0nKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGludCdzIHBvc2l0aW9uIHNob3VsZCBiZSBmaXhlZCBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQncyBwb3NpdGlvbiBpcyBmaXhlZFxuICAgICAgaWYgKF9pc0ZpeGVkKGl0ZW0uZWxlbWVudCkpIHtcbiAgICAgICAgX2FkZENsYXNzKGhpbnQsICdpbnRyb2pzLWZpeGVkaGludCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGludERvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgaGludERvdC5jbGFzc05hbWUgPSAnaW50cm9qcy1oaW50LWRvdCc7XG4gICAgICB2YXIgaGludFB1bHNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBoaW50UHVsc2UuY2xhc3NOYW1lID0gJ2ludHJvanMtaGludC1wdWxzZSc7XG5cbiAgICAgIGhpbnQuYXBwZW5kQ2hpbGQoaGludERvdCk7XG4gICAgICBoaW50LmFwcGVuZENoaWxkKGhpbnRQdWxzZSk7XG4gICAgICBoaW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdGVwJywgaSk7XG5cbiAgICAgIC8vIHdlIHN3YXAgdGhlIGhpbnQgZWxlbWVudCB3aXRoIHRhcmdldCBlbGVtZW50XG4gICAgICAvLyBiZWNhdXNlIF9zZXRIZWxwZXJMYXllclBvc2l0aW9uIHVzZXMgYGVsZW1lbnRgIHByb3BlcnR5XG4gICAgICBpdGVtLnRhcmdldEVsZW1lbnQgPSBpdGVtLmVsZW1lbnQ7XG4gICAgICBpdGVtLmVsZW1lbnQgPSBoaW50O1xuXG4gICAgICAvLyBhbGlnbiB0aGUgaGludCBwb3NpdGlvblxuICAgICAgX2FsaWduSGludFBvc2l0aW9uLmNhbGwodGhpcywgaXRlbS5oaW50UG9zaXRpb24sIGhpbnQsIGl0ZW0udGFyZ2V0RWxlbWVudCk7XG5cbiAgICAgIGhpbnRzV3JhcHBlci5hcHBlbmRDaGlsZChoaW50KTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgLy8gYWRkaW5nIHRoZSBoaW50cyB3cmFwcGVyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChoaW50c1dyYXBwZXIpO1xuXG4gICAgLy8gY2FsbCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIGFueSlcbiAgICBpZiAodHlwZW9mICh0aGlzLl9oaW50c0FkZGVkQ2FsbGJhY2spICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5faGludHNBZGRlZENhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFsaWducyBoaW50IHBvc2l0aW9uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9hbGlnbkhpbnRQb3NpdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGhpbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnRcbiAgICovXG4gIGZ1bmN0aW9uIF9hbGlnbkhpbnRQb3NpdGlvbihwb3NpdGlvbiwgaGludCwgZWxlbWVudCkge1xuICAgIC8vIGdldC9jYWxjdWxhdGUgb2Zmc2V0IG9mIHRhcmdldCBlbGVtZW50XG4gICAgdmFyIG9mZnNldCA9IF9nZXRPZmZzZXQuY2FsbCh0aGlzLCBlbGVtZW50KTtcbiAgICB2YXIgaWNvbldpZHRoID0gMjA7XG4gICAgdmFyIGljb25IZWlnaHQgPSAyMDtcblxuICAgIC8vIGFsaWduIHRoZSBoaW50IGVsZW1lbnRcbiAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgICBkZWZhdWx0OlxuICAgICAgY2FzZSAndG9wLWxlZnQnOlxuICAgICAgICBoaW50LnN0eWxlLmxlZnQgPSBvZmZzZXQubGVmdCArICdweCc7XG4gICAgICAgIGhpbnQuc3R5bGUudG9wID0gb2Zmc2V0LnRvcCArICdweCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcbiAgICAgICAgaGludC5zdHlsZS5sZWZ0ID0gKG9mZnNldC5sZWZ0ICsgb2Zmc2V0LndpZHRoIC0gaWNvbldpZHRoKSArICdweCc7XG4gICAgICAgIGhpbnQuc3R5bGUudG9wID0gb2Zmc2V0LnRvcCArICdweCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxuICAgICAgICBoaW50LnN0eWxlLmxlZnQgPSBvZmZzZXQubGVmdCArICdweCc7XG4gICAgICAgIGhpbnQuc3R5bGUudG9wID0gKG9mZnNldC50b3AgKyBvZmZzZXQuaGVpZ2h0IC0gaWNvbkhlaWdodCkgKyAncHgnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6XG4gICAgICAgIGhpbnQuc3R5bGUubGVmdCA9IChvZmZzZXQubGVmdCArIG9mZnNldC53aWR0aCAtIGljb25XaWR0aCkgKyAncHgnO1xuICAgICAgICBoaW50LnN0eWxlLnRvcCA9IChvZmZzZXQudG9wICsgb2Zmc2V0LmhlaWdodCAtIGljb25IZWlnaHQpICsgJ3B4JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaWRkbGUtbGVmdCc6XG4gICAgICAgIGhpbnQuc3R5bGUubGVmdCA9IG9mZnNldC5sZWZ0ICsgJ3B4JztcbiAgICAgICAgaGludC5zdHlsZS50b3AgPSAob2Zmc2V0LnRvcCArIChvZmZzZXQuaGVpZ2h0IC0gaWNvbkhlaWdodCkgLyAyKSArICdweCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWlkZGxlLXJpZ2h0JzpcbiAgICAgICAgaGludC5zdHlsZS5sZWZ0ID0gKG9mZnNldC5sZWZ0ICsgb2Zmc2V0LndpZHRoIC0gaWNvbldpZHRoKSArICdweCc7XG4gICAgICAgIGhpbnQuc3R5bGUudG9wID0gKG9mZnNldC50b3AgKyAob2Zmc2V0LmhlaWdodCAtIGljb25IZWlnaHQpIC8gMikgKyAncHgnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pZGRsZS1taWRkbGUnOlxuICAgICAgICBoaW50LnN0eWxlLmxlZnQgPSAob2Zmc2V0LmxlZnQgKyAob2Zmc2V0LndpZHRoIC0gaWNvbldpZHRoKSAvIDIpICsgJ3B4JztcbiAgICAgICAgaGludC5zdHlsZS50b3AgPSAob2Zmc2V0LnRvcCArIChvZmZzZXQuaGVpZ2h0IC0gaWNvbkhlaWdodCkgLyAyKSArICdweCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm90dG9tLW1pZGRsZSc6XG4gICAgICAgIGhpbnQuc3R5bGUubGVmdCA9IChvZmZzZXQubGVmdCArIChvZmZzZXQud2lkdGggLSBpY29uV2lkdGgpIC8gMikgKyAncHgnO1xuICAgICAgICBoaW50LnN0eWxlLnRvcCA9IChvZmZzZXQudG9wICsgb2Zmc2V0LmhlaWdodCAtIGljb25IZWlnaHQpICsgJ3B4JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3AtbWlkZGxlJzpcbiAgICAgICAgaGludC5zdHlsZS5sZWZ0ID0gKG9mZnNldC5sZWZ0ICsgKG9mZnNldC53aWR0aCAtIGljb25XaWR0aCkgLyAyKSArICdweCc7XG4gICAgICAgIGhpbnQuc3R5bGUudG9wID0gb2Zmc2V0LnRvcCArICdweCc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyB3aGVuIHVzZXIgY2xpY2tzIG9uIHRoZSBoaW50IGVsZW1lbnRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqIEBtZXRob2QgX3Nob3dIaW50RGlhbG9nXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGVwSWRcbiAgICovXG4gIGZ1bmN0aW9uIF9zaG93SGludERpYWxvZyhzdGVwSWQpIHtcbiAgICB2YXIgaGludEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW50cm9qcy1oaW50W2RhdGEtc3RlcD1cIicgKyBzdGVwSWQgKyAnXCJdJyk7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLl9pbnRyb0l0ZW1zW3N0ZXBJZF07XG5cbiAgICAvLyBjYWxsIHRoZSBjYWxsYmFjayBmdW5jdGlvbiAoaWYgYW55KVxuICAgIGlmICh0eXBlb2YgKHRoaXMuX2hpbnRDbGlja0NhbGxiYWNrKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuX2hpbnRDbGlja0NhbGxiYWNrLmNhbGwodGhpcywgaGludEVsZW1lbnQsIGl0ZW0sIHN0ZXBJZCk7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCBvcGVuIHRvb2x0aXBzXG4gICAgdmFyIHJlbW92ZWRTdGVwID0gX3JlbW92ZUhpbnRUb29sdGlwLmNhbGwodGhpcyk7XG5cbiAgICAvLyB0byB0b2dnbGUgdGhlIHRvb2x0aXBcbiAgICBpZiAocGFyc2VJbnQocmVtb3ZlZFN0ZXAsIDEwKSA9PT0gc3RlcElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRvb2x0aXBMYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciB0b29sdGlwVGV4dExheWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdmFyIGFycm93TGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB2YXIgcmVmZXJlbmNlTGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHRvb2x0aXBMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy10b29sdGlwJztcblxuICAgIHRvb2x0aXBMYXllci5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vSUU5ICYgT3RoZXIgQnJvd3NlcnNcbiAgICAgIGlmIChlLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgLy9JRTggYW5kIExvd2VyXG4gICAgICBlbHNlIHtcbiAgICAgICAgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0b29sdGlwVGV4dExheWVyLmNsYXNzTmFtZSA9ICdpbnRyb2pzLXRvb2x0aXB0ZXh0JztcblxuICAgIHZhciB0b29sdGlwV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICB0b29sdGlwV3JhcHBlci5pbm5lckhUTUwgPSBpdGVtLmhpbnQ7XG5cbiAgICB2YXIgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgY2xvc2VCdXR0b24uY2xhc3NOYW1lID0gdGhpcy5fb3B0aW9ucy5idXR0b25DbGFzcztcbiAgICBjbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gICAgY2xvc2VCdXR0b24uaW5uZXJIVE1MID0gdGhpcy5fb3B0aW9ucy5oaW50QnV0dG9uTGFiZWw7XG4gICAgY2xvc2VCdXR0b24ub25jbGljayA9IF9oaWRlSGludC5iaW5kKHRoaXMsIHN0ZXBJZCk7XG5cbiAgICB0b29sdGlwVGV4dExheWVyLmFwcGVuZENoaWxkKHRvb2x0aXBXcmFwcGVyKTtcbiAgICB0b29sdGlwVGV4dExheWVyLmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uKTtcblxuICAgIGFycm93TGF5ZXIuY2xhc3NOYW1lID0gJ2ludHJvanMtYXJyb3cnO1xuICAgIHRvb2x0aXBMYXllci5hcHBlbmRDaGlsZChhcnJvd0xheWVyKTtcblxuICAgIHRvb2x0aXBMYXllci5hcHBlbmRDaGlsZCh0b29sdGlwVGV4dExheWVyKTtcblxuICAgIC8vIHNldCBjdXJyZW50IHN0ZXAgZm9yIF9wbGFjZVRvb2x0aXAgZnVuY3Rpb25cbiAgICB0aGlzLl9jdXJyZW50U3RlcCA9IGhpbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGVwJyk7XG5cbiAgICAvLyBhbGlnbiByZWZlcmVuY2UgbGF5ZXIgcG9zaXRpb25cbiAgICByZWZlcmVuY2VMYXllci5jbGFzc05hbWUgPSAnaW50cm9qcy10b29sdGlwUmVmZXJlbmNlTGF5ZXIgaW50cm9qcy1oaW50UmVmZXJlbmNlJztcbiAgICByZWZlcmVuY2VMYXllci5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RlcCcsIGhpbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGVwJykpO1xuICAgIF9zZXRIZWxwZXJMYXllclBvc2l0aW9uLmNhbGwodGhpcywgcmVmZXJlbmNlTGF5ZXIpO1xuXG4gICAgcmVmZXJlbmNlTGF5ZXIuYXBwZW5kQ2hpbGQodG9vbHRpcExheWVyKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlZmVyZW5jZUxheWVyKTtcblxuICAgIC8vc2V0IHByb3BlciBwb3NpdGlvblxuICAgIF9wbGFjZVRvb2x0aXAuY2FsbCh0aGlzLCBoaW50RWxlbWVudCwgdG9vbHRpcExheWVyLCBhcnJvd0xheWVyLCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gZWxlbWVudCBwb3NpdGlvbiBvbiB0aGUgcGFnZVxuICAgKiBUaGFua3MgdG8gYG1lb3V3YDogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDQyNDc0LzM3NTk2NlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICogQG1ldGhvZCBfZ2V0T2Zmc2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50XG4gICAqIEByZXR1cm5zIEVsZW1lbnQncyBwb3NpdGlvbiBpbmZvXG4gICAqL1xuICBmdW5jdGlvbiBfZ2V0T2Zmc2V0KGVsZW1lbnQpIHtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jRWwuc2Nyb2xsVG9wIHx8IGJvZHkuc2Nyb2xsVG9wO1xuICAgIHZhciBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbExlZnQgfHwgYm9keS5zY3JvbGxMZWZ0O1xuICAgIHZhciB4ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiB4LnRvcCArIHNjcm9sbFRvcCxcbiAgICAgIHdpZHRoOiB4LndpZHRoLFxuICAgICAgaGVpZ2h0OiB4LmhlaWdodCxcbiAgICAgIGxlZnQ6IHgubGVmdCArIHNjcm9sbExlZnRcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICogRmluZCB0aGUgbmVhcmVzdCBzY3JvbGxhYmxlIHBhcmVudFxuICAqIGNvcGllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1OTM5ODg2L2ZpbmQtZmlyc3Qtc2Nyb2xsYWJsZS1wYXJlbnRcbiAgKlxuICAqIEBwYXJhbSBFbGVtZW50IGVsZW1lbnRcbiAgKiBAcmV0dXJuIEVsZW1lbnRcbiAgKi9cbiAgZnVuY3Rpb24gX2dldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgdmFyIGV4Y2x1ZGVTdGF0aWNQYXJlbnQgPSAoc3R5bGUucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIik7XG4gICAgdmFyIG92ZXJmbG93UmVnZXggPSAvKGF1dG98c2Nyb2xsKS87XG5cbiAgICBpZiAoc3R5bGUucG9zaXRpb24gPT09IFwiZml4ZWRcIikgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gICAgXG4gICAgZm9yICh2YXIgcGFyZW50ID0gZWxlbWVudDsgKHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50KTspIHtcbiAgICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcbiAgICAgIGlmIChleGNsdWRlU3RhdGljUGFyZW50ICYmIHN0eWxlLnBvc2l0aW9uID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJmbG93UmVnZXgudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICAvKipcbiAgKiBzY3JvbGwgYSBzY3JvbGxhYmxlIGVsZW1lbnQgdG8gYSBjaGlsZCBlbGVtZW50XG4gICpcbiAgKiBAcGFyYW0gRWxlbWVudCBwYXJlbnRcbiAgKiBAcGFyYW0gRWxlbWVudCBlbGVtZW50XG4gICogQHJldHVybiBOdWxsXG4gICovXG4gIGZ1bmN0aW9uIF9zY3JvbGxQYXJlbnRUb0VsZW1lbnQgKHBhcmVudCwgZWxlbWVudCkge1xuICAgIHBhcmVudC5zY3JvbGxUb3AgPSBlbGVtZW50Lm9mZnNldFRvcCAtIHBhcmVudC5vZmZzZXRUb3A7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBwcm9ncmVzcyBwZXJjZW50YWdlXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKiBAbWV0aG9kIF9nZXRQcm9ncmVzc1xuICAgKiBAcmV0dXJucyBjdXJyZW50IHByb2dyZXNzIHBlcmNlbnRhZ2VcbiAgICovXG4gIGZ1bmN0aW9uIF9nZXRQcm9ncmVzcygpIHtcbiAgICAvLyBTdGVwcyBhcmUgMCBpbmRleGVkXG4gICAgdmFyIGN1cnJlbnRTdGVwID0gcGFyc2VJbnQoKHRoaXMuX2N1cnJlbnRTdGVwICsgMSksIDEwKTtcbiAgICByZXR1cm4gKChjdXJyZW50U3RlcCAvIHRoaXMuX2ludHJvSXRlbXMubGVuZ3RoKSAqIDEwMCk7XG4gIH1cblxuICAvKipcbiAgICogT3ZlcndyaXRlcyBvYmoxJ3MgdmFsdWVzIHdpdGggb2JqMidzIGFuZCBhZGRzIG9iajIncyBpZiBub24gZXhpc3RlbnQgaW4gb2JqMVxuICAgKiB2aWE6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTcxMjUxL2hvdy1jYW4taS1tZXJnZS1wcm9wZXJ0aWVzLW9mLXR3by1qYXZhc2NyaXB0LW9iamVjdHMtZHluYW1pY2FsbHlcbiAgICpcbiAgICogQHBhcmFtIG9iajFcbiAgICogQHBhcmFtIG9iajJcbiAgICogQHJldHVybnMgb2JqMyBhIG5ldyBvYmplY3QgYmFzZWQgb24gb2JqMSBhbmQgb2JqMlxuICAgKi9cbiAgZnVuY3Rpb24gX21lcmdlT3B0aW9ucyhvYmoxLG9iajIpIHtcbiAgICB2YXIgb2JqMyA9IHt9LFxuICAgICAgYXR0cm5hbWU7XG4gICAgZm9yIChhdHRybmFtZSBpbiBvYmoxKSB7IG9iajNbYXR0cm5hbWVdID0gb2JqMVthdHRybmFtZV07IH1cbiAgICBmb3IgKGF0dHJuYW1lIGluIG9iajIpIHsgb2JqM1thdHRybmFtZV0gPSBvYmoyW2F0dHJuYW1lXTsgfVxuICAgIHJldHVybiBvYmozO1xuICB9XG5cbiAgdmFyIGludHJvSnMgPSBmdW5jdGlvbiAodGFyZ2V0RWxtKSB7XG4gICAgdmFyIGluc3RhbmNlO1xuXG4gICAgaWYgKHR5cGVvZiAodGFyZ2V0RWxtKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vT2ssIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaW5zdGFuY2UgPSBuZXcgSW50cm9Kcyh0YXJnZXRFbG0pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgKHRhcmdldEVsbSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvL3NlbGVjdCB0aGUgdGFyZ2V0IGVsZW1lbnQgd2l0aCBxdWVyeSBzZWxlY3RvclxuICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldEVsbSk7XG5cbiAgICAgIGlmICh0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IEludHJvSnModGFyZ2V0RWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIGVsZW1lbnQgd2l0aCBnaXZlbiBzZWxlY3Rvci4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBuZXcgSW50cm9Kcyhkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gICAgLy8gYWRkIGluc3RhbmNlIHRvIGxpc3Qgb2YgX2luc3RhbmNlc1xuICAgIC8vIHBhc3NpbmcgZ3JvdXAgdG8gX3N0YW1wIHRvIGluY3JlbWVudFxuICAgIC8vIGZyb20gMCBvbndhcmQgc29tZXdoYXQgcmVsaWFibHlcbiAgICBpbnRyb0pzLmluc3RhbmNlc1sgX3N0YW1wKGluc3RhbmNlLCAnaW50cm9qcy1pbnN0YW5jZScpIF0gPSBpbnN0YW5jZTtcblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvKipcbiAgICogQ3VycmVudCBJbnRyb0pzIHZlcnNpb25cbiAgICpcbiAgICogQHByb3BlcnR5IHZlcnNpb25cbiAgICogQHR5cGUgU3RyaW5nXG4gICAqL1xuICBpbnRyb0pzLnZlcnNpb24gPSBWRVJTSU9OO1xuXG4gIC8qKlxuICAqIGtleS12YWwgb2JqZWN0IGhlbHBlciBmb3IgaW50cm9KcyBpbnN0YW5jZXNcbiAgKlxuICAqIEBwcm9wZXJ0eSBpbnN0YW5jZXNcbiAgKiBAdHlwZSBPYmplY3RcbiAgKi9cbiAgaW50cm9Kcy5pbnN0YW5jZXMgPSB7fTtcblxuICAvL1Byb3RvdHlwZVxuICBpbnRyb0pzLmZuID0gSW50cm9Kcy5wcm90b3R5cGUgPSB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgSW50cm9Kcyh0aGlzKTtcbiAgICB9LFxuICAgIHNldE9wdGlvbjogZnVuY3Rpb24ob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgdGhpcy5fb3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX29wdGlvbnMgPSBfbWVyZ2VPcHRpb25zKHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICBfaW50cm9Gb3JFbGVtZW50LmNhbGwodGhpcywgdGhpcy5fdGFyZ2V0RWxlbWVudCwgZ3JvdXApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBnb1RvU3RlcDogZnVuY3Rpb24oc3RlcCkge1xuICAgICAgX2dvVG9TdGVwLmNhbGwodGhpcywgc3RlcCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZFN0ZXA6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghdGhpcy5fb3B0aW9ucy5zdGVwcykge1xuICAgICAgICB0aGlzLl9vcHRpb25zLnN0ZXBzID0gW107XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29wdGlvbnMuc3RlcHMucHVzaChvcHRpb25zKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGRTdGVwczogZnVuY3Rpb24oc3RlcHMpIHtcbiAgICAgIGlmICghc3RlcHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgIGZvcih2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0ZXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLmFkZFN0ZXAoc3RlcHNbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBnb1RvU3RlcE51bWJlcjogZnVuY3Rpb24oc3RlcCkge1xuICAgICAgX2dvVG9TdGVwTnVtYmVyLmNhbGwodGhpcywgc3RlcCk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgbmV4dFN0ZXA6IGZ1bmN0aW9uKCkge1xuICAgICAgX25leHRTdGVwLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHByZXZpb3VzU3RlcDogZnVuY3Rpb24oKSB7XG4gICAgICBfcHJldmlvdXNTdGVwLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGV4aXQ6IGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICBfZXhpdEludHJvLmNhbGwodGhpcywgdGhpcy5fdGFyZ2V0RWxlbWVudCwgZm9yY2UpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZWZyZXNoOiBmdW5jdGlvbigpIHtcbiAgICAgIF9yZWZyZXNoLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uYmVmb3JlY2hhbmdlOiBmdW5jdGlvbihwcm92aWRlZENhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIChwcm92aWRlZENhbGxiYWNrKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9pbnRyb0JlZm9yZUNoYW5nZUNhbGxiYWNrID0gcHJvdmlkZWRDYWxsYmFjaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY2FsbGJhY2sgZm9yIG9uYmVmb3JlY2hhbmdlIHdhcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBvbmNoYW5nZTogZnVuY3Rpb24ocHJvdmlkZWRDYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiAocHJvdmlkZWRDYWxsYmFjaykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5faW50cm9DaGFuZ2VDYWxsYmFjayA9IHByb3ZpZGVkQ2FsbGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGNhbGxiYWNrIGZvciBvbmNoYW5nZSB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uYWZ0ZXJjaGFuZ2U6IGZ1bmN0aW9uKHByb3ZpZGVkQ2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgKHByb3ZpZGVkQ2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX2ludHJvQWZ0ZXJDaGFuZ2VDYWxsYmFjayA9IHByb3ZpZGVkQ2FsbGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGNhbGxiYWNrIGZvciBvbmFmdGVyY2hhbmdlIHdhcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBvbmNvbXBsZXRlOiBmdW5jdGlvbihwcm92aWRlZENhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIChwcm92aWRlZENhbGxiYWNrKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9pbnRyb0NvbXBsZXRlQ2FsbGJhY2sgPSBwcm92aWRlZENhbGxiYWNrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm92aWRlZCBjYWxsYmFjayBmb3Igb25jb21wbGV0ZSB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uaGludHNhZGRlZDogZnVuY3Rpb24ocHJvdmlkZWRDYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiAocHJvdmlkZWRDYWxsYmFjaykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5faGludHNBZGRlZENhbGxiYWNrID0gcHJvdmlkZWRDYWxsYmFjaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY2FsbGJhY2sgZm9yIG9uaGludHNhZGRlZCB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uaGludGNsaWNrOiBmdW5jdGlvbihwcm92aWRlZENhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIChwcm92aWRlZENhbGxiYWNrKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9oaW50Q2xpY2tDYWxsYmFjayA9IHByb3ZpZGVkQ2FsbGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGNhbGxiYWNrIGZvciBvbmhpbnRjbGljayB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uaGludGNsb3NlOiBmdW5jdGlvbihwcm92aWRlZENhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIChwcm92aWRlZENhbGxiYWNrKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9oaW50Q2xvc2VDYWxsYmFjayA9IHByb3ZpZGVkQ2FsbGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGNhbGxiYWNrIGZvciBvbmhpbnRjbG9zZSB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uZXhpdDogZnVuY3Rpb24ocHJvdmlkZWRDYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiAocHJvdmlkZWRDYWxsYmFjaykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5faW50cm9FeGl0Q2FsbGJhY2sgPSBwcm92aWRlZENhbGxiYWNrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm92aWRlZCBjYWxsYmFjayBmb3Igb25leGl0IHdhcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgb25za2lwOiBmdW5jdGlvbihwcm92aWRlZENhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIChwcm92aWRlZENhbGxiYWNrKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLl9pbnRyb1NraXBDYWxsYmFjayA9IHByb3ZpZGVkQ2FsbGJhY2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIGNhbGxiYWNrIGZvciBvbnNraXAgd2FzIG5vdCBhIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBvbmJlZm9yZWV4aXQ6IGZ1bmN0aW9uKHByb3ZpZGVkQ2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgKHByb3ZpZGVkQ2FsbGJhY2spID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX2ludHJvQmVmb3JlRXhpdENhbGxiYWNrID0gcHJvdmlkZWRDYWxsYmFjaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgY2FsbGJhY2sgZm9yIG9uYmVmb3JlZXhpdCB3YXMgbm90IGEgZnVuY3Rpb24uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEhpbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIF9wb3B1bGF0ZUhpbnRzLmNhbGwodGhpcywgdGhpcy5fdGFyZ2V0RWxlbWVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGhpZGVIaW50OiBmdW5jdGlvbiAoc3RlcElkKSB7XG4gICAgICBfaGlkZUhpbnQuY2FsbCh0aGlzLCBzdGVwSWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBoaWRlSGludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9oaWRlSGludHMuY2FsbCh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc2hvd0hpbnQ6IGZ1bmN0aW9uIChzdGVwSWQpIHtcbiAgICAgIF9zaG93SGludC5jYWxsKHRoaXMsIHN0ZXBJZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHNob3dIaW50czogZnVuY3Rpb24gKCkge1xuICAgICAgX3Nob3dIaW50cy5jYWxsKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmVIaW50czogZnVuY3Rpb24gKCkge1xuICAgICAgX3JlbW92ZUhpbnRzLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbW92ZUhpbnQ6IGZ1bmN0aW9uIChzdGVwSWQpIHtcbiAgICAgIF9yZW1vdmVIaW50LmNhbGwodGhpcywgc3RlcElkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc2hvd0hpbnREaWFsb2c6IGZ1bmN0aW9uIChzdGVwSWQpIHtcbiAgICAgIF9zaG93SGludERpYWxvZy5jYWxsKHRoaXMsIHN0ZXBJZCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGludHJvSnM7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=